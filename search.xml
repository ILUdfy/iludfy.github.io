<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>垃圾收集器总结</title>
      <link href="/2024/06/15/la-ji-shou-ji-qi-zong-jie/"/>
      <url>/2024/06/15/la-ji-shou-ji-qi-zong-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="垃圾收集器总结"><a href="#垃圾收集器总结" class="headerlink" title="垃圾收集器总结"></a>垃圾收集器总结</h1><h2 id="Serial-和-Serial-Old"><a href="#Serial-和-Serial-Old" class="headerlink" title="Serial 和 Serial Old"></a>Serial 和 Serial Old</h2><p>Serial是历史最悠久的收集器，包括用于新生代的 <strong>Serial</strong> 收集器和用于老年代的 <strong>Serial Old</strong> 收集器，它的主要特点为单线程工作，如下图所示：</p><p><img src="serial-garbage-collector.png" alt="Serial"></p><p>优点：单线程工作，可以获得最高的单线程回收效率</p><p>缺点：GC时会停顿用户线程</p><h2 id="ParNew-收集器"><a href="#ParNew-收集器" class="headerlink" title="ParNew 收集器"></a>ParNew 收集器</h2><p>ParNew收集器是Serial收集器的多线程版本，除此之外和Serial几乎没有差别。在多个cpu核心的情况下比Serial性能更好。</p><p>但是ParNew收集器目前唯一的用途只有和CMS搭配使用，CMS只能和Serial和ParNew搭配，这就导致多cpu核心的情况下，想使用CMS，新生代就只有ParNew一个选择。</p><p>它的工作流程如下图所示:</p><p><img src="parnew-garbage-collector.png" alt="ParNew"></p><h2 id="Parallel-Scanvenge-收集器"><a href="#Parallel-Scanvenge-收集器" class="headerlink" title="Parallel Scanvenge 收集器"></a>Parallel Scanvenge 收集器</h2><p>这是JDK1.8的默认收集器。</p><p>它的诸多特性和ParNew非常相似，同样是新生代收集器、同样基于标记-复制算法、同样支持并行收集的多线程收集器……</p><p>它的特别之处在于，它的关注点在于获得尽可能高的吞吐量。</p><p>Parallel Scanvenge收集器的工作流程如下图：</p><p><img src="parallel-scavenge-garbage-collector.png" alt="parallel-scavenge"></p><p>Parallel Scanvenge收集器提供了两个参数来精准控制吞吐量：</p><ol><li>控制最大垃圾收集停顿时间的<code>-XX:MaxGCPauseMillis</code>， 它的参数允许一个大于0的毫秒数，收集器尽力保证GC时间不超过用户设置的时间</li><li>直接设置吞吐量大小的<code>-XX:GCTimeRatio</code>，值为一个正整数N，表示用户期望虚拟机的GC时间不超过程序运行时间的1/(1+N)。默认值为99</li></ol><p>除此之外，Parallel Scanvenge还有一个参数：</p><p> <code>-XX:UseAdaptiveSizePolicy</code>，这是一个开关参数，激活后，会启动自动调节策略，使得新生代的大小<code>-XX:Xmn</code>、Eden与Survivor的比例<code>-XX:SurvivorRatio</code>、晋升老年代对象大小<code>-XX:PretenureSizeThreshold</code>等参数不需要我们手动调节了。</p><h2 id="Parallel-Old-收集器"><a href="#Parallel-Old-收集器" class="headerlink" title="Parallel Old 收集器"></a>Parallel Old 收集器</h2><p>Parallel Old收集器是Parallel Scanvenge的老年代版本，同样支持多线程并发收集，基于标记-整理算法实现。</p><p>它是Parallel Scanvenge的搭档，一般二者搭配使用.</p><h2 id="CMS-收集器"><a href="#CMS-收集器" class="headerlink" title="CMS 收集器"></a>CMS 收集器</h2><p>和Parallel Scanvenge不同，CMS的出发点在于获得尽可能低的延迟时间。这种垃圾收集器适合用在互联网网站、B/S系统上，因为这些更关注用户的体验，希望系统的停顿时间尽可能的短。CMS采用<strong>增量更新</strong>算法实现。</p><p>CMS 收集器是一种 <strong>“标记-清除”算法</strong>实现的，它的运作过程相比于前面几种垃圾收集器来说更加复杂一些。整个过程分为四个步骤：</p><ul><li><strong>初始标记：</strong> 暂停所有的其他线程，并记录下直接与 root 相连的对象，速度很快 ；</li><li><strong>并发标记：</strong> 同时开启 GC 和用户线程，用一个闭包结构去记录可达对象。但在这个阶段结束，这个闭包结构并不能保证包含当前所有的可达对象。因为用户线程可能会不断的更新引用域，所以 GC 线程无法保证可达性分析的实时性。所以这个算法里会跟踪记录这些发生引用更新的地方。</li><li><strong>重新标记：</strong> 重新标记阶段就是为了修正并发标记期间因为用户程序继续运行而导致标记产生变动的那一部分对象的标记记录，这个阶段的停顿时间一般会比初始标记阶段的时间稍长，远远比并发标记阶段时间短</li><li><strong>并发清除：</strong> 开启用户线程，同时 GC 线程开始对未标记的区域做清扫。</li></ul><p>如图所示：</p><p><img src="cms-garbage-collector.png" alt="CMS"></p><p>CMS的缺点如下：</p><ul><li>CMS对处理器资源敏感。CMS回收线程数默认是<code>（处理器核心数量+3）/4</code> ，如果处理器核心在4个以上，回收线程只会占用不到25%的处理器资源，但当处理器核心不足4个时，CMS会对用户线程产生比较大的影响。</li><li>无法处理浮动垃圾。浮动垃圾是指在CMS的并发标记和并发清理阶段，用户线程仍在运行，也就会产生新的垃圾，这些垃圾只能等到下一次GC一起回收。</li><li>CMS基于标记-清除算法实现，会产生大量的内存碎片，当没有足够空间来分配大对象就会触发Full GC。</li></ul><h2 id="G1-收集器"><a href="#G1-收集器" class="headerlink" title="G1 收集器"></a>G1 收集器</h2><p>G1收集器基于<strong>原始快照</strong>方法实现，也是面向低延迟的垃圾收集器。它是一个飞跃，主要体现在：</p><ol><li>G1是面向全堆的收集器，也就是可以同时处理新生代和老年代，而不需要搭配两种垃圾收集器</li><li>G1可以预测它GC的停顿时间</li></ol><p>G1的工作原理：</p><p>G1把连续的堆内存划分为多个大小相等且独立的Region， 每一个Region可以根据需要扮演新生代、老年代等不同的角色。Region中有一个Humongous区域专门用来存储大对象，G1认为只要对象超过了Region大小的一半就认为是大对象，如果一个对象很大可能会用N个连续的Humongous Region存放。</p><p>G1之所以可以预测停顿时间，是因为它将Region作为最小回收单元，每次收集到的空间都是Region的整数倍。G1会跟踪Region中垃圾堆积的价值大小，价值即为回收所获得的空间以及回收时间的经验值，在后台维护优先级列表，优先收集价值更大的Region。</p><p>G1 收集器的运作大致分为以下几个步骤：</p><ul><li><strong>初始标记</strong></li><li><strong>并发标记</strong></li><li><strong>最终标记</strong></li><li><strong>筛选回收</strong></li></ul><p>​    G1收集器除了并发标记，其他阶段也要完全暂停用户线程的执行。换言之，它并非纯粹追求低延迟，而是在延迟可控的前提下尽可能提升吞吐量。</p><p>G1的缺点：</p><ol><li>G1要为每个Region维护一个记忆集，本质上这个记忆集是一个哈希表，用于存放Region的起始地址和卡表的索引号。由于Region数量很多，所以记忆集会占用大量的堆内存，通常在java堆容量的10%-20%。</li><li>G1同样无法处理浮动垃圾，当垃圾收集速度慢于对象分配速度，它也会被迫冻结用户线程运行，产生时间较长的Full GC</li><li>G1的停顿时间预测模型基于衰减均值实现。G1会收集每个Region的回收耗时、每个Region记忆集里的脏卡数量等各个可预测的步骤花费的成本。</li></ol><p>G1和CMS的对比：</p><p>G1的优势：</p><ol><li>可以指定最大停顿时间</li><li>分Region的内存布局</li><li>按收益动态确定回收集</li><li>不会产生内存空间碎片</li></ol><p>G1的劣势：</p><ol><li>内存占用角度上，G1和CMS都是用卡表来处理跨代指针，但G1更复杂，内存占用很高，且维护成本也高，尤其新生代的对象引用变化频繁，维护卡表的开销也是比较大的</li><li>执行负载的角度上，CMS使用写后屏障维护卡表，G1除了写后屏障（G1的卡表更复杂，其实这一步就已经比CMS更繁琐），为了实现原始快照算法，还需要使用写前屏障来跟踪并发时的指针变化情况。所以G1会比CMS消耗更多运算资源。</li></ol>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
          <category> GC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dijkstra算法</title>
      <link href="/2024/04/11/dijkstra-suan-fa/"/>
      <url>/2024/04/11/dijkstra-suan-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="Dijkstra算法介绍"><a href="#Dijkstra算法介绍" class="headerlink" title="Dijkstra算法介绍"></a>Dijkstra算法介绍</h2><p>Dijkstra算法是求解 <strong>非负权图</strong> 上单源最短路径的算法</p><p> 参考 <a href="[2642. 设计可以求最短路径的图类 - 力扣（LeetCode）](https://leetcode.cn/problems/design-graph-with-shortest-path-calculator/submissions/522530035/">leetcode-2642.设计可以求最短路径的图类</a>)</p><p>将结点分成两个集合：已确定最短路长度的点集（记为<code>S</code>集合）的和未确定最短路长度的点集（记为 <code>T</code> 集合）。一开始所有的点都属于<code>T</code> 集合。邻接矩阵<code>arcs[i][j]</code>表示有向边<code>i -&gt; j</code> 的权值，创建一个辅助数组<code>dist[n]</code>，其中<code>n</code>是图中节点个数，<code>dist[i]</code>表示从起点开始到节点 <code>i</code> 的最短路径长度，这里设起点为<code>i</code></p><p>初始化<code>dist[i]=0</code>，其他点的 <code>dist[j]=arcs[i][i]</code> 。</p><p>然后重复这些操作：</p><ol><li>从 <code>T</code> 集合中，选取一个最短路长度最小的结点，移到 <code>S</code> 集合中。</li><li>修改从起点<code>i</code>出发到集合<code>T</code>上任意一个顶点<code>k</code>可达的最短路径长度：若<code>dist[j] + arcs[j][k] &lt; dist[k]</code>，则更新<code>dist[k]=dist[j] + arcs[j][k]</code></li></ol><p>直到 T集合为空，算法结束。</p><p>操作一的时间复杂度为<script type="math/tex">O(n^2)</script>，操作二时间复杂度为<script type="math/tex">O(m)</script>，总复杂度为<script type="math/tex">O(n^2+m)</script>，考虑到<code>m&lt;=n-1</code>，总时间复杂度为<script type="math/tex">O(n^2)</script></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>代码如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">shortestPath</span><span class="token punctuation">(</span><span class="token keyword">int</span> node1<span class="token punctuation">,</span> <span class="token keyword">int</span> node2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//graph的数据类型为List&lt;int[]>[] graph = new List[n]，graph[i]表示节点以i为有向边起点的所有边和权重，graph[i]中int[]数组的第一个元素表示有向边的终点，第二个元素表示有向边的权重</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dist <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> visited <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//存放S集合中的节点</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>dist<span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这里除以二是防止溢出</span>        dist<span class="token punctuation">[</span>node1<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        visited<span class="token punctuation">[</span>node1<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nextArr <span class="token operator">:</span> graph<span class="token punctuation">[</span>node1<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//初始化</span>            dist<span class="token punctuation">[</span>nextArr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> nextArr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> minNode<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> minValue <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;</span>minValue<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//算法步骤一：选取最短路径节点</span>                    minNode <span class="token operator">=</span> j<span class="token punctuation">;</span>                    minValue <span class="token operator">=</span> dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            visited<span class="token punctuation">[</span>minNode<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment">//算法步骤一：加入S集合</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nextArr <span class="token operator">:</span> graph<span class="token punctuation">[</span>minNode<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">int</span> next <span class="token operator">=</span> nextArr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ncost <span class="token operator">=</span> nextArr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>dist<span class="token punctuation">[</span>next<span class="token punctuation">]</span><span class="token operator">></span>dist<span class="token punctuation">[</span>minNode<span class="token punctuation">]</span><span class="token operator">+</span>ncost<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//算法步骤二：更新最短路径</span>                    dist<span class="token punctuation">[</span>next<span class="token punctuation">]</span> <span class="token operator">=</span> dist<span class="token punctuation">[</span>minNode<span class="token punctuation">]</span><span class="token operator">+</span>ncost<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> dist<span class="token punctuation">[</span>node2<span class="token punctuation">]</span><span class="token operator">==</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token operator">/</span><span class="token number">2</span><span class="token operator">?</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span>dist<span class="token punctuation">[</span>node2<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre><p>也可以用优先队列来优化，总时间复杂度为<script type="math/tex">O(mlogm)</script></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">shortestPath</span><span class="token punctuation">(</span><span class="token keyword">int</span> node1<span class="token punctuation">,</span> <span class="token keyword">int</span> node2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//graph的数据类型为List&lt;int[]>[] graph = new List[n]，graph[i]表示节点以i为有向边起点的所有边和权重，graph[i]中int[]数组的第一个元素表示有向边的终点，第二个元素表示有向边的权重</span>        <span class="token class-name">Queue</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span>a2<span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">(</span>a1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>a2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dist <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>graph<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>dist<span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dist<span class="token punctuation">[</span>node1<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>node1<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> cost <span class="token operator">=</span> array<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> cur <span class="token operator">=</span> array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">==</span>node2<span class="token punctuation">)</span><span class="token keyword">return</span> cost<span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> edge <span class="token operator">:</span> graph<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">int</span> ncost <span class="token operator">=</span> edge<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> nnode <span class="token operator">=</span> edge<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>dist<span class="token punctuation">[</span>nnode<span class="token punctuation">]</span> <span class="token operator">></span> cost <span class="token operator">+</span> ncost<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    dist<span class="token punctuation">[</span>nnode<span class="token punctuation">]</span> <span class="token operator">=</span> cost <span class="token operator">+</span> ncost<span class="token punctuation">;</span>                    queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>nnode<span class="token punctuation">,</span> ncost<span class="token operator">+</span>cost<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图 </tag>
            
            <tag> Dijkstra </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一道缝合怪算法题的总结-LeetCode2818</title>
      <link href="/2024/04/07/yi-dao-feng-he-guai-suan-fa-ti-de-zong-jie-leetcode2818/"/>
      <url>/2024/04/07/yi-dao-feng-he-guai-suan-fa-ti-de-zong-jie-leetcode2818/</url>
      
        <content type="html"><![CDATA[<p><a href="[2818. 操作使得分最大 - 力扣（LeetCode）](https://leetcode.cn/problems/apply-operations-to-maximize-score/description/">2818.操作使得分最大</a>)</p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给你一个长度为 <code>n</code> 的正整数数组 <code>nums</code> 和一个整数 <code>k</code> 。</p><p>一开始，你的分数为 <code>1</code> 。你可以进行以下操作至多 <code>k</code> 次，目标是使你的分数最大：</p><ul><li>选择一个之前没有选过的 <strong>非空</strong> 子数组 <code>nums[l, ..., r]</code> 。</li><li>从 <code>nums[l, ..., r]</code> 里面选择一个 <strong>质数分数</strong> 最高的元素 <code>x</code> 。如果多个元素质数分数相同且最高，选择下标最小的一个。</li><li>将你的分数乘以 <code>x</code> 。</li></ul><p><code>nums[l, ..., r]</code> 表示 <code>nums</code> 中起始下标为 <code>l</code> ，结束下标为 <code>r</code> 的子数组，两个端点都包含。</p><p>一个整数的 <strong>质数分数</strong> 等于 <code>x</code> 不同质因子的数目。比方说， <code>300</code> 的质数分数为 <code>3</code> ，因为 <code>300 = 2 * 2 * 3 * 5 * 5</code> 。</p><p>请你返回进行至多 <code>k</code> 次操作后，可以得到的 <strong>最大分数</strong> 。</p><p>由于答案可能很大，请你将结果对 <code>109 + 7</code> 取余后返回。</p><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length == n &lt;= 10^5</code></li><li><code>1 &lt;= nums[i] &lt;= 10^5</code></li><li><code>1 &lt;= k &lt;= min(n * (n + 1) / 2, 10^9)</code></li></ul><h2 id="问题分解"><a href="#问题分解" class="headerlink" title="问题分解"></a>问题分解</h2><ol><li>题目最终目的是使得分最大，而得分是通过乘以数组元素实现的，也就是要尽可能乘以更大的元素，考虑维护一个大根堆</li><li>一个元素可以被选择多少次由两个指标决定：一是和左右两边质数分数的大小有关，这决定了选中该元素的子数组最多可以向两侧扩张多少，考虑维护一个单调栈；二是和非空子数组之前是否被选择过有关，涉及到了数学的计数原理</li><li>质数分数的大小计算可以先维护一个质数表</li></ol><h2 id="质数表的预处理"><a href="#质数表的预处理" class="headerlink" title="质数表的预处理"></a>质数表的预处理</h2><p>​    判断一个数是否为质数，通常采用的是从2遍历到根号n，这样做的时间复杂度为<script type="math/tex">O(\sqrt{n})</script>，还可以通过提前维护素数表来实现：</p><blockquote><p> 题目中数组元素的最大值为100000，可以提前创建一个boolean型数组<code>boolean[] isPrime = new boolean[100001];</code>，并将所有元素置为<code>true</code>，按照以下方法处理：</p><ol><li>从2开始向100000/2遍历，每次遍历到<code>isPrime[i]</code>时，将<code>i</code>的倍数<code>isPrime[i*j] ,j=2,...n</code>置为<code>false</code>表示<code>i*j</code>是合数</li><li>若当遍历到<code>isPrime[i]</code>时，<code>isPrime[i]</code>已经为<code>false</code>，代表<code>i</code>是合数 , 且它的倍数一定在之前已经被遍历过 , 所以直接跳过即可</li></ol></blockquote><p>经过这一步骤，数组<code>isPrime</code>已经可以判断数<code>i</code>是否为质数</p><p>但本题不仅要判断是否为质数 , 还需要求该数的所有质因数的数量，所以对预处理方法稍作修改：</p><blockquote><p>创建一个int型数组<code>int[] scores = new int[100001]</code>，存放每个数的质数分数，基于上述方法做如下修改：</p><ol><li>遍历到<code>scores[i]</code>时，将<code>i</code>的倍数<code>scores[i*j] ,j=1，2,...n</code>加一</li><li>遍历到<code>scores[i]</code>时，如果<code>scores[i]==0</code>代表之前从来没有被访问过，也就是<code>i</code>是素数，但考虑到素数本身也是它的质数分数，所以要将<code>scores[i]++</code>，这也就是为什么这里<code>j=1，2,...n</code>而上面的布尔型数组的<code>j=2,...n</code></li></ol></blockquote><p>经过这一步骤，数组<code>scores</code>已经存放各个数字的质数分数</p><h2 id="单调栈"><a href="#单调栈" class="headerlink" title="单调栈"></a>单调栈</h2><p>​    由于要判断数组元素左右两侧距离它最近的质数分数大于等于它的数（由于题目要求如果多个元素质数分数相同且最高，选择下标最小的一个，所以左侧是大于等于，右侧是大于），所以需要维护两个数组<code>int[] left,right</code>，这两个数组的初始化由单调栈完成</p><p>​    我最开始的思路是：</p><ol><li><strong>从左往右 </strong>遍历数组<code>nums</code>，按照质数分数 <strong>递减</strong> 维护一个单调栈，栈中存数组下标，<code>left[i]</code>的值等于栈中第一个质量分数大于等于<code>nums[i]</code>的下标</li><li>再 <strong>从右往左</strong> 遍历数组<code>nums</code>，按照按照质数分数 <strong>递增</strong> 维护一个单调栈，<code>right[i]</code>的值等于栈中第一个质量分数大于等于<code>nums[i]</code>的下标</li></ol><p>​    代码如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> scores <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//这里scores第一列是left数组，第二列是right数组</span>      <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>isPrime<span class="token punctuation">[</span>nums<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">&lt;</span>isPrime<span class="token punctuation">[</span>nums<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>              stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          scores<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span>stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          stack<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      stack<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>isPrime<span class="token punctuation">[</span>nums<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">&lt;=</span>isPrime<span class="token punctuation">[</span>nums<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>              stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          scores<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span>isPrime<span class="token punctuation">[</span>nums<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">==</span>isPrime<span class="token punctuation">[</span>nums<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">]</span>stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>          stack<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span></code></pre><p>但是看了灵神的题解发现一次遍历就可以做到（灵神是真的强），思路是这样的：</p><ol><li><code>right</code>数组所有值初始化为<code>nums</code>长度</li><li>栈中放一个初始元素<code>-1</code>，方便数组第一个元素</li><li><strong>从左往右</strong> 遍历数组<code>nums</code>， 由于栈中存放的是数组下标，因此在因为栈顶元素的质数分数小于当前元素<code>nums[i</code>]时，可以直接把弹出的数组下标的<code>right[stack.pop()] = i</code>位置幅值当前遍历的下标，当前位置即是栈中元素右侧的第一个更大的元素</li><li>栈顶质量分数小的下标弹出后，栈顶元素即是当前元素<code>nums[i]</code>左侧第一个质数分数大于等于当前元素的下标，令<code>left[i]=stack.peek()</code>即可</li><li>把下标<code>i</code>放入栈中</li></ol><p>代码如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> scores <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          scores<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> n<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          <span class="token keyword">while</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>isPrime<span class="token punctuation">[</span>nums<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">&lt;</span>isPrime<span class="token punctuation">[</span>nums<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>              scores<span class="token punctuation">[</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          scores<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span></code></pre><h2 id="快速幂"><a href="#快速幂" class="headerlink" title="快速幂"></a>快速幂</h2><p>快速幂算法比较经典了，直接贴代码：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">fastPow</span><span class="token punctuation">(</span><span class="token keyword">long</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">long</span> ans <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>y<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>y<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                ans <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token operator">*</span>ans<span class="token punctuation">)</span><span class="token operator">%</span>mod<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            x <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token operator">*</span>x<span class="token punctuation">)</span><span class="token operator">%</span>mod<span class="token punctuation">;</span>            y <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>大根堆没什么好说的，创建一个优先队列指定，按照质数分数逆序存数组下标就行</p><p>不重复的子数组通过计数原理实现</p><p>对于每个元素<code>nums[i]</code>，只要子数组的下界在<code>(left[i],i]</code>之间，上界在<code>[i,right[i])</code>之间，那么这个子数组最后选择的元素一定是<code>nums[i]</code>，一共有<code>(i-left[i])*(right[i]-i)</code>个这样的子数组；并且对于整个数组<code>nums</code>，选中每个元素的子数组集合之间一定没有交集（因为每个子数组只会选中一个元素），所以可以确定子数组之前一定是没有选择过的。</p><p>那么在<code>k</code>不为0时，从大根堆里弹出下标<code>i</code>，对于<code>nums[i]</code>，它对结果产生的贡献就是乘以<code>pow(nums[i], Math.min(k,(i-left[i])*(right[i]-i)))</code>，循环直到<code>k</code>为0即可。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>最终整道题的代码如下：</p><p>用时击败28.57%的java用户，不高，但时间复杂度依然是<code>O(nlogn)</code>：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> mod <span class="token operator">=</span> <span class="token number">1000000007</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> isPrime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">100001</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">static</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>isPrime<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>isPrime<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">*</span>i<span class="token operator">&lt;</span>isPrime<span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    isPrime<span class="token punctuation">[</span>i<span class="token operator">*</span>j<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maximumScore</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> o1<span class="token punctuation">,</span> <span class="token class-name">Integer</span> o2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> nums<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>o2<span class="token punctuation">)</span><span class="token operator">-</span>nums<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>o1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> scores <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            scores<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> n<span class="token punctuation">;</span>            queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>isPrime<span class="token punctuation">[</span>nums<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">&lt;</span>isPrime<span class="token punctuation">[</span>nums<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                scores<span class="token punctuation">[</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            scores<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// System.out.println(Arrays.deepToString(scores));</span>        <span class="token keyword">int</span> curMax <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">,</span>curMaxIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> subCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> ans <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>k<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            curMaxIndex <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            curMax <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>curMaxIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>            subCount <span class="token operator">=</span> <span class="token punctuation">(</span>curMaxIndex <span class="token operator">-</span> scores<span class="token punctuation">[</span>curMaxIndex<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>scores<span class="token punctuation">[</span>curMaxIndex<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> curMaxIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>subCount<span class="token operator">></span>k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                ans <span class="token operator">=</span> <span class="token punctuation">(</span>ans<span class="token operator">*</span><span class="token function">fastPow</span><span class="token punctuation">(</span>curMax<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span>mod<span class="token punctuation">;</span>                <span class="token comment">// System.out.println("乘以"+curMax+"的"+k+"次方");</span>                k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                ans <span class="token operator">=</span> <span class="token punctuation">(</span>ans<span class="token operator">*</span><span class="token function">fastPow</span><span class="token punctuation">(</span>curMax<span class="token punctuation">,</span> subCount<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span>mod<span class="token punctuation">;</span>                <span class="token comment">// System.out.println("乘以"+curMax+"的"+subCount+"次方");</span>                k <span class="token operator">-=</span> subCount<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">fastPow</span><span class="token punctuation">(</span><span class="token keyword">long</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">long</span> ans <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>y<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>y<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                ans <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token operator">*</span>ans<span class="token punctuation">)</span><span class="token operator">%</span>mod<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            x <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token operator">*</span>x<span class="token punctuation">)</span><span class="token operator">%</span>mod<span class="token punctuation">;</span>            y <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 素数 </tag>
            
            <tag> 单调栈 </tag>
            
            <tag> 快速幂 </tag>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql 基础篇</title>
      <link href="/2024/04/06/mysql-ji-chu-pian/"/>
      <url>/2024/04/06/mysql-ji-chu-pian/</url>
      
        <content type="html"><![CDATA[<h2 id="SQL分类"><a href="#SQL分类" class="headerlink" title="SQL分类"></a>SQL分类</h2><ol><li><p>DDL：数据定义语言</p><ul><li>CREATE</li><li>ALTER</li><li>DROP</li><li>RENAME</li><li>TRUNCATE</li></ul></li><li><p>DML：数据操作语言</p><ul><li>INSERT</li><li>DELETE</li><li>UPDATE</li><li>SELECT</li></ul></li><li><p>DCL：数据控制语言</p><ul><li>COMMIT</li><li>ROLLBACK</li><li>SAVEPOINT</li><li>GRANT</li><li>REVOKE</li></ul></li></ol><h2 id="SELECT语句"><a href="#SELECT语句" class="headerlink" title="SELECT语句"></a>SELECT语句</h2><h3 id="查询常量"><a href="#查询常量" class="headerlink" title="查询常量"></a>查询常量</h3><pre class="language-SQL" data-language="SQL"><code class="language-SQL">SELECT 19;SELECT 1+1 FROM DUAL;  # dual：伪表SELECT 0, 123, employee_id, last_nameFROM employees;</code></pre><h3 id="查询所有字段"><a href="#查询所有字段" class="headerlink" title="查询所有字段"></a>查询所有字段</h3><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> employees<span class="token punctuation">;</span></code></pre><h3 id="查询部分字段"><a href="#查询部分字段" class="headerlink" title="查询部分字段"></a>查询部分字段</h3><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> employee_id<span class="token punctuation">,</span> last_name<span class="token punctuation">,</span> salary<span class="token keyword">FROM</span> employees<span class="token punctuation">;</span></code></pre><h3 id="列的别名"><a href="#列的别名" class="headerlink" title="列的别名"></a>列的别名</h3><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment">/*两种方式：1.列原名 别名，如下面语句的employee_id emp_id2.列原名 AS 别名，如下面语句中的last_name AS lname3.基于前两种方式，可以用双引号括起别名，用于别名有空格的情况，如下面语句的salary*12 “annual sal”，但不要使用单引号*/</span><span class="token keyword">SELECT</span> employee_id emp_id<span class="token punctuation">,</span> last_name <span class="token keyword">AS</span> lname<span class="token punctuation">,</span> salary<span class="token operator">*</span><span class="token number">12</span> “annual sal”<span class="token keyword">FROM</span> employees<span class="token punctuation">;</span></code></pre><h3 id="去除重复行"><a href="#去除重复行" class="headerlink" title="去除重复行"></a>去除重复行</h3><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 正确用法</span><span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> department_id<span class="token keyword">FROM</span> employees<span class="token punctuation">;</span><span class="token comment"># 错误用法</span><span class="token keyword">SELECT</span> salary<span class="token punctuation">,</span> <span class="token keyword">DISTINCT</span> department_id<span class="token keyword">FROM</span> employees<span class="token punctuation">;</span><span class="token comment"># 不会报错，department_id 和 salary 作为整体</span><span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> department_id， salary<span class="token keyword">FROM</span> employees<span class="token punctuation">;</span></code></pre><h3 id="空值参与运算"><a href="#空值参与运算" class="headerlink" title="空值参与运算"></a>空值参与运算</h3><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 空值：null</span><span class="token comment"># null不等于0，'',’null'</span><span class="token comment"># null值参与运算， 结果一定也为空</span><span class="token comment"># 绩效比例commission_pct为null时，年工资也为null</span><span class="token keyword">SELECT</span> employee_id salary <span class="token string">"月工资"</span><span class="token punctuation">,</span> salary <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> commission_pct<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">12</span> <span class="token string">"年工资"</span><span class="token comment"># 把null当成0</span><span class="token keyword">SELECT</span> employee_id salary <span class="token string">"月工资"</span><span class="token punctuation">,</span> salary <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> IFNULL<span class="token punctuation">(</span>commission_pct<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">12</span> <span class="token string">"年工资"</span></code></pre><h3 id="着重号"><a href="#着重号" class="headerlink" title="着重号 `"></a>着重号 `</h3><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 用于表名和关键字相同时</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token keyword">ORDER</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">`</span>order<span class="token punctuation">`</span></span><span class="token punctuation">;</span></code></pre><h3 id="过滤条件"><a href="#过滤条件" class="headerlink" title="过滤条件"></a>过滤条件</h3><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># WHERE 紧跟在 FROM 子句后</span><span class="token comment"># WHERE 筛选后面的条件为1的数据， 0和NULL会被过滤</span><span class="token comment"># WHERE 不能使用类的别名</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> employees<span class="token keyword">WHERE</span> last_name <span class="token operator">=</span> <span class="token string">'King'</span><span class="token punctuation">;</span></code></pre><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 如果没有使用排序，查询返回的数据默认按照添加数据的顺序</span><span class="token comment"># 使用ORDER BY对数据进行排序，升序ASC， 降序DESC，默认升序</span><span class="token comment"># 按照salary从高到低顺序显示员工信息</span><span class="token keyword">SELECT</span> employee_id<span class="token punctuation">,</span> last_name<span class="token punctuation">,</span> salary<span class="token keyword">FROM</span> employees<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> salary <span class="token keyword">DESC</span><span class="token punctuation">;</span><span class="token comment"># 按照salary从低到高顺序显示员工信息</span><span class="token keyword">SELECT</span> employee_id<span class="token punctuation">,</span> last_name<span class="token punctuation">,</span> salary<span class="token keyword">FROM</span> employees<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> salary <span class="token keyword">ASC</span><span class="token punctuation">;</span> <span class="token comment"># ASC可以不写</span><span class="token keyword">SELECT</span> employee_id<span class="token punctuation">,</span> last_name<span class="token punctuation">,</span> salary<span class="token keyword">FROM</span> employees<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> salary<span class="token punctuation">;</span><span class="token comment"># 使用类的别名排序</span><span class="token keyword">SELECT</span> employee_id emp_id<span class="token punctuation">,</span> last_name <span class="token keyword">AS</span> lname<span class="token punctuation">,</span> salary<span class="token operator">*</span><span class="token number">12</span> “annual sal”<span class="token keyword">FROM</span> employees<span class="token punctuation">;</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> annual_sal<span class="token punctuation">;</span><span class="token comment"># 二级排序</span><span class="token comment"># 显示员工信息，按照department_id降序排序，salary升序排序</span><span class="token keyword">SELECT</span> employee_id<span class="token punctuation">,</span> last_name<span class="token punctuation">,</span> salary<span class="token keyword">FROM</span> employees<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> department_id <span class="token keyword">DESC</span><span class="token punctuation">,</span> salary <span class="token keyword">ASC</span><span class="token punctuation">;</span></code></pre><h3 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h3><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 使用LIMIT使用分页操作</span><span class="token comment"># LIMIT 偏移量,条目数</span><span class="token comment"># LIMIT 0,20  表示偏移量为0，显示20条数据</span><span class="token keyword">SELECT</span> employee_id<span class="token punctuation">,</span> last_name<span class="token keyword">FROM</span> employees<span class="token keyword">LIMIT</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">;</span><span class="token comment"># MySQL 8.0新特性</span><span class="token comment"># LIMIT 条目数 OFFSET 偏移量</span><span class="token keyword">SELECT</span> employee_id<span class="token punctuation">,</span> last_name<span class="token keyword">FROM</span> employees<span class="token keyword">LIMIT</span> <span class="token number">20</span> <span class="token keyword">OFFSET</span> <span class="token number">0</span><span class="token punctuation">;</span></code></pre><h2 id="显示表结构"><a href="#显示表结构" class="headerlink" title="显示表结构"></a>显示表结构</h2><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DESCRIBE</span> employees<span class="token punctuation">;</span><span class="token keyword">DESC</span> employees<span class="token punctuation">;</span></code></pre><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><p>+、-、*、/或DIV、%或MOD</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token number">100</span> <span class="token operator">+</span> <span class="token string">'1'</span> <span class="token keyword">FROM</span> DUAL<span class="token punctuation">;</span> <span class="token comment"># 返回101， 会将字符串转换为数值</span><span class="token keyword">SELECT</span> <span class="token number">100</span> <span class="token operator">+</span> <span class="token string">'a'</span> <span class="token keyword">FROM</span> DUAL<span class="token punctuation">;</span> <span class="token comment"># 返回100，将非数字字符串当作0</span><span class="token keyword">SELECT</span> <span class="token number">100</span><span class="token operator">/</span><span class="token number">0</span> <span class="token keyword">FROM</span> DUAL<span class="token punctuation">;</span> <span class="token comment"># 返回NULL</span></code></pre><h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><p>比较结果为真返回1， 为假返回0， 其他情况返回NULL</p><p>=      &lt;=&gt;（安全等于）     &lt;&gt;（不等于）     !=    &lt;    &lt;=    &gt;    &gt;=</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 两边都是字符串，按照ANSI进行比较</span><span class="token comment"># 两边都是数字，按照数值比较</span><span class="token comment"># 数字和字符串相比，会产生字符串的隐形转换</span><span class="token comment"># null参与运算返回null</span><span class="token keyword">SELECT</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span> <span class="token operator">=</span> <span class="token string">'1'</span><span class="token punctuation">,</span><span class="token number">0</span> <span class="token operator">=</span> <span class="token string">'A'</span> <span class="token keyword">FROM</span> DUAL<span class="token punctuation">;</span><span class="token comment"># 返回0，1，1，1</span><span class="token keyword">SELECT</span> <span class="token string">'A'</span> <span class="token operator">=</span> <span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'A'</span> <span class="token operator">=</span> <span class="token string">'B'</span> <span class="token keyword">FROM</span> DUAL<span class="token punctuation">;</span><span class="token comment"># 返回1，0</span><span class="token keyword">SELECT</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token boolean">NULL</span> <span class="token operator">=</span> <span class="token boolean">NULL</span> <span class="token keyword">FROM</span> DUAL<span class="token punctuation">;</span><span class="token comment"># 返回NULL, NULL</span><span class="token comment"># &lt;=> 安全等于 在无NULL时等同于= ， 在有NULL时，两边都是NULL为1， 只有一个NULL为0</span><span class="token keyword">SELECT</span> <span class="token number">1</span> <span class="token operator">&lt;=></span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token boolean">NULL</span> <span class="token operator">&lt;=></span> <span class="token boolean">NULL</span> <span class="token keyword">FROM</span> DUAL<span class="token punctuation">;</span><span class="token comment"># 返回0，1</span><span class="token keyword">SELECT</span> employee_id<span class="token punctuation">,</span> last_name<span class="token punctuation">,</span> salary<span class="token keyword">FROM</span> employees<span class="token punctuation">;</span><span class="token keyword">WHERE</span> commission_pct <span class="token operator">&lt;=></span> <span class="token boolean">NULL</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> employee_id<span class="token punctuation">,</span> last_name<span class="token punctuation">,</span> salary<span class="token keyword">FROM</span> employees<span class="token punctuation">;</span><span class="token keyword">WHERE</span> <span class="token operator">NOT</span> commission_pct <span class="token operator">&lt;=></span> <span class="token boolean">NULL</span><span class="token punctuation">;</span></code></pre><h3 id="非符号类型运算符"><a href="#非符号类型运算符" class="headerlink" title="非符号类型运算符"></a>非符号类型运算符</h3><pre class="language-Sql" data-language="Sql"><code class="language-Sql"># IS NULL &#x2F; IS NOT NULL &#x2F; ISNULL 判断字段是否为NULLSELECT employee_id, last_name, salaryFROM employees;WHERE commission_pct IS NOT NULL;# LEAST() 求最小值&#x2F; GREATEST() 求最大值SELECT LEAST(&#39;A&#39;, &#39;B&#39;, &#39;E&#39;), GREATEST(&#39;A&#39;, &#39;B&#39;, &#39;E&#39;) FROM DUAL; # 返回A  E# BETWEEN 条件一 AND 条件二  包含条件一和条件二,要求条件一为下界， 条件二为上界，不能交换# 查询工资在6000和8000的员工信息SELECT employee_id, last_name, salaryFROM employeesWHERE salary BETWEEN 6000 AND 8000;SELECT employee_id, last_name, salaryFROM employeesWHERE salary &gt;&#x3D; 6000 &amp;&amp; SALARY &lt;&#x3D; 8000;# IN \ NOT IN# 查询部门为10，20，30的员工信息SELECT last_name, salary, department_idFROM employeesWHERE department_id &#x3D; 10 OR department_id &#x3D; 20 OR department_id &#x3D; 30SELECT last_name, salary, department_idFROM employeesWHERE department_id IN (10,20,30);# LIKE 模糊查询# 查询last_name中包含字符a的元素信息SELECT last_name, salary, department_idFROM employeesWHERE last_name LIKE &#39;%a%&#39;; # &#39;%&#39;代表不确定个数的字符# 查询last_name中包含字符a和e的元素信息SELECT last_name, salary, department_idFROM employeesWHERE last_name LIKE &#39;%a%&#39; AND last_name LIKE &#39;%e%&#39;; # &#39;%&#39;代表不确定个数的字符# 查询last_name中包含第二个字符是a的元素信息SELECT last_name, salary, department_idFROM employeesWHERE last_name LIKE &#39;_a%&#39;; # &#39;_&#39;代表一个字符# 正则表达式# REGEXP \ RLIKE: 正则表达式SELECT &#39;shlstart&#39; REGEXP &#39;^s&#39;,&#39;shlstart&#39; REGEXP &#39;t$&#39;,&#39;shlstart&#39; REGEXP &#39;hk&#39;FROM DUAL;</code></pre><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><p>! / NOT      &amp;&amp; / AND       || / OR       XOR（异或）</p><h2 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h2><h3 id="等值连接和非等值连接"><a href="#等值连接和非等值连接" class="headerlink" title="等值连接和非等值连接"></a>等值连接和非等值连接</h3><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 错误写法，缺少了连接条件，会出现笛卡尔积</span><span class="token keyword">SELECT</span> employee_id<span class="token punctuation">,</span> department_name<span class="token keyword">FROM</span> employees<span class="token punctuation">,</span> departments<span class="token punctuation">;</span><span class="token keyword">SELECT</span> employee_id<span class="token punctuation">,</span> department_name<span class="token keyword">FROM</span> employees <span class="token keyword">CROSS</span> <span class="token keyword">JOIN</span> departments<span class="token punctuation">;</span><span class="token comment"># 正确写法</span><span class="token comment"># 等值连接</span><span class="token comment"># 如果查询语句中出现了多个表中都存在的字段，则必须指明字段所在的表</span><span class="token keyword">SELECT</span> employee_id<span class="token punctuation">,</span> department_name<span class="token punctuation">,</span>employees<span class="token punctuation">.</span>department_id<span class="token keyword">FROM</span> employees<span class="token punctuation">,</span> departments<span class="token punctuation">;</span><span class="token keyword">WHERE</span> employees<span class="token punctuation">.</span>department_id <span class="token operator">=</span> departments<span class="token punctuation">.</span>department_id<span class="token punctuation">;</span><span class="token comment"># 给表起别名,起了别名必须用</span><span class="token keyword">SELECT</span> emp<span class="token punctuation">.</span>employee_id<span class="token punctuation">,</span> dept<span class="token punctuation">.</span>department_name<span class="token punctuation">,</span>emp<span class="token punctuation">.</span>department_id<span class="token keyword">FROM</span> employees emp<span class="token punctuation">,</span> departments dept<span class="token punctuation">;</span><span class="token keyword">WHERE</span> emp<span class="token punctuation">.</span>department_id <span class="token operator">=</span> dept<span class="token punctuation">.</span>department_id<span class="token punctuation">;</span><span class="token comment"># 非等值连接</span><span class="token keyword">SELECT</span> last_name<span class="token punctuation">,</span> salary<span class="token punctuation">,</span> grade_level<span class="token keyword">FROM</span> employees e<span class="token punctuation">,</span> job_grades<span class="token keyword">WHERE</span> e<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>salary<span class="token punctuation">`</span></span> <span class="token operator">BETWEEN</span> j<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>lowest_sal<span class="token punctuation">`</span></span> <span class="token operator">AND</span> j<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>highest_sal<span class="token punctuation">`</span></span><span class="token punctuation">;</span></code></pre><h3 id="自连接和非自连接"><a href="#自连接和非自连接" class="headerlink" title="自连接和非自连接"></a>自连接和非自连接</h3><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 自连接</span><span class="token comment"># 查询员工id、名称last_name及其上级id、名称</span><span class="token keyword">SELECT</span> emp<span class="token punctuation">.</span>empployee_id<span class="token punctuation">,</span> emp<span class="token punctuation">.</span>last_name<span class="token punctuation">,</span> man<span class="token punctuation">.</span>employee_id<span class="token punctuation">,</span> man<span class="token punctuation">.</span>last_name<span class="token keyword">FROM</span> employees emp<span class="token punctuation">,</span> employees man<span class="token keyword">WHERE</span> emp<span class="token punctuation">.</span>manager_id <span class="token operator">=</span> man<span class="token punctuation">.</span>employee_id</code></pre><h3 id="内连接和外连接"><a href="#内连接和外连接" class="headerlink" title="内连接和外连接"></a>内连接和外连接</h3><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 内连接：合并具有同一列的两个以上的表的行，结果集中不包含一个表与另一个表不匹配的行</span><span class="token comment"># SQL92(MySQL不支持)实现内连接</span><span class="token keyword">SELECT</span> employee_id<span class="token punctuation">,</span> department_name<span class="token punctuation">,</span>employees<span class="token punctuation">.</span>department_id<span class="token keyword">FROM</span> employees<span class="token punctuation">,</span> departments<span class="token punctuation">;</span><span class="token keyword">WHERE</span> employees<span class="token punctuation">.</span>department_id <span class="token operator">=</span> departments<span class="token punctuation">.</span>department_id<span class="token punctuation">;</span><span class="token comment"># SQL99实现外连接JOIN ON</span><span class="token keyword">SELECT</span> emp<span class="token punctuation">.</span>last_name<span class="token punctuation">,</span> dept<span class="token punctuation">.</span>department_name<span class="token keyword">FROM</span> employees emp <span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> departments dept<span class="token keyword">ON</span> emp<span class="token punctuation">.</span>department_id <span class="token operator">=</span> dept<span class="token punctuation">.</span>department_id<span class="token punctuation">;</span><span class="token comment"># INNER可以省略</span><span class="token comment"># 外连接：合并具有同一列的两个以上的表的行，结果集中不仅包含一个表与另一个表不匹配的行，还包含左表 或 右表中不匹配的行</span><span class="token comment"># 左外连接：合并具有同一列的两个以上的表的行，结果集中不仅包含一个表与另一个表不匹配的行，还包含左表中不匹配的行</span><span class="token comment"># 右外连接：合并具有同一列的两个以上的表的行，结果集中不仅包含一个表与另一个表不匹配的行，还包含右表中不匹配的行</span><span class="token comment"># 满外连接：合并具有同一列的两个以上的表的行，结果集中不仅包含一个表与另一个表不匹配的行，还包含左表 和 右表中不匹配的行</span><span class="token comment"># 左外连接</span><span class="token comment"># 查询所有员工的last_name和department_name</span><span class="token comment"># SQL92（MySQL不支持）语法实现外连接：使用+</span><span class="token keyword">SELECT</span> emp<span class="token punctuation">.</span>last_name<span class="token punctuation">,</span> dept<span class="token punctuation">.</span>department_name<span class="token keyword">FROM</span> employees emp<span class="token punctuation">,</span> departments dept<span class="token keyword">WHERE</span> emp<span class="token punctuation">.</span>department_id <span class="token operator">=</span> dept<span class="token punctuation">.</span>department_id<span class="token punctuation">(</span><span class="token operator">+</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment"># SQL99语法实现外连接：使用OUTER JOIN ON</span><span class="token keyword">SELECT</span> emp<span class="token punctuation">.</span>last_name<span class="token punctuation">,</span> dept<span class="token punctuation">.</span>department_name<span class="token keyword">FROM</span> employees emp <span class="token keyword">LEFT</span> <span class="token keyword">OUTER</span> <span class="token keyword">JOIN</span> departments dept<span class="token keyword">ON</span> emp<span class="token punctuation">.</span>department_id <span class="token operator">=</span> dept<span class="token punctuation">.</span>department_id<span class="token punctuation">;</span><span class="token comment"># OUTER可以省略</span><span class="token comment"># 右外连接</span><span class="token comment"># SQL92（MySQL不支持）语法实现外连接：使用+</span><span class="token keyword">SELECT</span> emp<span class="token punctuation">.</span>last_name<span class="token punctuation">,</span> dept<span class="token punctuation">.</span>department_name<span class="token keyword">FROM</span> employees emp<span class="token punctuation">,</span> departments dept<span class="token keyword">WHERE</span> emp<span class="token punctuation">.</span>department_id<span class="token punctuation">(</span><span class="token operator">+</span><span class="token punctuation">)</span> <span class="token operator">=</span> dept<span class="token punctuation">.</span>department_id<span class="token punctuation">;</span><span class="token comment"># SQL99语法实现外连接：使用OUTER JOIN ON</span><span class="token keyword">SELECT</span> emp<span class="token punctuation">.</span>last_name<span class="token punctuation">,</span> dept<span class="token punctuation">.</span>department_name<span class="token keyword">FROM</span> employees emp <span class="token keyword">RIGHT</span> <span class="token keyword">OUTER</span> <span class="token keyword">JOIN</span> departments dept<span class="token keyword">ON</span> emp<span class="token punctuation">.</span>department_id <span class="token operator">=</span> dept<span class="token punctuation">.</span>department_id<span class="token punctuation">;</span><span class="token comment"># OUTER可以省略</span><span class="token comment"># 满外连接</span><span class="token comment"># SQL99语法实现外连接：使用FULL OUTER JOIN ON</span><span class="token comment"># MySQL不支持FULL OUTER JOIN ON，满外连接使用UNION实现</span><span class="token keyword">SELECT</span> emp<span class="token punctuation">.</span>last_name<span class="token punctuation">,</span> dept<span class="token punctuation">.</span>department_name<span class="token keyword">FROM</span> employees emp <span class="token keyword">FULL</span> <span class="token keyword">OUTER</span> <span class="token keyword">JOIN</span> departments dept<span class="token keyword">ON</span> emp<span class="token punctuation">.</span>department_id <span class="token operator">=</span> dept<span class="token punctuation">.</span>department_id<span class="token punctuation">;</span><span class="token comment"># OUTER可以省略</span></code></pre><p>SQL99中实现七种JOIN操作的方法：</p><p><img src="JOIN.png" alt="MySQL中七种JOIN实现"></p><h3 id="UNION-和-UNION-ALL的使用"><a href="#UNION-和-UNION-ALL的使用" class="headerlink" title="UNION 和 UNION ALL的使用"></a>UNION 和 UNION ALL的使用</h3><p><strong>UNION</strong> 和 <strong>UNION ALL</strong>用于合并两个查询的结果集，取并集</p><p>区别在于 <strong>UNION</strong> 会对结果集去重， 而 <strong>UNION ALL</strong> 不会去重</p><p>因此 <strong>UNION ALL</strong> 速度更快，更推荐使用</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 使用 UNION 和 UNION ALL 实现满外连接</span><span class="token keyword">SELECT</span> e<span class="token punctuation">.</span>employee_id<span class="token punctuation">,</span> d<span class="token punctuation">.</span>department_name<span class="token keyword">FROM</span> employees e <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> departments d<span class="token keyword">ON</span> e<span class="token punctuation">.</span>employee_id <span class="token operator">=</span> d<span class="token punctuation">.</span>department_id<span class="token keyword">UNION</span> <span class="token keyword">ALL</span><span class="token keyword">SELECT</span> e<span class="token punctuation">.</span>employee_id<span class="token punctuation">,</span> d<span class="token punctuation">.</span>department_name<span class="token keyword">FROM</span> employees e <span class="token keyword">RIGHT</span> <span class="token keyword">JOIN</span> departments d<span class="token keyword">ON</span> e<span class="token punctuation">.</span>employee_id <span class="token operator">=</span> d<span class="token punctuation">.</span>department_id<span class="token keyword">WHERE</span> e<span class="token punctuation">.</span>department_id <span class="token operator">IS</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> e<span class="token punctuation">.</span>employee_id<span class="token punctuation">,</span> d<span class="token punctuation">.</span>department_name<span class="token keyword">FROM</span> employees e <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> departments d<span class="token keyword">ON</span> e<span class="token punctuation">.</span>employee_id <span class="token operator">=</span> d<span class="token punctuation">.</span>department_id<span class="token keyword">WHERE</span> d<span class="token punctuation">.</span>department_id <span class="token operator">IS</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span><span class="token keyword">UNION</span> <span class="token keyword">ALL</span><span class="token keyword">SELECT</span> e<span class="token punctuation">.</span>employee_id<span class="token punctuation">,</span> d<span class="token punctuation">.</span>department_name<span class="token keyword">FROM</span> employees e <span class="token keyword">RIGHT</span> <span class="token keyword">JOIN</span> departments d<span class="token keyword">ON</span> e<span class="token punctuation">.</span>employee_id <span class="token operator">=</span> d<span class="token punctuation">.</span>department_id</code></pre><h3 id="SQL99新特性"><a href="#SQL99新特性" class="headerlink" title="SQL99新特性"></a>SQL99新特性</h3><ol><li><p>自然连接</p><p>NATURAL JOIN表示自然连接，自然连接其实是等值连接，自动查询两张表中相同的字段进行等值连接</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 自然连接</span><span class="token keyword">SELECT</span> e<span class="token punctuation">.</span>employee_id<span class="token punctuation">,</span> d<span class="token punctuation">.</span>department_name<span class="token punctuation">,</span>e<span class="token punctuation">.</span>department_id<span class="token keyword">FROM</span> employees e<span class="token punctuation">,</span> departments d<span class="token punctuation">;</span><span class="token keyword">WHERE</span> e<span class="token punctuation">.</span>department_id <span class="token operator">=</span> d<span class="token punctuation">.</span>department_id<span class="token punctuation">;</span><span class="token operator">AND</span> e<span class="token punctuation">.</span>manager_id <span class="token operator">=</span> d<span class="token punctuation">.</span>manager_id<span class="token punctuation">;</span><span class="token keyword">SELECT</span> e<span class="token punctuation">.</span>employee_id<span class="token punctuation">,</span> d<span class="token punctuation">.</span>department_name<span class="token punctuation">,</span>e<span class="token punctuation">.</span>department_id<span class="token keyword">FROM</span> employees e <span class="token keyword">NATURAL</span> <span class="token keyword">JOIN</span> departments d<span class="token punctuation">;</span></code></pre></li><li><p><strong>USING</strong></p><p>用于替换连接条件</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> e<span class="token punctuation">.</span>employee_id<span class="token punctuation">,</span> d<span class="token punctuation">.</span>department_name<span class="token punctuation">,</span>e<span class="token punctuation">.</span>department_id<span class="token keyword">FROM</span> employees e<span class="token punctuation">,</span> departments d<span class="token punctuation">;</span><span class="token keyword">WHERE</span> e<span class="token punctuation">.</span>department_id <span class="token operator">=</span> d<span class="token punctuation">.</span>department_id<span class="token punctuation">;</span><span class="token keyword">SELECT</span> e<span class="token punctuation">.</span>employee_id<span class="token punctuation">,</span> d<span class="token punctuation">.</span>department_name<span class="token punctuation">,</span>e<span class="token punctuation">.</span>department_id<span class="token keyword">FROM</span> employees e<span class="token punctuation">,</span> departments d<span class="token punctuation">;</span><span class="token keyword">USING</span> <span class="token punctuation">(</span>department_id<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment"># 必须写两张表中同名的字段单行函数数的特点</span></code></pre></li></ol><h2 id="单行函数"><a href="#单行函数" class="headerlink" title="单行函数"></a>单行函数</h2><h3 id="单行函数的特点"><a href="#单行函数的特点" class="headerlink" title="单行函数的特点"></a>单行函数的特点</h3><ul><li>操作数据对象</li><li>接收参数返回一个结果</li><li><strong>只对一行进行变换</strong></li><li><strong>每行返回一个结果</strong></li><li>可以嵌套</li><li>参数可以是一列（字段）或一个值</li></ul><h3 id="数值函数"><a href="#数值函数" class="headerlink" title="数值函数"></a>数值函数</h3><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment">/*ABS(x):返回x的绝对值SIGN(x):符号函数，x大于0返回1，小于0返回-1，等于0返回0PI():返回圆周率的值CEIL(x), CEILING(x)：返回不小于x的最小整数FLOOR(x)：返回不大于x的最大整数MOD(x,y):返回x除以y的余数LEAST(e1,e2,e3...):返回列表中的最小值GREATEST(e1,e2,e3...):返回列表中的最大值RAND():返回0-1的随机数RAND(x):返回0-1的随机值，其中x为种子，相同的x会产生相同的随机数ROUND(x):返回x四舍五入后的最接近x的整数ROUND(x,y):返回x四舍五入后最接近x的值，并保留到小数点后面y位TRUNCATE(x,y):返回数字x截断为y位小数的结果SQRT(x):返回x的平方根，当x小于0时返回nullPOW(x,y):返回x的y次方POWER(x,y):返回x的y次方EXP(x):返回e的x次方LN(x):返回x的自然对数LOG(x):返回x的自然对数LOG10(x):返回以10为底x的对数LOG2(x):返回以2为底x的对数三角函数：默认弧度制SIN(x):正弦值ASIN(x):反正弦值COS(x):余弦值ACOS(x):反余弦值TAN(x):正切值ATAN(x):反正切值ATAN2(x,y):返回两个参数的反正切值COT(x):余切值角度与弧度互换函数RADIANS(x):将角度转化为弧度，其中，参数x为角度值DEGREES(x):将弧度转化为角度，其中，参数x为弧度制进制间的转换BIN(x):二进制HEX(x):十六进制OCT(x):八进制CONV(x, f1, f2):返回f1进制变成f2进制*/</span></code></pre><h3 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h3><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment">/*    注意：字符串的索引是从1开始的！ASCII(s):返回字符串s中的第一个字符的ASCII码CHAR_LENGTH(s):返回字符串s的字符数LENGTH(s):返回字符串s的字节数CONCAT(s1,s2,...,sn):连接s1,s2,...,sn为一个字符串CONCAT_WS(x,s1,s2,...,sn):同CONCAT(s1,s2,...,sn)函数，但是每个字符串之间要加上xINSERT(str, idx, len, replacestr):将字符串str从第idx位置开始，len个字符长的子串替换为字符串replacestrREPLACE(str,a,b):用字符串b替换字符串str中所有出现的字符串aUPPER(s) / UCASE(s):将字符串s中所有字母转成大写字母LOWER(s) / LCASE(s):将字符串s中所有字母转成小写字母LEFT(str,n):返回字符串str最左边的n个字符RIGHT(str,n):返回字符串str最右边的n个字符LPAD(str, len, pad):用字符串pad对str最左边进行填充，直到str长度为len个字符RPAD(str, len, pad):用字符串pad对str最右边进行填充，直到str长度为len个字符LTRIM(s):去掉字符串s左侧的空格RTRIM(s):去掉字符串s右侧的空格TRIM(s):去掉字符串s开头和结尾的空格TRIM(s1 FROM s):去掉字符串s开始与结尾的s1TRIM(LEADING s1 FROM s):去掉字符串s开始的s1TRIM(TRAILING s1 FROM s):去掉字符串s结尾的s1REPEAT(str, n):返回str重复n次的结果SPACE(n):返回n个空格STRCMP(s1, s2):比较s1、s2的ASCII码的大小SUBSTR(s, index, len):返回从字符串s的index位置起n个字符， 作用与SUBSTRING(s,n,len),MID(s,n,len)相同LOCATE(substr, str):返回字符串substr在字符串str中首次出现的位置，作用与POSITION(substr In str),INSTR(str, substr)相同。未找到返回0ELT(m, s1, s2, ..., sn):返回指定位置的字符串，如果m=1，则返回s1，如果m=2，则返回s2，如果m=n，则返回snFIELD(s,s1,s2,...,sn):返回字符串s在字符串列表中第一次出现的位置FIND_IN_SET(s1,s2):返回字符串s1在字符串s2中出现的位置，其中s2是一个以逗号分隔的字符串REVERSE(s):返回s反转后的字符串NULLIF(value1, value2):比较两个字符串，如果value1和value2相等，则返回NULL，否则返回value1*/</span></code></pre><h3 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h3><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment">/*1.获取日期、时间CURDATE(),CURRENT_DATE():返回当前日期，只包含年月日，格式'yyyy-MM-dd'CURTIME(),CURRENT_TIME():返回当前时间，只包含时分秒，格式'HH:mm:ss'NOW()/SYSDATE()/CURRENT_TIMESTAMP()/LOCALTIME()/LOCALTIMESTAMP():返回当前系统日期和时间，格式'yyyy-MM-dd HH:mm:ss'UTC_DATE():返回UTC（世界标准时间）日期UTC_TIME():返回UTC（世界标准时间）时间2.日期和时间戳的转换UNIX_TIMESTAMP():以UNIX时间戳的形式返回当前时间UNIX_TIMESTAMP(date):将时间date以UNIX时间戳的形式返回FROM_UNIXTIME(timestamp):将UNIX时间戳的时间转换为普通格式的时间3.获取月份、星期、星期数、天数等函数YEAR(date)/MONTH(date)/DAY(date):返回具体的日期值HOUR(time)/MINUTE(time)/SECOND(time):返回具体的时间值MONTHNAME(date):返回月份：January...DAYNAME(date):返回星期几：MONDAY...WEEKDAY(date):返回周几，周一是0，周二是1，...，周日是6QUARTER(date):返回日期对应的季度，范围为1-4WEEK(date),WEEKOFYEAR(date):返回一年中的第几周DAYOFYEAR(date):返回日期是一年中的第几天DAYOFMONTH(date):返回日期位于所在月份的第几天DAYOFWEEK(date):返回周几，周一是1，周二是2，...，周日是74.日期的操作函数EXTRACT(type FROM date):返回指定日期中特定的部分，type指定返回的值type的取值如下：MICROSECOND:毫秒数SECOND:秒数MINUTE:分钟数HOUR:小时数DAY:天数WEEK:一年中的第几个星期MONTH:一年中的第几个月QUARTER:季度YEAR:年份SECOND_MICROSECOND:秒和毫秒值两个返回值的取值用下划线连接组合，如上面的SECOND_MICROSECOND。5.时间和秒钟的转换函数TIME_TO_SEC(time):将time转化为秒并返回结果值，转化的公式为：小时*3600+分钟*60+秒SEC_TO_TIME(seconds):将second描述转化为包含小时、分钟和秒的时间6.计算日期和时间的函数DATE_ADD(datetime, INTERVAL expr type):返回与给定日期时间相差INTERVAL时间段的日期时间DATE_SUB(date, INTERVAL expr type):返回与date相差INTERVAL时间间隔的日期type的取值和EXTRACT函数一致，示例：DATE_ADD(NOW(), INTERVAL 1 YEAR),DATE_ADD(NOW(), INTERVAL -1 YEAR),DATE_ADD('2021-10-21 23:32:12', INTERVAL '1_1' YEAR_MONTH)ADDTIME(time1, time2):返回time1加上time2的时间。当time2为一个数字时，代表的是秒，可以是负数SUBTIME(time1,time2):返回time1减去time2的时间。当time2为一个数字时，代表的是秒，可以是负数DATEDIFF(date1, date2):返回date1-date2的日期间隔天数TIMEDIFF(time1,time2):返回time1-time2的时间间隔FROM_DAYS(N):返回从0000年1月1日起，N天以后的日期TO_DAYS(date):返回日期距离0000年1月1日的天数LAST_DAY(date):返回date所在月份最后一天的日期MAKEDATE(year,n):针对给定年份和该年份中的天数返回一个日期MAKETIME(hour,minute,second):将给定的小时、分钟和秒合成时间并返回PERIOD_ADD(time,n):返回time加上n后的时间7.日期的格式化和解析DATE_FORMAT(date, fmt):按照字符串fmt格式化日期date值TIME_FORMAT(time, fmt):按照字符串fmt格式化时间time值GET_FORMAT(date_type, format_type):返回日期字符串的显示格式STR_TO_DATE(str, fmt):按照字符串fmt对str进行解析，解析为一个日期fmt的格式：%S, %s 两位数字形式的秒（ 00,01, …, 59）    %I, %i 两位数字形式的分（ 00,01, …, 59）    %H 两位数字形式的小时，24 小时（00,01, …, 23）    %h 两位数字形式的小时，12 小时（01,02, …, 12）    %k 数字形式的小时，24 小时（0,1, …, 23）    %l 数字形式的小时，12 小时（1, 2, …, 12）    %T 24 小时的时间形式（hh:mm:ss）    %r 12 小时的时间形式（hh:mm:ss AM 或hh:mm:ss PM）    %p AM或PM    %W 一周中每一天的名称（Sunday, Monday, …, Saturday）    %a 一周中每一天名称的缩写（Sun, Mon, …, Sat）    %d 两位数字表示月中的天数（00, 01,…, 31）    %e 数字形式表示月中的天数（1, 2， …, 31）    %D 英文后缀表示月中的天数（1st, 2nd, 3rd,…）    %w 以数字形式表示周中的天数（ 0 = Sunday, 1=Monday, …, 6=Saturday）    %j 以三位数字表示年中的天数（ 001, 002, …, 366）    %U 周（0, 1, 52），其中Sunday 为周中的第一天    %u 周（0, 1, 52），其中Monday 为周中的第一天    %M 月名（January, February, …, December）    %b 缩写的月名（ January, February,…, December）    %m 两位数字表示的月份（01, 02, …, 12）    %c 数字表示的月份（1, 2, …, 12）    %Y 四位数字表示的年份    %y 两位数字表示的年份    %% 直接值“%”        GET_FORMAT(date_type, format_type):返回日期字符串的显示格式:    GET_FORMAT(DATE,'USA')'%m.%d.%Y'    GET_FORMAT(DATE,'JIS')'%Y-%m-%d'    GET_FORMAT(DATE,'ISO')'%Y-%m-%d'    GET_FORMAT(DATE,'EUR')'%d.%m.%Y'    GET_FORMAT(DATE,'INTERNAL')'%Y%m%d'    GET_FORMAT(DATETIME,'USA')'%Y-%m-%d %H.%i.%s'    GET_FORMAT(DATETIME,'JIS')'%Y-%m-%d %H:%i:%s'    GET_FORMAT(DATETIME,'ISO')'%Y-%m-%d %H:%i:%s'    GET_FORMAT(DATETIME,'EUR')'%Y-%m-%d %H.%i.%s'    GET_FORMAT(DATETIME,'INTERNAL')'%Y%m%d%H%i%s'    GET_FORMAT(TIME,'USA')'%h:%i:%s %p'    GET_FORMAT(TIME,'JIS')'%H:%i:%s'    GET_FORMAT(TIME,'ISO')'%H:%i:%s'    GET_FORMAT(TIME,'EUR')'%H.%i.%s'    GET_FORMAT(TIME,'INTERNAL')'%H%i%s'*/</span></code></pre><h3 id="流程控制函数"><a href="#流程控制函数" class="headerlink" title="流程控制函数"></a>流程控制函数</h3><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment">/*IF(value, value1, value2):如果value的值为TRUE，返回value1，否则返回value2IFNULL(value1, value2):如果value1不为NULL，返回value1，否则返回value2CASE WHEN 条件1 THEN 结果1 WHEN 条件2 THEN 结果2 ... ELSE END  相当于if elseCASE expr WHEN 常量值1 THEN 值1 WHEN 常量值2 THEN 值2 ... END  相当于switch case*/</span></code></pre><h3 id="加密与解密函数"><a href="#加密与解密函数" class="headerlink" title="加密与解密函数"></a>加密与解密函数</h3><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment">/*PASSWORD(str):返回字符串str的加密版本，41位长的字符串。加密结果不可逆，常用于用户的密码加密（MySQL8.0中无法使用）MD5(str):返回字符串str的md5加密后的值，也是一种加密方式。若参数为NULL，则会返回NULLSHA(str):从原明文密码str计算并返回加密后的密码字符串，当参数为NULL时，返回NULL。SHA比MD5更安全。ENCODE(value, password_seed):返回使用password_seed作为加密密码加密valueDECODE(value, password_seed):返回使用password_seed作为加密密码解密value*/</span></code></pre><h3 id="其他函数"><a href="#其他函数" class="headerlink" title="其他函数"></a>其他函数</h3><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment">/*FORMAT(value, n):返回对数字value进行格式化后的结果数据。n表示四舍五入后保留小数点后n位CONV(value, from, to):将value的值进行不同进制之间的转换INET_ATON(ipvalue):将以点分隔的ip地址转化为一个数字INET_NTOA(value):将数字形式的ip地址转化为以点分隔的ip地址BENCHMARK(n, expr):将表达式expr重复执行n次，用于测试MySQL处理expr表达式所需要的时间CONVERT(value USING char_code):将value所使用的字符编码修改为char_code*/</span></code></pre><h2 id="多行函数"><a href="#多行函数" class="headerlink" title="多行函数"></a>多行函数</h2><h3 id="多行函数的特征"><a href="#多行函数的特征" class="headerlink" title="多行函数的特征"></a>多行函数的特征</h3><ul><li>对一组数据进行汇总</li><li>输入是一组数据的集合</li><li>输出是单个值</li><li><strong>不能嵌套使用！ </strong></li></ul><h3 id="常用聚合函数"><a href="#常用聚合函数" class="headerlink" title="常用聚合函数"></a>常用聚合函数</h3><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment">/*AVG(column):平均值，只适用于数值类型SUM(column):求和，只适用于数值类型MAX(column):最大值,可用于数值、字符串、日期类型MIN(column):最小值,可用于数值、字符串、日期类型COUNT(column):出现次数，统计次数时不统计空值*/</span></code></pre><h3 id="GROUP-BY"><a href="#GROUP-BY" class="headerlink" title="GROUP BY"></a>GROUP BY</h3><p>按照某些字段进行分组，值相同的数据会被分成一组</p><pre class="language-sql" data-language="sql"><code class="language-sql"> <span class="token comment"># 未指定分组，默认所有人一组，计算平均值</span> <span class="token keyword">SELECT</span> <span class="token function">AVG</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token keyword">FROM</span> employees<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">-------------+</span><span class="token operator">|</span> <span class="token function">AVG</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-------------+</span><span class="token operator">|</span> <span class="token number">6461.682243</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-------------+</span><span class="token comment"># 按照department_id分组，department_id相同的人分为一组，计算每个组的平均值</span><span class="token comment"># GROUP BY声明在FROM后面、WHERE后面、ORDER BY前面、LIMIT前面</span><span class="token keyword">SELECT</span> <span class="token function">AVG</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span><span class="token keyword">FROM</span> employees<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> department_id<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">--------------+</span><span class="token operator">|</span> <span class="token function">AVG</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span>  <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">--------------+</span><span class="token operator">|</span>  <span class="token number">7000.000000</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">4400.000000</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">9500.000000</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">4150.000000</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">6500.000000</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">3475.555556</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">5760.000000</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">10000.000000</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">8955.882353</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">19333.333333</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">8600.000000</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">10150.000000</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">--------------+</span><span class="token comment"># 错误写法，GROUP BY分组后，其他字段（下面语句的job_id）结果会出现错误，但不会报错</span><span class="token comment"># 查询的非组函数字段一定要写在GROUP BY中</span><span class="token keyword">SELECT</span> department_id<span class="token punctuation">,</span> job_id<span class="token punctuation">,</span> <span class="token function">AVG</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span><span class="token keyword">FROM</span> employees<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> department_id<span class="token punctuation">;</span><span class="token comment"># MySQL中GROUP BY使用WITH ROLLUP</span><span class="token comment"># WITH ROLLUP会在查询完成后，把所有数据分在一组再进行一次计算</span><span class="token comment"># 不能和ORDER BY同时使用</span><span class="token keyword">SELECT</span> department_id<span class="token punctuation">,</span><span class="token function">AVG</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span><span class="token keyword">FROM</span> employees<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> department_id <span class="token keyword">WITH ROLLUP</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">---------------+--------------+</span><span class="token operator">|</span> department_id <span class="token operator">|</span> <span class="token function">AVG</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span>  <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">---------------+--------------+</span><span class="token operator">|</span>          <span class="token boolean">NULL</span> <span class="token operator">|</span>  <span class="token number">7000.000000</span> <span class="token operator">|</span> <span class="token comment"># 这是一个部门为null的哥们</span><span class="token operator">|</span>            <span class="token number">10</span> <span class="token operator">|</span>  <span class="token number">4400.000000</span> <span class="token operator">|</span><span class="token operator">|</span>            <span class="token number">20</span> <span class="token operator">|</span>  <span class="token number">9500.000000</span> <span class="token operator">|</span><span class="token operator">|</span>            <span class="token number">30</span> <span class="token operator">|</span>  <span class="token number">4150.000000</span> <span class="token operator">|</span><span class="token operator">|</span>            <span class="token number">40</span> <span class="token operator">|</span>  <span class="token number">6500.000000</span> <span class="token operator">|</span><span class="token operator">|</span>            <span class="token number">50</span> <span class="token operator">|</span>  <span class="token number">3475.555556</span> <span class="token operator">|</span><span class="token operator">|</span>            <span class="token number">60</span> <span class="token operator">|</span>  <span class="token number">5760.000000</span> <span class="token operator">|</span><span class="token operator">|</span>            <span class="token number">70</span> <span class="token operator">|</span> <span class="token number">10000.000000</span> <span class="token operator">|</span><span class="token operator">|</span>            <span class="token number">80</span> <span class="token operator">|</span>  <span class="token number">8955.882353</span> <span class="token operator">|</span><span class="token operator">|</span>            <span class="token number">90</span> <span class="token operator">|</span> <span class="token number">19333.333333</span> <span class="token operator">|</span><span class="token operator">|</span>           <span class="token number">100</span> <span class="token operator">|</span>  <span class="token number">8600.000000</span> <span class="token operator">|</span><span class="token operator">|</span>           <span class="token number">110</span> <span class="token operator">|</span> <span class="token number">10150.000000</span> <span class="token operator">|</span><span class="token operator">|</span>          <span class="token boolean">NULL</span> <span class="token operator">|</span>  <span class="token number">6461.682243</span> <span class="token operator">|</span> <span class="token comment"># 这是所有人的平均工资</span><span class="token operator">+</span><span class="token comment">---------------+--------------+</span></code></pre><h3 id="HAVING"><a href="#HAVING" class="headerlink" title="HAVING"></a>HAVING</h3><p>HAVING语句是用来过滤数据的，它和WHERE的区别在于：</p><ul><li>一旦过滤条件使用了聚合函数，必须使用HAVING来替换WHERE，否则报错</li><li>当过滤条件中没有聚合函数是，则此过滤条件声明在WHERE和HAVING中均可，但WHERE执行效率更高</li><li>HAVING必须声明在GROUP BY后面，而WHERE必须声明在FROM后面</li></ul><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 查询各个部门中最高工资比10000高的部门信息</span><span class="token comment"># 错误写法</span><span class="token keyword">SELECT</span> department_id<span class="token punctuation">,</span> <span class="token function">MAX</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token keyword">FROM</span> employees <span class="token keyword">WHERE</span> <span class="token function">MAX</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span><span class="token operator">></span><span class="token number">10000</span> <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> department_id<span class="token punctuation">;</span>ERROR <span class="token number">1111</span> <span class="token punctuation">(</span>HY000<span class="token punctuation">)</span>: Invalid <span class="token keyword">use</span> <span class="token keyword">of</span> <span class="token keyword">group</span> <span class="token keyword">function</span><span class="token comment"># 正确写法：</span><span class="token keyword">SELECT</span> department_id<span class="token punctuation">,</span> <span class="token function">MAX</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token keyword">FROM</span> employees <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> department_id <span class="token keyword">HAVING</span> <span class="token function">MAX</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span><span class="token operator">></span><span class="token number">10000</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">---------------+-------------+</span><span class="token operator">|</span> department_id <span class="token operator">|</span> <span class="token function">MAX</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">---------------+-------------+</span><span class="token operator">|</span>            <span class="token number">20</span> <span class="token operator">|</span>    <span class="token number">13000.00</span> <span class="token operator">|</span><span class="token operator">|</span>            <span class="token number">30</span> <span class="token operator">|</span>    <span class="token number">11000.00</span> <span class="token operator">|</span><span class="token operator">|</span>            <span class="token number">80</span> <span class="token operator">|</span>    <span class="token number">14000.00</span> <span class="token operator">|</span><span class="token operator">|</span>            <span class="token number">90</span> <span class="token operator">|</span>    <span class="token number">24000.00</span> <span class="token operator">|</span><span class="token operator">|</span>           <span class="token number">100</span> <span class="token operator">|</span>    <span class="token number">12000.00</span> <span class="token operator">|</span><span class="token operator">|</span>           <span class="token number">110</span> <span class="token operator">|</span>    <span class="token number">12000.00</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">---------------+-------------+</span><span class="token comment"># 查询部门id为10，20，30，40这四个部门中最高工资比10000高的部门信息</span><span class="token comment"># 方式一：推荐，执行效率高于方式二</span><span class="token keyword">SELECT</span> department_id<span class="token punctuation">,</span> <span class="token function">MAX</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token keyword">FROM</span> employees <span class="token keyword">WHERE</span> department_id <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">)</span> <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> department_id <span class="token keyword">HAVING</span> <span class="token function">MAX</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span><span class="token operator">></span><span class="token number">10000</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">---------------+-------------+</span><span class="token operator">|</span> department_id <span class="token operator">|</span> <span class="token function">MAX</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">---------------+-------------+</span><span class="token operator">|</span>            <span class="token number">20</span> <span class="token operator">|</span>    <span class="token number">13000.00</span> <span class="token operator">|</span><span class="token operator">|</span>            <span class="token number">30</span> <span class="token operator">|</span>    <span class="token number">11000.00</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">---------------+-------------+</span><span class="token number">2</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.02</span> sec<span class="token punctuation">)</span><span class="token comment"># 方式二</span> <span class="token keyword">SELECT</span> department_id<span class="token punctuation">,</span> <span class="token function">MAX</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span>  <span class="token keyword">FROM</span> employees  <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> department_id  <span class="token keyword">HAVING</span> <span class="token function">MAX</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span><span class="token operator">></span><span class="token number">10000</span> <span class="token operator">AND</span> department_id <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">---------------+-------------+</span><span class="token operator">|</span> department_id <span class="token operator">|</span> <span class="token function">MAX</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">---------------+-------------+</span><span class="token operator">|</span>            <span class="token number">20</span> <span class="token operator">|</span>    <span class="token number">13000.00</span> <span class="token operator">|</span><span class="token operator">|</span>            <span class="token number">30</span> <span class="token operator">|</span>    <span class="token number">11000.00</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">---------------+-------------+</span><span class="token number">2</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.06</span> sec<span class="token punctuation">)</span></code></pre><h2 id="SQL底层执行原理"><a href="#SQL底层执行原理" class="headerlink" title="SQL底层执行原理"></a>SQL底层执行原理</h2><h3 id="SELECT语句的完整结构"><a href="#SELECT语句的完整结构" class="headerlink" title="SELECT语句的完整结构"></a>SELECT语句的完整结构</h3><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">FROM</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">LEFT</span> <span class="token operator">/</span> <span class="token keyword">RIGHT</span><span class="token punctuation">)</span> <span class="token keyword">JOIN</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">ON</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">JOIN</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">ON</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">WHERE</span> 多表连接条件 <span class="token operator">AND</span> 不包含聚合函数的过滤条件<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">HAVING</span> 包含聚合函数的过滤条件<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">DESC</span><span class="token operator">/</span><span class="token keyword">ASC</span><span class="token punctuation">)</span><span class="token keyword">LIMIT</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><h3 id="SELECT语句的执行过程"><a href="#SELECT语句的执行过程" class="headerlink" title="SELECT语句的执行过程"></a>SELECT语句的执行过程</h3><p>FROM … , … , … （多表连接会笛卡尔积） -&gt; ON（根据连接条件进行过滤） -&gt; (LEFT / RIGHT  JOIN)  -&gt; WHERE -&gt; GROUP BY -&gt; HAVING  -&gt; SELECT  -&gt;  DISTINCT  -&gt; ORDER BY -&gt; LIMIT</p><h2 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h2><h3 id="子查询的特点"><a href="#子查询的特点" class="headerlink" title="子查询的特点"></a>子查询的特点</h3><p>子查询指一个查询语句嵌套在另一个查询语句内部的查询</p><ul><li>子查询先于主查询运行</li><li>子查询结果被主查询使用</li><li>子查询要包含在括号内</li><li>子查询放在比较条件的右侧</li><li>单行操作符对应单行子查询，多行操作符对应多行子查询</li><li>SELECT中，除了GROUP BY和LIMIT以外，都可以声明子查询</li></ul><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 查询谁的工资比Abel高？</span><span class="token comment"># 方式一：</span><span class="token keyword">SELECT</span> salary<span class="token keyword">FROM</span> employees<span class="token keyword">WHERE</span> last_name <span class="token operator">=</span> <span class="token string">'Abel'</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> last_name<span class="token punctuation">,</span>salary<span class="token keyword">FROM</span> employees<span class="token keyword">WHERE</span> salary <span class="token operator">></span> <span class="token number">11000</span><span class="token punctuation">;</span><span class="token comment"># 方式二：</span><span class="token keyword">SELECT</span> e2<span class="token punctuation">.</span>last_name<span class="token punctuation">,</span> e2<span class="token punctuation">.</span>salary<span class="token keyword">FROM</span> employees e1<span class="token punctuation">,</span>employees e2<span class="token keyword">WHERE</span> e1<span class="token punctuation">.</span>last_name <span class="token operator">=</span> <span class="token string">'Abel'</span><span class="token operator">AND</span> e2<span class="token punctuation">.</span>salary <span class="token operator">></span> e1<span class="token punctuation">.</span>salary<span class="token punctuation">;</span><span class="token comment"># 方式三：子查询</span><span class="token keyword">SELECT</span> last_name<span class="token punctuation">,</span> salary<span class="token keyword">FROM</span> employees<span class="token keyword">WHERE</span> salary <span class="token operator">></span> <span class="token punctuation">(</span>    <span class="token keyword">SELECT</span> salary    <span class="token keyword">FROM</span> employees    <span class="token keyword">WHERE</span> last_name <span class="token operator">=</span> <span class="token string">'Abel'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="子查询的分类"><a href="#子查询的分类" class="headerlink" title="子查询的分类"></a>子查询的分类</h3><ol><li>从内查询返回的结果的条目数：  单行子查询    多行子查询</li><li>从内查询的执行次数：  相关子查询    不相关子查询</li></ol><h3 id="单行子查询"><a href="#单行子查询" class="headerlink" title="单行子查询"></a>单行子查询</h3><p>子查询返回单行数据，使用单行操作符</p><p>单行操作符： =  &gt;  &gt;=  &lt;  &lt;=  &lt;&gt;</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 查询工资大于149号员工工资的员工信息</span><span class="token keyword">SELECT</span> salary<span class="token keyword">FROM</span> employees<span class="token keyword">WHERE</span> salary <span class="token operator">></span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> salary<span class="token keyword">FROM</span> employees<span class="token keyword">WHERE</span> employee_id <span class="token operator">=</span> <span class="token number">149</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment"># 返回job_id与141号员工相同，salary比143号员工多的员工姓名，job_id和工资</span><span class="token keyword">SELECT</span> last_name<span class="token punctuation">,</span> job_id<span class="token punctuation">,</span> salary<span class="token keyword">FROM</span> employees<span class="token keyword">WHERE</span> job_id <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> job_id                   <span class="token keyword">FROM</span> employees                   <span class="token keyword">WHERE</span> employee_id <span class="token operator">=</span> <span class="token number">141</span>                   <span class="token punctuation">)</span>   <span class="token operator">AND</span> salary <span class="token operator">></span>   <span class="token punctuation">(</span><span class="token keyword">SELECT</span> salary                   <span class="token keyword">FROM</span> employees                   <span class="token keyword">WHERE</span> employee_id <span class="token operator">=</span> <span class="token number">143</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token comment"># 查询和141号员工的manager_id,department_id相同的其他员工的employee_id,manager_id,department_id</span>  <span class="token keyword">SELECT</span> employee_id<span class="token punctuation">,</span>manager_id<span class="token punctuation">,</span>department_id  <span class="token keyword">FROM</span> employees  <span class="token keyword">WHERE</span> <span class="token punctuation">(</span>manager_id<span class="token punctuation">,</span> department_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span>  <span class="token keyword">SELECT</span> manager_id<span class="token punctuation">,</span> department_id  <span class="token keyword">FROM</span> employees  <span class="token keyword">WHERE</span> employee_id <span class="token operator">=</span> <span class="token number">141</span>  <span class="token punctuation">)</span>  <span class="token operator">AND</span> employee_id <span class="token operator">&lt;></span> <span class="token number">141</span><span class="token punctuation">;</span></code></pre><h3 id="多行子查询"><a href="#多行子查询" class="headerlink" title="多行子查询"></a>多行子查询</h3><p>子查询返回多行，使用多行操作符</p><p>多行操作符： IN    ANY    ALL    SOME(实际上是ANY的别名，和ANY相同)</p><pre class="language-sql" data-language="sql"><code class="language-sql"> <span class="token comment"># 查询和141号或174号员工的manager_id,department_id相同的其他员工的employee_id,manager_id,department_id</span><span class="token keyword">SELECT</span> employee_id<span class="token punctuation">,</span>manager_id<span class="token punctuation">,</span>department_id<span class="token keyword">FROM</span> employees<span class="token keyword">WHERE</span> <span class="token punctuation">(</span>manager_id<span class="token punctuation">,</span> department_id<span class="token punctuation">)</span> <span class="token operator">in</span> <span class="token punctuation">(</span>    <span class="token keyword">SELECT</span> manager_id<span class="token punctuation">,</span> department_id    <span class="token keyword">FROM</span> employees    <span class="token keyword">WHERE</span> employee_id <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token number">141</span><span class="token punctuation">,</span><span class="token number">174</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token operator">AND</span> employee_id <span class="token operator">not</span> <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token number">141</span><span class="token punctuation">,</span><span class="token number">174</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment"># 查询其他job_id中比job_id为'IT_PROG'部门任意工资低的员工的员工号</span><span class="token keyword">SELECT</span> employee_id<span class="token punctuation">,</span> last_name<span class="token punctuation">,</span> job_id<span class="token punctuation">,</span>salary<span class="token keyword">FROM</span> employees<span class="token keyword">WHERE</span> job_id <span class="token operator">&lt;></span> <span class="token string">'IT_PROG'</span><span class="token operator">AND</span> salary <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token function">MAX</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span>                <span class="token keyword">FROM</span> employees                <span class="token keyword">WHERE</span> job_id <span class="token operator">=</span> <span class="token string">'IT_PROG'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">SELECT</span> employee_id<span class="token punctuation">,</span> last_name<span class="token punctuation">,</span> job_id<span class="token punctuation">,</span>salary<span class="token keyword">FROM</span> employees<span class="token keyword">WHERE</span> job_id <span class="token operator">&lt;></span> <span class="token string">'IT_PROG'</span><span class="token operator">AND</span> salary <span class="token operator">&lt;</span> <span class="token keyword">ANY</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> salary                <span class="token keyword">FROM</span> employees                <span class="token keyword">WHERE</span> job_id <span class="token operator">=</span> <span class="token string">'IT_PROG'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment"># 查询平均工资最低的部门id</span><span class="token comment"># 方法一：</span><span class="token keyword">SELECT</span> department_id<span class="token punctuation">,</span> <span class="token function">AVG</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span><span class="token keyword">FROM</span> employees<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> department_id<span class="token keyword">HAVING</span> <span class="token function">AVG</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token keyword">ALL</span> <span class="token punctuation">(</span>    <span class="token keyword">SELECT</span> <span class="token function">AVG</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span>    <span class="token keyword">FROM</span> employees    <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> department_id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment"># 方法二：把子查询当成一个表，该临时表必须有一个别名</span><span class="token keyword">SELECT</span> department_id<span class="token keyword">FROM</span> employees<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> department_id<span class="token keyword">HAVING</span> <span class="token function">AVG</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span>                    <span class="token keyword">SELECT</span> <span class="token function">MIN</span><span class="token punctuation">(</span>avg_sal<span class="token punctuation">)</span>                <span class="token keyword">FROM</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token function">AVG</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> avg_sal                    <span class="token keyword">FROM</span> employees                    <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> department_id<span class="token punctuation">)</span> dept                <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="相关子查询"><a href="#相关子查询" class="headerlink" title="相关子查询"></a>相关子查询</h3><p>如果子查询的执行依赖于外部查询，通常情况下都是因为子查询中的表用到了外部的表，并进行了条件关联，因此每执行一次外部查询，子查询都要重新计算一次，这样的子查询就称之为关联子查询。</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 查询员工中工资大于本部门平均工资的员工的last_name, salary和其department_id</span><span class="token comment"># 方式一：相关子查询</span><span class="token keyword">SELECT</span> last_name<span class="token punctuation">,</span> salary<span class="token punctuation">,</span> department_id<span class="token keyword">FROM</span> employees e1<span class="token keyword">WHERE</span> salary <span class="token operator">></span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token function">AVG</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span>    <span class="token keyword">FROM</span> employees e2    <span class="token keyword">WHERE</span> department_id <span class="token operator">=</span> e1<span class="token punctuation">.</span>department_id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment"># 方式二：在FROM中声明子查询</span><span class="token keyword">SELECT</span> e<span class="token punctuation">.</span>last_name<span class="token punctuation">,</span> e<span class="token punctuation">.</span>salary<span class="token punctuation">,</span> e<span class="token punctuation">.</span>department_id<span class="token keyword">FROM</span> employees e<span class="token punctuation">,</span><span class="token punctuation">(</span>    <span class="token keyword">SELECT</span> department_id<span class="token punctuation">,</span><span class="token function">AVG</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> avg_sal<span class="token keyword">FROM</span> employees<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> department_id<span class="token punctuation">)</span> t_dept_avg_sal<span class="token keyword">WHERE</span> e<span class="token punctuation">.</span>department_id <span class="token operator">=</span> t_dept_avg_sal<span class="token punctuation">.</span>department_id<span class="token operator">AND</span> e<span class="token punctuation">.</span>salary <span class="token operator">></span> t_dept_avg_sal<span class="token punctuation">.</span>avg_sal<span class="token comment"># 查询员工的id, salary, 按照department_name排序</span><span class="token keyword">SELECT</span> e<span class="token punctuation">.</span>employee_id<span class="token punctuation">,</span> e<span class="token punctuation">.</span>salary<span class="token keyword">FROM</span> employees e <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> department_name    <span class="token keyword">FROM</span> departments d    <span class="token keyword">WHERE</span> e<span class="token punctuation">.</span>department_id <span class="token operator">=</span> d<span class="token punctuation">.</span>department_id<span class="token punctuation">)</span></code></pre><h3 id="EXISTS-和-NOT-EXISTS"><a href="#EXISTS-和-NOT-EXISTS" class="headerlink" title="EXISTS 和 NOT EXISTS"></a>EXISTS 和 NOT EXISTS</h3><p>关联子查询通常也会和EXISTS操作符一起来使用，用来检查在子查询中是否存在满足条件的行。·</p><p>如果在子查询中不存在满足条件的行:</p><ul><li>条件返回FALSE</li><li>继续在子查询中查找</li></ul><p>如果在子查询中存在满足条件的行:</p><ul><li>不在子查询中继续查找</li><li>条件返回TRUE</li></ul><p>NOT EXISTS关键字表示如果不存在某种条件，则返回TRUE，否则返回FALSE。</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 查询公司管理者的employee_id, last_name, job_id, department_id</span><span class="token comment"># 方式一</span><span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span>  m<span class="token punctuation">.</span>employee_id<span class="token punctuation">,</span> m<span class="token punctuation">.</span>last_name<span class="token punctuation">,</span> m<span class="token punctuation">.</span>job_id<span class="token punctuation">,</span> m<span class="token punctuation">.</span>department_id<span class="token punctuation">,</span> m<span class="token punctuation">.</span>manager_id<span class="token keyword">FROM</span> employees e <span class="token keyword">JOIN</span> employees m<span class="token keyword">ON</span> e<span class="token punctuation">.</span>manager_id <span class="token operator">=</span> m<span class="token punctuation">.</span>employee_id<span class="token comment"># 方式二</span><span class="token keyword">SELECT</span> employee_id<span class="token punctuation">,</span> last_name<span class="token punctuation">,</span> job_id<span class="token punctuation">,</span> department_id<span class="token keyword">FROM</span> employees<span class="token keyword">WHERE</span> employee_id <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> manager_id    <span class="token keyword">FROM</span> employees<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment"># 方式三 使用EXISTS</span><span class="token keyword">SELECT</span> e1<span class="token punctuation">.</span>employee_id<span class="token punctuation">,</span> e1<span class="token punctuation">.</span>last_name<span class="token punctuation">,</span> e1<span class="token punctuation">.</span>job_id<span class="token punctuation">,</span> e1<span class="token punctuation">.</span>department_id<span class="token keyword">FROM</span> employees e1<span class="token keyword">WHERE</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token operator">*</span>    <span class="token keyword">FROM</span> employees e2    <span class="token keyword">WHERE</span> e1<span class="token punctuation">.</span>employee_id <span class="token operator">=</span> e2<span class="token punctuation">.</span>manager_id<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="增删改"><a href="#增删改" class="headerlink" title="增删改"></a>增删改</h2><h3 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h3><ul><li><p>预处理</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> emp1<span class="token punctuation">(</span>id <span class="token keyword">INT</span><span class="token punctuation">,</span>    <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    hire_date <span class="token keyword">DATE</span><span class="token punctuation">,</span>    salary <span class="token keyword">DOUBLE</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><ul><li><p>方式一：一条一条添加数据</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 不指定添加的字段，要严格按照表的字段来匹配</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> emp1<span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'Tom'</span><span class="token punctuation">,</span><span class="token string">'2000-12-21'</span><span class="token punctuation">,</span><span class="token number">3400</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment"># 按照顺序匹配id , name, hire_date, salary</span><span class="token comment"># 指定添加的字段</span><span class="token comment"># 指定表的全部字段，按照自己指定的顺序匹配</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> emp1<span class="token punctuation">(</span>id<span class="token punctuation">,</span> hire_date<span class="token punctuation">,</span> salary<span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'1999-09-09'</span><span class="token punctuation">,</span><span class="token number">4000</span><span class="token punctuation">,</span><span class="token string">'Jerry'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment"># 指定表的部分字段，没有知名的字段默认为NULL值</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> emp1<span class="token punctuation">(</span>id<span class="token punctuation">,</span> salary<span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3500</span> <span class="token punctuation">,</span> <span class="token string">'David'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment"># 插入多条记录</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> emp1<span class="token punctuation">(</span>id<span class="token punctuation">,</span> salary<span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5000</span><span class="token punctuation">,</span><span class="token string">'Jim'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6000</span><span class="token punctuation">,</span><span class="token string">'Jelinal'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>方式二：将查询结果插入到表中</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> emp1<span class="token punctuation">(</span>id<span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span><span class="token punctuation">,</span> salary<span class="token punctuation">,</span> hire_date<span class="token punctuation">)</span><span class="token comment"># 查询语句， 查询的字段要和要插入的表字段一一对应</span><span class="token comment"># 从查询结果插入时，要注意两个表的字段长度，查询的表的字段长度不能高于要插入的表的字段长度，如果一定要插入，需要先修改一下表</span><span class="token keyword">SELECT</span> employee_id<span class="token punctuation">,</span> last_name<span class="token punctuation">,</span> salary<span class="token punctuation">,</span> hire_date<span class="token keyword">FROM</span> employees<span class="token keyword">WHERE</span> department_id <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><h3 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h3><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># UPDATE ... SET ... WHERE ...</span><span class="token keyword">UPDATE</span> emp1<span class="token keyword">SET</span> hire_date <span class="token operator">=</span> CURDATE<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token comment"># WHERE一般情况下必须要加，如果不加，会改整张表的所有记录</span><span class="token comment"># 修改数据时存在不成功的情况，可能是由于约束的影响</span></code></pre><h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># DELETE FROM ... WHERE ...</span><span class="token comment"># 删除数据时也存在不成功的情况，可能是由于约束的影响</span><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> emp1<span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></code></pre><h2 id="创建和管理数据库和表"><a href="#创建和管理数据库和表" class="headerlink" title="创建和管理数据库和表"></a>创建和管理数据库和表</h2><h3 id="标识符命名规则"><a href="#标识符命名规则" class="headerlink" title="标识符命名规则"></a>标识符命名规则</h3><ul><li>数据库名、表名不得超过30个字符，变量名限制为29个。必须只能包含A-Z,a-z,0-9，共63个字符</li><li>数据库名、表名、字段名等对象名中间不要包含空格</li><li>同一个MySQL软件中，数据库不能同名；同一个库中，表不能重名；同一个表中，字段不能重名</li><li>必须保证你的字段没有和保留字、数据库系统或常用方法冲突。如果坚持使用，请在SQL语句中使用`(着重号)引起来</li><li>保持字段名和类型的一致性：在命名字段并为其指定数据类型的时候一定要保证一致性，假如数据类型在一个表里是整数，那在另一个表里可就别变成字符型了</li></ul><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><ul><li><p>方式一：创建数据库</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> mytest1<span class="token punctuation">;</span></code></pre></li><li><p>方式二：指定字符集</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> mytest1 <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> <span class="token string">'utf8mb4'</span><span class="token punctuation">;</span><span class="token comment"># 查看数据库的创建信息</span><span class="token keyword">SHOW</span> <span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> mytest1<span class="token punctuation">;</span></code></pre></li><li><p>方式三：创建之前判断是否存在，如果要创建的数据库已经存在，创建不成功，不会报错：</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> mytest1<span class="token punctuation">;</span></code></pre></li></ul><h3 id="管理数据库"><a href="#管理数据库" class="headerlink" title="管理数据库"></a>管理数据库</h3><ul><li><p>查看当前连接中的数据库有哪些</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SHOW</span> <span class="token keyword">DATABASES</span><span class="token punctuation">;</span></code></pre></li><li><p>切换数据库</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">USE</span> mytest2<span class="token punctuation">;</span></code></pre></li><li><p>查看当前数据库中保存的数据表</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SHOW</span> <span class="token keyword">TABLES</span><span class="token punctuation">;</span></code></pre></li><li><p>查看当前使用的数据库</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token keyword">DATABASE</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> DUAL<span class="token punctuation">;</span></code></pre></li><li><p>查看指定数据库下保存的数据表</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SHOW</span> <span class="token keyword">TABLES</span> <span class="token keyword">FROM</span> 数据库名<span class="token punctuation">;</span></code></pre></li></ul><h3 id="修改数据库"><a href="#修改数据库" class="headerlink" title="修改数据库"></a>修改数据库</h3><ul><li><p>更改数据库字符集</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">DATABASE</span> mytest1 <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> <span class="token string">'utf8'</span><span class="token punctuation">;</span></code></pre></li></ul><h3 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h3><ul><li><p>方式一：</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token keyword">DATABASE</span> mytest1<span class="token punctuation">;</span></code></pre></li><li><p>方式二：</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token keyword">DATABASE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> mytest1<span class="token punctuation">;</span></code></pre></li></ul><h3 id="创建数据表"><a href="#创建数据表" class="headerlink" title="创建数据表"></a>创建数据表</h3><ul><li><p>方式一：</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">USE</span> mytest1<span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> myemp1<span class="token punctuation">(</span> <span class="token comment"># 需要用户具有创建表的权限</span>id <span class="token keyword">INT</span><span class="token punctuation">,</span>    emp_name <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment"># 使用VARCHAR字符串必须指定长度</span>    hire_date <span class="token keyword">DATE</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment"># 查看表的创建信息</span><span class="token keyword">SHOW</span> <span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> myemp1<span class="token punctuation">;</span><span class="token comment"># 如果创建表时没有指定字符集，默认使用表所在的数据库的字符集</span></code></pre></li><li><p>方式二：基于现有的表，同时导入数据</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> myemp2<span class="token keyword">AS</span><span class="token keyword">SELECT</span> employee_id<span class="token punctuation">,</span> last_name <span class="token punctuation">,</span>salary<span class="token keyword">FROM</span> employees<span class="token punctuation">;</span></code></pre></li><li><p>MySQL8新特性：计算列</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 计算列，是某一列的值是通过其他列计算得来的，其他列变化时计算列会随之更新。</span><span class="token comment"># 创建表时声明计算列：</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> tb1<span class="token punctuation">(</span>    id <span class="token keyword">INT</span><span class="token punctuation">,</span>a <span class="token keyword">INT</span><span class="token punctuation">,</span>    b <span class="token keyword">INT</span><span class="token punctuation">,</span>    c <span class="token keyword">INT</span> GENERATED ALWAYS <span class="token keyword">AS</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span> VIRTUAL <span class="token comment"># c就是计算列，它的值总等于a+b</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment"># 向表中插入值</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> tb1<span class="token punctuation">(</span>id<span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span> <span class="token comment"># 这里只插入了a=11和b=22</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment"># 查询</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> tb1<span class="token punctuation">;</span><span class="token comment"># c已经被同步成了11+22=33</span><span class="token operator">+</span><span class="token comment">------+------+------+------+</span><span class="token operator">|</span> id   <span class="token operator">|</span> a    <span class="token operator">|</span> b    <span class="token operator">|</span> c    <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+------+------+------+</span><span class="token operator">|</span>    <span class="token number">1</span> <span class="token operator">|</span>   <span class="token number">11</span> <span class="token operator">|</span>   <span class="token number">22</span> <span class="token operator">|</span>   <span class="token number">33</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+------+------+------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.02</span> sec<span class="token punctuation">)</span></code></pre></li></ul><h3 id="查看表结构"><a href="#查看表结构" class="headerlink" title="查看表结构"></a>查看表结构</h3><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DESC</span> myemp1<span class="token punctuation">;</span></code></pre><h3 id="修改表"><a href="#修改表" class="headerlink" title="修改表"></a>修改表</h3><ul><li><p>添加字段</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> myemp1<span class="token keyword">ADD</span> salary <span class="token keyword">DOUBLE</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment"># 一共十位数字，小数点后两位，默认添加到表的最后面</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> myemp1<span class="token keyword">ADD</span> phone_number <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">FIRST</span><span class="token punctuation">;</span> <span class="token comment"># 把phone_number添加到第一个字段的位置</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> myemp1<span class="token keyword">ADD</span> email <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span> <span class="token keyword">AFTER</span> emp_name<span class="token punctuation">;</span> <span class="token comment"># 把email放到emp_name后面</span></code></pre></li></ul><ul><li><p>修改字段</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> myemp1<span class="token keyword">MODIFY</span> emp_name <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">35</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token string">'AAA'</span><span class="token punctuation">;</span></code></pre></li></ul><ul><li><p>重命名一个字段</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> myemp1CHANGE salary monthly_salary <span class="token keyword">DOUBLE</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> myemp1CHANGE email my_email <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><ul><li><p>删除一个字段</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> myemp1<span class="token keyword">DROP</span> <span class="token keyword">COLUMN</span> my_email<span class="token punctuation">;</span></code></pre></li></ul><h3 id="重命名表"><a href="#重命名表" class="headerlink" title="重命名表"></a>重命名表</h3><ul><li><p>方式一：</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">RENAME</span> <span class="token keyword">TABLE</span> emp1<span class="token keyword">TO</span> myemp11<span class="token punctuation">;</span></code></pre></li><li><p>方式二：</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> myemp2<span class="token keyword">RENAME</span> <span class="token keyword">TO</span> myemp12<span class="token punctuation">;</span></code></pre></li></ul><h3 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h3><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> 表名<span class="token punctuation">;</span></code></pre><h3 id="清空表"><a href="#清空表" class="headerlink" title="清空表"></a>清空表</h3><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 清空表中的数据，但是结构还在</span><span class="token keyword">TRUNCATE</span> <span class="token keyword">TABLE</span> 表名<span class="token punctuation">;</span></code></pre><h3 id="COMMIT-和-ROLLBACK"><a href="#COMMIT-和-ROLLBACK" class="headerlink" title="COMMIT 和 ROLLBACK"></a>COMMIT 和 ROLLBACK</h3><ul><li>COMMIT: 提交数据， 一旦执行，数据就被永久保存到了数据库中，不可以回滚。</li><li>ROLLBACK：回滚数据，一旦执行，可以实现数据的回滚。回滚到最近的一次COMMIT之后。</li></ul><h3 id="对比TRUNCATE-和-DELETE"><a href="#对比TRUNCATE-和-DELETE" class="headerlink" title="对比TRUNCATE 和 DELETE"></a>对比TRUNCATE 和 DELETE</h3><ul><li>相同点：都可以实现对表中所有数据的删除，同时保留表结构</li><li>不同点：一旦执行TRUNCATE，表数据全部清除，不可以回滚；DELETE 可以全部清除（不带WHERE），数据可以实现回滚</li></ul><h3 id="DDL和DML的说明"><a href="#DDL和DML的说明" class="headerlink" title="DDL和DML的说明"></a>DDL和DML的说明</h3><ol><li>DDL的操作一旦执行，就不可以回滚，<code>SET autocommit = FALSE</code>对DDL无效，因为在执行完DDL之后，一定会执行一次COMMIT。MySQL8.0以后，DDL的操作引入了原子性，要么都执行，要么都不执行、</li><li>DML操作默认情况也是不可以回滚的，但是如果在执行DML之前，执行了<code>SET autocommit = FALSE</code>，则执行的DML操作就可以回滚。</li></ol><p>演示：</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 创建一个备份表，在备份表里面操作</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> employee_copy<span class="token keyword">AS</span><span class="token keyword">SELECT</span> <span class="token operator">*</span><span class="token keyword">FROM</span> employees<span class="token punctuation">;</span><span class="token comment"># 看一下备份表里面的数据</span><span class="token keyword">SELECT</span> employee_id<span class="token punctuation">,</span>last_name<span class="token punctuation">,</span> salary<span class="token keyword">FROM</span> employee_copy<span class="token punctuation">;</span><span class="token comment"># 和employee表一样，共107条数据</span><span class="token operator">+</span><span class="token comment">-------------+-------------+----------+</span><span class="token operator">|</span> employee_id <span class="token operator">|</span> last_name   <span class="token operator">|</span> salary   <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-------------+-------------+----------+</span><span class="token operator">|</span>         <span class="token number">100</span> <span class="token operator">|</span> King        <span class="token operator">|</span> <span class="token number">24000.00</span> <span class="token operator">|</span><span class="token operator">|</span>         <span class="token number">101</span> <span class="token operator">|</span> Kochhar     <span class="token operator">|</span> <span class="token number">17000.00</span> <span class="token operator">|</span><span class="token operator">|</span>         <span class="token number">102</span> <span class="token operator">|</span> De Haan     <span class="token operator">|</span> <span class="token number">17000.00</span> <span class="token operator">|</span><span class="token operator">|</span>         <span class="token number">103</span> <span class="token operator">|</span> Hunold      <span class="token operator">|</span>  <span class="token number">9000.00</span> <span class="token operator">|</span><span class="token operator">|</span>         <span class="token number">104</span> <span class="token operator">|</span> Ernst       <span class="token operator">|</span>  <span class="token number">6000.00</span> <span class="token operator">|</span><span class="token operator">|</span>         <span class="token number">105</span> <span class="token operator">|</span> Austin      <span class="token operator">|</span>  <span class="token number">4800.00</span> <span class="token operator">|</span><span class="token operator">|</span>         <span class="token number">106</span> <span class="token operator">|</span> Pataballa   <span class="token operator">|</span>  <span class="token number">4800.00</span> <span class="token operator">|</span><span class="token operator">|</span>         <span class="token number">107</span> <span class="token operator">|</span> Lorentz     <span class="token operator">|</span>  <span class="token number">4200.00</span> <span class="token operator">|</span><span class="token operator">|</span>         <span class="token number">108</span> <span class="token operator">|</span> Greenberg   <span class="token operator">|</span> <span class="token number">12000.00</span> <span class="token operator">|</span><span class="token operator">|</span>         <span class="token number">109</span> <span class="token operator">|</span> Faviet      <span class="token operator">|</span>  <span class="token number">9000.00</span> <span class="token operator">|</span><span class="token operator">|</span>         <span class="token number">110</span> <span class="token operator">|</span> Chen        <span class="token operator">|</span>  <span class="token number">8200.00</span> <span class="token operator">|</span><span class="token operator">|</span>         <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">|</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         <span class="token operator">|</span>       <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-------------+-------------+----------+</span><span class="token number">107</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.11</span> sec<span class="token punctuation">)</span><span class="token comment"># 先提交，相当于存档，保证能够回滚</span><span class="token keyword">COMMIT</span><span class="token punctuation">;</span> <span class="token comment">-- Query OK, 0 rows affected (0.09 sec)</span><span class="token comment"># 关闭自动提交事务</span><span class="token keyword">SET</span> autocommit <span class="token operator">=</span> <span class="token boolean">FALSE</span><span class="token punctuation">;</span> <span class="token comment">-- Query OK, 0 rows affected (0.02 sec)</span><span class="token comment"># 删除所有表数据</span><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> employee_copy<span class="token punctuation">;</span> <span class="token comment">-- Query OK, 107 rows affected (0.02 sec)</span> <span class="token comment"># 查看表数据，确定已经删掉了</span><span class="token keyword">SELECT</span> employee_id<span class="token punctuation">,</span>last_name<span class="token punctuation">,</span> salary<span class="token keyword">FROM</span> employee_copy<span class="token punctuation">;</span> <span class="token comment">-- Empty set (0.02 sec)</span> <span class="token comment"># 回滚</span><span class="token keyword">ROLLBACK</span><span class="token punctuation">;</span> <span class="token comment">-- Query OK, 0 rows affected (0.02 sec)</span><span class="token comment"># 查看表数据，发现已经回来了</span><span class="token keyword">SELECT</span> employee_id<span class="token punctuation">,</span>last_name<span class="token punctuation">,</span> salary<span class="token keyword">FROM</span> employee_copy<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">-------------+-------------+----------+</span><span class="token operator">|</span> employee_id <span class="token operator">|</span> last_name   <span class="token operator">|</span> salary   <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-------------+-------------+----------+</span><span class="token operator">|</span>         <span class="token number">100</span> <span class="token operator">|</span> King        <span class="token operator">|</span> <span class="token number">24000.00</span> <span class="token operator">|</span><span class="token operator">|</span>         <span class="token number">101</span> <span class="token operator">|</span> Kochhar     <span class="token operator">|</span> <span class="token number">17000.00</span> <span class="token operator">|</span><span class="token operator">|</span>         <span class="token number">102</span> <span class="token operator">|</span> De Haan     <span class="token operator">|</span> <span class="token number">17000.00</span> <span class="token operator">|</span><span class="token operator">|</span>         <span class="token number">103</span> <span class="token operator">|</span> Hunold      <span class="token operator">|</span>  <span class="token number">9000.00</span> <span class="token operator">|</span><span class="token operator">|</span>         <span class="token number">104</span> <span class="token operator">|</span> Ernst       <span class="token operator">|</span>  <span class="token number">6000.00</span> <span class="token operator">|</span><span class="token operator">|</span>         <span class="token number">105</span> <span class="token operator">|</span> Austin      <span class="token operator">|</span>  <span class="token number">4800.00</span> <span class="token operator">|</span><span class="token operator">|</span>         <span class="token number">106</span> <span class="token operator">|</span> Pataballa   <span class="token operator">|</span>  <span class="token number">4800.00</span> <span class="token operator">|</span><span class="token operator">|</span>         <span class="token number">107</span> <span class="token operator">|</span> Lorentz     <span class="token operator">|</span>  <span class="token number">4200.00</span> <span class="token operator">|</span><span class="token operator">|</span>         <span class="token number">108</span> <span class="token operator">|</span> Greenberg   <span class="token operator">|</span> <span class="token number">12000.00</span> <span class="token operator">|</span><span class="token operator">|</span>         <span class="token number">109</span> <span class="token operator">|</span> Faviet      <span class="token operator">|</span>  <span class="token number">9000.00</span> <span class="token operator">|</span><span class="token operator">|</span>         <span class="token number">110</span> <span class="token operator">|</span> Chen        <span class="token operator">|</span>  <span class="token number">8200.00</span> <span class="token operator">|</span><span class="token operator">|</span>         <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">|</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         <span class="token operator">|</span>       <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-------------+-------------+----------+</span><span class="token number">107</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.11</span> sec<span class="token punctuation">)</span></code></pre><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="整数类型"><a href="#整数类型" class="headerlink" title="整数类型"></a>整数类型</h3><div class="table-container"><table><thead><tr><th>整数类型</th><th>字节</th><th>有符号数取值范围</th><th>无符号数取值范围</th></tr></thead><tbody><tr><td>TINYINT</td><td>1</td><td>-128-127</td><td>0-255</td></tr><tr><td>SMALLINT</td><td>2</td><td>-32768-32767</td><td>0-65535</td></tr><tr><td>MEDIUMINT</td><td>3</td><td>-8388608-8388607</td><td>0-16777215</td></tr><tr><td>INT</td><td>4</td><td>-2147183648-2147483647</td><td>0-4294967295</td></tr><tr><td>BIGINT</td><td>8</td><td>-9223370236854775808-9223370236854775807</td><td>0-18446744073709551615</td></tr></tbody></table></div><p>插入记录时如果超出了对应类型的范围，会报错</p><p>整数类型的可选属性：</p><ol><li><p>M</p><p><code>M</code>表示显示宽度，<code>M</code>的取值范围是（0,255）。例如：int(5)，当数据宽度小于5位的时候需要用字符填满宽度。该功能需要配合<code>ZEROFILL</code>使用，表示用0填满宽度，否则指定显示宽度无效。</p></li></ol><ol><li><p>UNSIGNED</p><p>指定该字段为无符号数</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> test_int2<span class="token punctuation">(</span>f1 <span class="token keyword">INT</span><span class="token punctuation">,</span>    f2 <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    f3 <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> ZEROFILL<span class="token punctuation">,</span> <span class="token comment"># 显示宽度为5，当插入的数值不足五位时用0补齐，且使用ZEROFILL时，自动使用UNSIGNED</span>    f4 <span class="token keyword">INT</span> <span class="token keyword">UNSIGNED</span><span class="token punctuation">)</span></code></pre></li></ol><h3 id="浮点数类型"><a href="#浮点数类型" class="headerlink" title="浮点数类型"></a>浮点数类型</h3><div class="table-container"><table><thead><tr><th>类型</th><th>占用字节数</th></tr></thead><tbody><tr><td>FLOAT</td><td>4</td></tr><tr><td>DOUBLE</td><td>8</td></tr></tbody></table></div><p>FLOAT占用字节小，取值范围小，DOUBLE占用空间大，取值范围大</p><p>浮点数类型不够精准，0.47+0.44+0.19=1.09999999999999，是由于二进制导致的精度丢失</p><h3 id="定点数类型"><a href="#定点数类型" class="headerlink" title="定点数类型"></a>定点数类型</h3><div class="table-container"><table><thead><tr><th>类型</th><th>字节数</th><th>含义</th></tr></thead><tbody><tr><td>DECIMAL(M,D),DEC,NUMERIC</td><td>M+2字节</td><td>有效范围由M和D决定</td></tr></tbody></table></div><p>使用<code>DECIMAL(M,D)</code>的方式表示高精度小数。其中，<code>M</code>被称为精度，<code>D</code>被称为标度。<code>0&lt;=M&lt;=65，0&lt;=D&lt;=30,D&lt;M</code>。例如，定义<code>DECIMAL (5,2)</code>的类型，表示该列取值范围是<code>-999.99~999.99</code>。当<code>DECIMAL</code>不指定精度和标度时，其默认为<code>DECIMAL(10,0)</code>。当数据的精度超出了定点数类型的精度范围，会四舍五入。</p><p>定点数使用字符串形式进行存储，这就代表它是绝对精准的。</p><p><strong>浮点数vs定点数</strong></p><ul><li>浮点数相对于定点数的优点是在长度一定的情况下，浮点类型取值范围大，但是不精准，适用于需要取值范围大，又可以容忍微小误差的科学计算场景（比如计算化学、分子建模、流体动力学等)</li><li>定点数类型取值范围相对小，但是精准，没有误差，适合于对精度要求极高的场景（比如涉及金额计算的场景)</li></ul><h3 id="位类型-BIT"><a href="#位类型-BIT" class="headerlink" title="位类型 BIT"></a>位类型 BIT</h3><div class="table-container"><table><thead><tr><th>二进制字符串类型</th><th>长度</th><th>长度范围</th><th>占用空间</th></tr></thead><tbody><tr><td>BIT(M)</td><td>M</td><td>1&lt;=M&lt;=64</td><td>约为(M+7)/8个字节</td></tr></tbody></table></div><p>BIT类型存储的是二进制值，类似010110.</p><p>BIT类型如果没有指定M默认是1位</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> test_bit<span class="token punctuation">(</span>      b1 <span class="token keyword">BIT</span><span class="token punctuation">,</span>      b2 <span class="token keyword">BIT</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      b3 <span class="token keyword">BIT</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> test_bit<span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">78</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> test_bit<span class="token punctuation">;</span></code></pre><p>有点意思的是，IDEA中，显示的结果是这样的：</p><p><img src="BIT_IDEA.png" alt="IDEA中BIT类型输出结果"></p><ul><li>b1字段是默认一位的二进制，IDEA将它作为布尔类型来显示</li><li>b2和b3是多位二进制，IDEA把它们直接作为二进制来输出</li></ul><p>而在命令行中，是以16进制字符串的类型表示的：</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token operator">+</span><span class="token comment">------------+------------+--------------------+</span><span class="token operator">|</span> b1         <span class="token operator">|</span> b2         <span class="token operator">|</span> b3                 <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------------+------------+--------------------+</span><span class="token operator">|</span> <span class="token number">0x01</span>       <span class="token operator">|</span> <span class="token number">0x02</span>       <span class="token operator">|</span> <span class="token number">0x0000000000000009</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">0x01</span>       <span class="token operator">|</span> <span class="token number">0x01</span>       <span class="token operator">|</span> <span class="token number">0x000000000000004E</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------------+------------+--------------------+</span><span class="token number">2</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.02</span> sec<span class="token punctuation">)</span><span class="token comment"># 可以用BIN()和HEX()函数分别用二进制和十六进制进行读取</span> <span class="token keyword">SELECT</span> BIN<span class="token punctuation">(</span>b2<span class="token punctuation">)</span><span class="token punctuation">,</span>HEX<span class="token punctuation">(</span>b2<span class="token punctuation">)</span> <span class="token keyword">FROM</span> test_bit<span class="token punctuation">;</span>  <span class="token operator">+</span><span class="token comment">---------+---------+</span><span class="token operator">|</span> BIN<span class="token punctuation">(</span>b2<span class="token punctuation">)</span> <span class="token operator">|</span> HEX<span class="token punctuation">(</span>b2<span class="token punctuation">)</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">---------+---------+</span><span class="token operator">|</span> <span class="token number">10</span>      <span class="token operator">|</span> <span class="token number">2</span>       <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">1</span>       <span class="token operator">|</span> <span class="token number">1</span>       <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">---------+---------+</span><span class="token number">2</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.02</span> sec<span class="token punctuation">)</span><span class="token comment"># 显示十进制</span><span class="token keyword">SELECT</span> b3 <span class="token operator">+</span> <span class="token number">0</span> <span class="token keyword">FROM</span> test_bit<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">------+</span><span class="token operator">|</span> b3<span class="token operator">+</span><span class="token number">0</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+</span><span class="token operator">|</span>    <span class="token number">9</span> <span class="token operator">|</span><span class="token operator">|</span>   <span class="token number">78</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+</span><span class="token number">2</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.02</span> sec<span class="token punctuation">)</span></code></pre><h3 id="日期与时间类型"><a href="#日期与时间类型" class="headerlink" title="日期与时间类型"></a>日期与时间类型</h3><div class="table-container"><table><thead><tr><th>类型</th><th>名称</th><th>字节</th><th>日期格式</th><th>最小值</th><th>最大值</th></tr></thead><tbody><tr><td>YEAR</td><td>年</td><td>1</td><td>YYYY 或 YY</td><td>1901</td><td>2155</td></tr><tr><td>TIME</td><td>时间</td><td>3</td><td>HH:MM:SS</td><td>-838:59:59</td><td>838:59:59</td></tr><tr><td>DATE</td><td>日期</td><td>3</td><td>YYYY-MM-DD</td><td>1000-01-01</td><td>9999-12-03</td></tr><tr><td>DATETIME</td><td>日期时间</td><td>8</td><td>YYYY-MM-DD HH:MM:SS</td><td>1000-01-01 00:00:00</td><td>9999-12-31 23:59:59</td></tr><tr><td>TIMESTAMP</td><td>日期时间</td><td>4</td><td>YYYY-MM-DD HH:MM:SS</td><td>1970-01-01 00:00:00 UTC</td><td>2038-01-19 03:14:07 UTC</td></tr></tbody></table></div><h4 id="YEAR类型"><a href="#YEAR类型" class="headerlink" title="YEAR类型"></a>YEAR类型</h4><p>YEAR类型用来表示年份，在所有的日期时间类型中所占用的存储空间最小，只需要1个字节的存储空间。在MySQL中，YEAR有以下几种存储格式:</p><ul><li>以4位字符串或数字格式表示YEAR类型，其默认格式为<code>YYYY</code>，最小值为1901，最大值为2155。</li><li>以2位字符串格式表示YEAR类型，最小值为00，最大值为99。<ul><li>当取值为01到69时，表示2001到2069;</li><li>当取值为70到99时，表示1970到1999;</li><li>当取值整数的0或00添加的话，那么是0000年;</li><li>当取值是日期/字符串的’0’添加的话，是2000年。</li></ul></li></ul><h4 id="DATE类型"><a href="#DATE类型" class="headerlink" title="DATE类型"></a>DATE类型</h4><p>DATE类型表示日期，没有时间部分，格式为<code>YYYY-MN-DD</code>，其中，表示年份，<code>MM</code>表示月份，<code>DD</code>表示日期。需要<code>3个字节</code>的存储空间。在向DATE类型的字段插入数据时，同样需要满足一定的格式条件。</p><ul><li>以<code>YYYY-MM-DD</code>格式或者<code>YYYYMMDD</code>格式表示的字符串日期，其最小取值为1000-01-01，最大取值为9999-12-03。<code>YYYYMMDD</code>格式会被转化为<code>YYYY-MM-DD</code>格式。</li><li>以<code>YY-MM-DD</code>格式或者<code>YYMMDD</code>格式表示的字符串日期，此格式中，年份为两位数值或字符串满足YEAR类型的格式条件为：当年份取值为00到69时，会被转化为2000到2069;当年份取值为70到99时，会被转化为1970到1999。</li><li>使用<code>CURRENT_DATE()</code>或者<code>NOW()</code>函数，会插入当前系统的日期。</li></ul><h4 id="TIME类型"><a href="#TIME类型" class="headerlink" title="TIME类型"></a>TIME类型</h4><p>TIME类型用来表示时间，不包含日期部分。在MySQL中，需要<code>3个字节</code>的存储空间来存储TIME类型的数据，可以使用<code>HH:MM:SS</code>格式来表示TIME类型，其中，<code>HH</code>表示小时，<code>MM</code>表示分钟，<code>SS</code>表示秒。<br>在MysQL中，向TIME类型的字段插入数据时，也可以使用几种不同的格式。</p><ol><li>可以使用带有冒号的字符串，比如<code>&#39;D HH:MM:SS&#39;</code>、<code>&#39;H :MM:SS &#39;</code>、<code>&#39;HH:MM&#39;</code>、<code>&#39;D HH:MN&#39;</code>、<code>&#39;D HH &#39;</code>或<code>&#39;SS&#39;</code>格式，都能被正确地插入TIME类型的字段中。其中D表示天，其最小值为0，最大值为34。如果使用带有D格式的字符串插入TIME类型的字段时，D会被转化为小时，计算格式为D*24+HH。当使用带有冒号并且不带D的字符串表示时间时，表示当天的时间，比如12:10表示12:10:00，而不是00:12:10。</li><li>可以使用不带有冒号的字符串或者数字，格式为<code>&#39; HHMMSS &#39;</code>或者<code>HHMMSS</code>。如果插入一个不合法的字符串或者数字，MySQL在存储数据时，会将其自动转化为00:00:00进行存储。比如1210，MySQL会将最右边的两位解析成秒，表示00:12:10，而不是12:10:00。</li><li>使用<code>CURRENT_TIME()</code>或者<code>NOW()</code>，会插入当前系统的时间。</li></ol><h4 id="DATETIME类型"><a href="#DATETIME类型" class="headerlink" title="DATETIME类型"></a>DATETIME类型</h4><p>DATETIME类型在所有的日期时间类型中占用的存储空间最大，总共需要<code>8个字节</code>的存储空间。在格式上为DATE类型和TIME类型的组合，可以表示为<code>YYYY-MN-DD HH:MM:SS</code>，其中<code>YY</code>表示年份，<code>MM</code>表示月份，<code>DD</code>表示日期，<code>HH</code>表示小时，<code>MM</code>表示分钟，<code>SS</code>表示秒。<br>在向DATETIME类型的字段插入数据时，同样需要满足一定的格式条件。</p><ul><li>以<code>YYYY-MN-DD HH:M:SS</code>格式或者<code>YYYYMMDDHHMMSS</code>格式的字符串插入DATETIME类型的字段时，最小值为1000-01-01 00:00:00，最大值为9999-12-03 23:59:59。</li><li>以<code>YYYMMDDHHMMSS</code>格式的数字插入DATETIME类型的字段时，会被转化为<code>YYYY-MM-DD HH:MM:SS</code>格式。以<code>YY-MM-DD HH:MM:SS</code>格式或者<code>YYMMDDHHMMSS</code>格式的字符串插入DATETIME类型的字段时，两位数的年份规则符合YEAR类型的规则，00到69表示2000到2069；70到99表示1970到1999。</li><li>使用函数<code>CURRENT_TIMESTAMP()</code>和<code>NOW()</code>，可以向DATETIME类型的字段插入系统的当前日期和时间。</li></ul><h4 id="TIMESTAMP类型"><a href="#TIMESTAMP类型" class="headerlink" title="TIMESTAMP类型"></a>TIMESTAMP类型</h4><p>TIMESTAMP类型也可以表示日期时间，其显示格式与DATETIME类型相同，都是<code>YYYY-MN-DD HH: MM:SS</code>，需要<code>4个字节</code>的存储空间。但是TIMESTAMP存储的时间范围比DATETIME要小很多，只能存储<code>&quot;1970-01-01 00:00:01 UTC&quot;</code>到<code>&quot;2038-01-19 03:14:07 UTC&quot;</code>之间的时间。其中，UTC表示世界统一时间，也叫作世界标准时间</p><ul><li>存储数据的时候需要对当前时间所在的时区进行转换，查询数据的时候再将时间转换回当前的时区。因此，使用TIMESTAMP存储的同一个时间值，在<strong>不同的时区查询时会显示不同的时间</strong>。</li><li>向TIMESTAMP类型的字段插入数据时，当插入的数据格式满足<code>YY-MM-DD HH:MM:SS</code>和<code>YYMMDDHHMMSS</code>时，两位数值的年份同样符合YEAR类型的规则条件，只不过表示的时间范围要小很多。</li><li>如果向TIMESTAMP类型的字段插入的时间超出了TIMESTAMP类型的范围，则MySQL会抛出错误信息。</li></ul><p>TIMESTAMP和DATETIME的区别:</p><ul><li>TIMESTAMP存储空间比较小，表示的日期时间范围也比较小</li><li>底层存储方式不同，TIMESTAMP底层存储的是毫秒值，距离1970-1-1 0:0:0 0毫秒的毫秒值。</li><li>两个日期比较大小或日期计算时，TIMESTAMP更方便、更快。</li><li>TIMESTAMP和时区有关。TIMESTAMP会根据用户的时区不同，显示不同的结果。而DATETIME则只能反映出插入时当地的时区，其他时区的人查看数据必然会有误差的。</li></ul><h3 id="文本字符串类型"><a href="#文本字符串类型" class="headerlink" title="文本字符串类型"></a>文本字符串类型</h3><div class="table-container"><table><thead><tr><th>文本字符串类型</th><th>值的长度</th><th>长度范围</th><th>占用的存储空间</th></tr></thead><tbody><tr><td>CHAR(M)</td><td>M</td><td>0&lt;=M&lt;=255</td><td>M个字节</td></tr><tr><td>VARCHAR(M)</td><td>M</td><td>0&lt;=M&lt;=65535</td><td>M+1个字节</td></tr><tr><td>TINYTEXT</td><td>L</td><td>0&lt;=L&lt;=255</td><td>L+2个字节</td></tr><tr><td>TEXT</td><td>L</td><td>0&lt;=L&lt;=65535</td><td>L+2个字节</td></tr><tr><td>MEDIUMTEXT</td><td>L</td><td>0&lt;=L&lt;=16777215</td><td>L+3个字节</td></tr><tr><td>LONGTEXT</td><td>L</td><td>0&lt;=L&lt;=4294967295</td><td>L+4个字节</td></tr><tr><td>ENUM</td><td>L</td><td>1&lt;=L&lt;=65535</td><td>1或2个字节</td></tr><tr><td>SET</td><td>L</td><td>0&lt;=L&lt;=64</td><td>1,2,3,4或8个字节</td></tr></tbody></table></div><h4 id="CHAR类型"><a href="#CHAR类型" class="headerlink" title="CHAR类型"></a>CHAR类型</h4><ul><li>CHAR(M)类型一般需要预先定义字符串长度。如果不指定(M)，则表示长度默认是1个字符。</li><li>如果保存时，数据的实际长度比CHAR类型声明的长度小，则会在<strong>右侧填充空格</strong>以达到指定的长度。当MySQL检索CHAR类型的数据时，CHAR类型的字段会<strong>去除尾部的空格</strong>。</li><li>定义CHAR类型字段时，声明的字段长度即为CHAR类型字段所占的存储空间的字节数。</li></ul><h4 id="VARCHAR类型"><a href="#VARCHAR类型" class="headerlink" title="VARCHAR类型"></a>VARCHAR类型</h4><ul><li>VARCHAR(M)定义时，必须指定长度M，否则报错。</li><li>MySQL4.0版本以下，varchar(20)：指的是20字节，如果存放UTF8汉字时，只能存6个(每个汉字3字节)；MySQL5.0版本以上，varchar(20)：指的是20字符。</li><li>检索VARCHAR类型的字段数据时，会<strong>保留数据尾部的空格</strong>。VARCHAR类型的字段所占用的存储空间为<strong>字符串实际长度加1个字节</strong>。</li></ul><h4 id="TEXT类型"><a href="#TEXT类型" class="headerlink" title="TEXT类型"></a>TEXT类型</h4><ul><li>在MySQL中，TEXT用来保存文本类型的字符串，总共包含4种类型，分别为TINYTEXT、TEXT.、MEDIUMTEXT和LONGTEXT类型。</li><li>在向TEXT类型的字段保存和查询数据时，系统自动按照实际长度存储，不需要预先定义长度。这一点和VARCHAR类型相同。</li><li><strong>TEXT类型不允许作为主键</strong></li></ul><h4 id="ENUM类型"><a href="#ENUM类型" class="headerlink" title="ENUM类型"></a>ENUM类型</h4><p>ENUM类型也叫作枚举类型，ENUM类型的取值范围需要在定义字段时进行指定。设置字段值时，ENUM类型只允许从成员中选取单个值，不能一次选取多个值。<br>其所需要的存储空间由定义ENUM类型时指定的成员个数决定。</p><ul><li>当ENUM类型包含1~255个成员时，需要1个字节的存储空间；</li><li>当ENUM类型包含256~65535个成员时，需要2个字节的存储空间。</li><li>ENUM类型的成员个数的上限为65535个。</li></ul><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> enum_test<span class="token punctuation">(</span>season <span class="token keyword">ENUM</span><span class="token punctuation">(</span><span class="token string">'春'</span><span class="token punctuation">,</span><span class="token string">'夏'</span><span class="token punctuation">,</span><span class="token string">'秋'</span><span class="token punctuation">,</span><span class="token string">'冬'</span><span class="token punctuation">,</span><span class="token string">'unknown'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment"># 插入时只能选取枚举值的某一个，否则会报错</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> enum_test<span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'春'</span><span class="token punctuation">,</span><span class="token string">'秋'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment"># 插入多个会报错</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> enum_test<span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'春，秋'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment"># 也可以采用枚举下标插入</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> enum_test<span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'3'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment"># 字符串隐式转换</span></code></pre><h4 id="SET类型"><a href="#SET类型" class="headerlink" title="SET类型"></a>SET类型</h4><p>SET表示一个字符串对象，可以包含0个或多个成员，但成员个数的上限为64。设置字段值时，可以取取值范围内的0个或多个值。<br>当SET类型包含的成员个数不同时，其所占用的存储空间也是不同的，具体如下:</p><div class="table-container"><table><thead><tr><th>成员个数范围（L表示实际成员个数）</th><th>占用的存储空间</th></tr></thead><tbody><tr><td>1&lt;=L&lt;=8</td><td>1个字节</td></tr><tr><td>9&lt;=L&lt;=16</td><td>2个字节</td></tr><tr><td>17&lt;=L&lt;=24</td><td>3个字节</td></tr><tr><td>25&lt;=L&lt;=32</td><td>4个字节</td></tr><tr><td>33&lt;=L&lt;=64</td><td>8个字节</td></tr></tbody></table></div><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> set_test<span class="token punctuation">(</span>season <span class="token keyword">SET</span><span class="token punctuation">(</span><span class="token string">'春'</span><span class="token punctuation">,</span><span class="token string">'夏'</span><span class="token punctuation">,</span><span class="token string">'秋'</span><span class="token punctuation">,</span><span class="token string">'冬'</span><span class="token punctuation">,</span><span class="token string">'unknown'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment"># 插入时选取枚举值的0或多个</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> set_test<span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'春，秋'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment"># 插入重复的SET类型成员时，MySQL会自动删除重复的成员</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> set_test<span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'春，秋，春'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment"># 向SET字段插入不存在的值会报错</span></code></pre><h3 id="二进制字符串类型"><a href="#二进制字符串类型" class="headerlink" title="二进制字符串类型"></a>二进制字符串类型</h3><div class="table-container"><table><thead><tr><th>类型名称</th><th>说明</th><th>存储需求</th></tr></thead><tbody><tr><td>BINARY(M)</td><td>固定长度二进制字符串</td><td>M 字节</td></tr><tr><td>VARBINARY (M)</td><td>可变长度二进制字符串</td><td>M+1 字节</td></tr><tr><td>TINYBLOB (M)</td><td>非常小的BLOB</td><td>L+1 字节，在此，L&lt;2^8</td></tr><tr><td>BLOB (M)</td><td>小 BLOB</td><td>L+2 字节，在此，L&lt;2^16</td></tr><tr><td>MEDIUMBLOB (M)</td><td>中等大小的BLOB</td><td>L+3 字节，在此，L&lt;2^24</td></tr><tr><td>LONGBLOB (M)</td><td>非常大的BLOB</td><td>L+4 字节，在此，L&lt;2^32</td></tr></tbody></table></div><h4 id="BINARY-和-VARBINARY-类型"><a href="#BINARY-和-VARBINARY-类型" class="headerlink" title="BINARY 和 VARBINARY 类型"></a>BINARY 和 VARBINARY 类型</h4><p>BINARY 和 VARBINARY 类型类似于 CHAR 和 VARCHAR，不同的是它们包含二进制字节字符串。使用的语法格式如下：</p><p>列名称 BINARY(M) 或者 VARBINARY(M)</p><p>BINARY 类型的长度是固定的，指定长度后，不足最大长度的，将在它们右边填充 “\0” 补齐，以达到指定长度。例如，指定列数据类型为 BINARY(3)，当插入 a 时，存储的内容实际为 “\a0\0”，当插入 ab 时，实际存储的内容为“ab\0”，无论存储的内容是否达到指定的长度，存储空间均为指定的值 M。</p><p>VARBINARY 类型的长度是可变的，指定好长度之后，长度可以在 0 到最大值之间。例如，指定列数据类型为 VARBINARY(20)，如果插入的值长度只有 10，则实际存储空间为 10 加 1，实际占用的空间为字符串的实际长度加 1。</p><h4 id="BLOB类型"><a href="#BLOB类型" class="headerlink" title="BLOB类型"></a>BLOB类型</h4><p>BLOB 是一个二进制的对象，用来存储可变数量的数据，如存储图片、音频信息等。BLOB 类型分为 4 种：<code>TINYBLOB</code>、<code>BLOB</code>、<code>MEDIUMBLOB</code> 和 <code>LONGBLOB</code>，它们可容纳值的最大长度不同，如下表所示。</p><div class="table-container"><table><thead><tr><th>数据类型</th><th>存储范围</th></tr></thead><tbody><tr><td>TINYBLOB</td><td>最大长度为255 (28-1)字节</td></tr><tr><td>BLOB</td><td>最大长度为65535 (216-1)字节</td></tr><tr><td>MEDIUMBLOB</td><td>最大长度为16777215 (224-1)字节</td></tr><tr><td>LONGBLOB</td><td>最大长度为4294967295或4GB (231-1)字节</td></tr></tbody></table></div><p>BLOB 列存储的是二进制字符串（字节字符串），TEXT 列存储的是非进制字符串（字符字符串）。BLOB 列是字符集，并且排序和比较基于列值字节的数值；TEXT 列有一个字符集，并且根据字符集对值进行排序和比较。</p><h2 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h2><p>查看表中的约束:</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> information_schema<span class="token punctuation">.</span>table_constrains <span class="token keyword">WHERE</span> table_name <span class="token operator">=</span> <span class="token string">'employees'</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最长递增子序列（LIS）问题</title>
      <link href="/2024/04/06/zui-chang-di-zeng-zi-xu-lie-lis-wen-ti/"/>
      <url>/2024/04/06/zui-chang-di-zeng-zi-xu-lie-lis-wen-ti/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode.cn/problems/longest-increasing-subsequence/description/">leetcode 300 最长递增子序列</a></p><h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><blockquote><p>给你一个整数数组 nums ，找到其中最长严格递增子序列的长度。</p><p>子序列 是由数组派生而来的序列，删除（或不删除）数组中的元素而不改变其余元素的顺序。</p></blockquote><p>这个题目第一反应是动态规划，dp数组表示以nums数组第i个元素结尾的子序列，最长递增长度为多少。<br>状态转移方程为：</p><script type="math/tex; mode=display">dp[i] = \max_{nums[j]<nums[i]} dp[j]+1</script><p>时间复杂度为 <script type="math/tex">o(n^2)</script>，空间复杂度为<script type="math/tex">o(n)</script></p><h1 id="贪心-二分查找"><a href="#贪心-二分查找" class="headerlink" title="贪心+二分查找"></a>贪心+二分查找</h1><p>二分查找可以达到<script type="math/tex">O(nlogn)</script>的复杂度，思路如下：</p><ol><li>维护一个辅助数组 <strong>p</strong> ，它的每一项 <script type="math/tex">p[i]</script> 的含义是，所有长度为 <strong>i+1 </strong>的上升子序列的末尾元素中的最小值；</li><li>遍历数组<script type="math/tex">num</script> , 如果 <script type="math/tex">nums[i]</script> 大于数组中最后一个元素,那么直接把该元素放到数组尾部 ; 否则使用二分查找寻找 <script type="math/tex">nums[i]</script> 插入数组 <strong><em>p</em></strong> 的位置 <strong><em>j</em></strong>  , 并使<script type="math/tex">p[j]=nums[i]</script></li></ol><p>可知 , 数组 <strong>p</strong> 是严格递增的 . </p><p>这种算法的思想是这样的:</p><p>​    在寻找最长递增子序列的过程中 , 我们希望子序列的增长尽可能的慢 , 这样在后续的遍历中才能放下更多的元素 。因此我们在遍历时，会使用<script type="math/tex">nums[i]</script>来替换<script type="math/tex">p[j]</script>的值，目的是使子序列 <strong><em>p</em></strong> 上升得尽可能慢，例如：</p><p>​    我们在遍历时已经得到了数组 <strong><em>p</em></strong> 为：</p><script type="math/tex; mode=display">p = [1,3,5,7,9]</script><p>​    现在遍历到<script type="math/tex">nums[i]=8</script>,显然使用二分查找后，找到元素 8 应该在 <strong><em>p</em></strong> 中的下标为 4， 那么我们用 8 来替换 <script type="math/tex">p[4]</script>，得到：</p><script type="math/tex; mode=display">p = [1,3,5,7,8]</script><p>​    这样就保证了在不降低递增子序列长度的前提下，使 <strong><em>p</em></strong> 增长得尽可能慢。</p><p>​    <strong>注意：最后得到的数组 p 并不是最后的递增子序列，只能保证它的长度等于最大递增子序列的长度！</strong></p><p>​    考虑下面的数组：</p><script type="math/tex; mode=display">nums = [1,3,5,7,9,4]</script><p>​    我们在遍历到下标 4 的位置时，得到的数组 <strong><em>p</em></strong> 为</p><script type="math/tex; mode=display">p = [1,3,5,7,9]</script><p>​    继续遍历到<script type="math/tex">nums[5]=4</script>时，按照算法，应该把它插入到<script type="math/tex">p[2]</script>的位置，于是得到数组 <strong><em>p</em></strong> 为</p><script type="math/tex; mode=display"> p = [1,3,4,7,9]</script><p>​    这显然不是最后得到的最大递增子序列，只是它的长度是在遍历过程中出现过的最长递增子序列的长度而已。</p><p>​    </p><p>实现的代码如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">lengthOfLIS</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token operator">||</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                list<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token function">sort</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> left<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>right<span class="token operator">=</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>mid<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;</span>right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            mid <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token operator">&lt;</span>target<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                right <span class="token operator">=</span> mid<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> left<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LIS </tag>
            
            <tag> 二分查找 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>&#39;docker基本使用&#39;</title>
      <link href="/2023/08/15/docker-ji-ben-shi-yong/"/>
      <url>/2023/08/15/docker-ji-ben-shi-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="docker基本使用"><a href="#docker基本使用" class="headerlink" title="docker基本使用"></a>docker基本使用</h1><h2 id="docker镜像"><a href="#docker镜像" class="headerlink" title="docker镜像"></a>docker镜像</h2>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数列通项公式总结</title>
      <link href="/2023/05/15/shu-lie-tong-xiang-gong-shi-zong-jie/"/>
      <url>/2023/05/15/shu-lie-tong-xiang-gong-shi-zong-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="数列通项公式总结"><a href="#数列通项公式总结" class="headerlink" title="数列通项公式总结"></a>数列通项公式总结</h1><h2 id="1-a-n-1-a-n-d-型"><a href="#1-a-n-1-a-n-d-型" class="headerlink" title="1. $a_{n+1}=a_{n}+d$ 型"></a>1. $a_{n+1}=a_{n}+d$ 型</h2><p>等差数列，略</p><h2 id="2-a-n-1-q-cdot-a-n-型"><a href="#2-a-n-1-q-cdot-a-n-型" class="headerlink" title="2. $a_{n+1}=q \cdot a_n$ 型"></a>2. $a_{n+1}=q \cdot a_n$ 型</h2><p>等比数列，略</p><h2 id="3-累加法"><a href="#3-累加法" class="headerlink" title="3. 累加法"></a>3. 累加法</h2><p><strong>常见形式为 $a_{n+1}=a_n+f(n)$，且$f(n)$的前n项和易求得（比如等差、等比、差比、裂项等）</strong><br>有：</p><script type="math/tex; mode=display">a_n=(a_n-a_{n-1})+(a_{n-1}-a_{n-2})+\ldots +(a_2-a_1)=f(n-1)+f(n-2)+\ldots+f(1), (n \geq 2)</script><h2 id="4-累乘法"><a href="#4-累乘法" class="headerlink" title="4. 累乘法"></a>4. 累乘法</h2><p><strong>常见形式为：</strong></p><script type="math/tex; mode=display">\frac{a_{n+1}}{a_n}=f(n)</script><p>有：</p><script type="math/tex; mode=display">a_n=\frac{a_n}{a_{n-1}}\cdot \frac{a_{n-1}}{a_{n-2}}\cdot \ldots \cdot \frac{a_2}{a_1}=f(n-1)\cdot f(n-2) \cdot \ldots \cdot f(1)</script><h2 id="5-a-n-1-p-cdot-a-n-q-型"><a href="#5-a-n-1-p-cdot-a-n-q-型" class="headerlink" title="5. $a_{n+1}=p \cdot a_n + q$ 型"></a>5. $a_{n+1}=p \cdot a_n + q$ 型</h2><blockquote><p><strong>核心思想：构造等比数列</strong><br><strong>方法一：待定系数法</strong><br>在等式两边加同一个常数，使得等式两边成等比数列：</p><script type="math/tex; mode=display">a_{n+1}+k = p \cdot a_n + q+k</script><p>待定系数法确定k值，有：</p><script type="math/tex; mode=display">\frac{k}{1}=\frac{q+k}{p}</script><p>解得：</p><script type="math/tex; mode=display">k=\frac{q}{p-1}</script><p>带回递推式：</p><script type="math/tex; mode=display">a_{n+1}+\frac{q}{p-1} = p \cdot a_n + \frac{pq}{p-1}=p \cdot (a_n+\frac{q}{p-1})</script><p>令数列$b_n=a_n+\frac{q}{p-1}$,得</p><script type="math/tex; mode=display">b_{n+1}=p \cdot b_n</script><p>转化为等比数列求解即可</p><p><strong>方法二：逐项相减法</strong><br>有：</p><script type="math/tex; mode=display">a_{n+1}=p \cdot a_n + q\\\\a_{n}=p \cdot a_{n-1} + q</script><p>两式相减可得：</p><script type="math/tex; mode=display">a_{n+1}-a_n=p \cdot (a_n-a_{n-1}),n\geq 2</script><p>令数列 $b_n=a_n-a_{n-1},n\geq 2$,有：</p><script type="math/tex; mode=display">b_{n+1}=p\cdot b_n</script><p>转化为等比数列求解即可<br><strong>特别地，$p=1$时，k 值不存在，但是此时递推式直接退化为等差数列。</strong></p><h2 id="6-a-n-1-pa-n-kn-b-型"><a href="#6-a-n-1-pa-n-kn-b-型" class="headerlink" title="6. $a_{n+1}=pa_n+kn+b$ 型"></a>6. $a_{n+1}=pa_n+kn+b$ 型</h2><p><strong>方法一：逐项相减法</strong><br>有：</p><script type="math/tex; mode=display">a_{n+1}=pa_n+kn+b\\\\a_n=pa_{n-1}+k(n-1)+b</script><p>两式相减得：</p><script type="math/tex; mode=display">a_{n+1}-a_n=p(a_n-a_{n-1})+k,n\geq 2</script><p>令 $b_n=a_n-a_{n-1},n\geq 2$，有：</p><script type="math/tex; mode=display">b_{n+1}=pb_n+k</script><p>转化成$a_{n+1}=p \cdot a_n + q$ 型求解即可。</p><p><strong>方法二：待定系数法</strong><br>此方法的思路依旧是<strong>构造等比数列</strong>。<br>在等式两边同时加一项 $x(n+1)+y$，得：</p><script type="math/tex; mode=display">a_{n+1}+x(n+1)+y=pa_n+(x+k)n+x+y+b</script><p>对应项成比例，有：</p><script type="math/tex; mode=display">x+k=px\\\\x+y+b=py</script><p>解得：</p><script type="math/tex; mode=display">x=\frac{k}{p-1}\\\\y=\frac{k}{(p-1)^2}+\frac{b}{p-1}</script><p>带回原式：</p><script type="math/tex; mode=display">a_{n+1}+\frac{k}{p-1}(n+1)+\frac{k+bp-b}{(p-1)^2}=pa_n+\frac{pk}{p-1}n+\frac{pk+bp^2-bp}{(p-1)^2}</script><p>令$b_n=a_{n}+\frac{k}{p-1}n+\frac{k+bp-b}{(p-1)^2}$，得：</p><script type="math/tex; mode=display">b_{n+1}=pb_n</script><p>转化为等比数列即可。</p></blockquote><h2 id="7-a-n-1-p-cdot-a-n-q-cdot-m-n-型"><a href="#7-a-n-1-p-cdot-a-n-q-cdot-m-n-型" class="headerlink" title="7. $a_{n+1} = p \cdot a_n + q \cdot m^n$ 型"></a>7. $a_{n+1} = p \cdot a_n + q \cdot m^n$ 型</h2><blockquote><p><strong>核心思想：构造等比数列</strong><br><br><strong>方法一：</strong><br>在等式两边同时除以 $m^{n+1}$ 得：</p><script type="math/tex; mode=display">\frac{a_{n+1}}{m^{n+1}}=p \cdot \frac{a_n}{m^n} + \frac{q}{m}</script><p>令数列$b_n=\frac{a_n}{m^n}$,那么：</p><script type="math/tex; mode=display">b_{n+1}=p \cdot b_n + \frac{q}{m}</script><p>即转化为$a_{n+1}=p \cdot a_n + q$ 型</p><p><strong>方法二：</strong><br>类似第三种$a_{n+1}=p \cdot a_n + q$ 型，在等式两边同时加一项 $k \cdot m^{n+1}$，得：</p><script type="math/tex; mode=display">a_{n+1} + k \cdot m^{n+1} = p \cdot a_n + (q+km)\cdot m^n</script><p>等比数列需要指数项和数列项成比例， 由待定系数法确定 <em>k</em> 值：</p><script type="math/tex; mode=display">\frac{k}{1}=\frac{q+km}{p}</script><p>解得</p><script type="math/tex; mode=display">k = \frac{q}{p-m}</script><p>带回递推式</p><script type="math/tex; mode=display">a_{n+1} + \frac{q}{p-m} \cdot q^{n+1} = p \cdot a_n + (q+\frac{q}{p-m}m)\cdot q^n= p \cdot (a_n+ \frac{q}{p-m} \cdot q^{n})</script><p>令数列$b_n=a_n+ \frac{q}{p-m} \cdot q^{n}$，那么;</p><script type="math/tex; mode=display">b_{n+1}=p \cdot b_n</script><p>即转化为等比数列</p><h2 id="8-a-n-1-pa-q-n-型"><a href="#8-a-n-1-pa-q-n-型" class="headerlink" title="8. $a_{n+1}=pa^q_n$ 型"></a>8. $a_{n+1}=pa^q_n$ 型</h2><p>见到指数型，<strong>取对数</strong></p><script type="math/tex; mode=display">lga_{n+1}=q\cdot lga_n + lgp</script><p>令数列$b_n=lga_n$，有：</p><script type="math/tex; mode=display">b_{n+1}=qb_n+lgp</script><p>这依然是$a_{n+1}=p \cdot a_n + q$ 型，求解即可。</p></blockquote><h2 id="9-a-n-1-frac-a-cdot-a-n-b-cdot-a-n-c-型"><a href="#9-a-n-1-frac-a-cdot-a-n-b-cdot-a-n-c-型" class="headerlink" title="9. $a_{n+1}=\frac{a\cdot a_n}{b\cdot a_n+c}$型"></a>9. $a_{n+1}=\frac{a\cdot a_n}{b\cdot a_n+c}$型</h2><blockquote><p><strong>倒数法</strong><br>两边取倒数：</p><script type="math/tex; mode=display">\frac{1}{a_{n+1}}=\frac{b}{a}\cdot \frac{1}{a_n}+\frac{c}{a}</script><p>令数列$b_n=\frac{1}{a_n}$，有：</p><script type="math/tex; mode=display">b_{n+1}=\frac{b}{a}\cdot b_n+\frac{c}{a}</script><p>即转化为$a_{n+1}=p \cdot a_n + q$ 型</p><h2 id="10-a-n-1-frac-a-cdot-a-n-b-c-cdot-a-n-d-型"><a href="#10-a-n-1-frac-a-cdot-a-n-b-c-cdot-a-n-d-型" class="headerlink" title="10. $a_{n+1}=\frac{a\cdot a_n+b}{c\cdot a_n+d}$型"></a>10. $a_{n+1}=\frac{a\cdot a_n+b}{c\cdot a_n+d}$型</h2><p><strong>方法一：待定系数法</strong><br>受到上一种类型的启发，是否可以构造一个数列，使得该问题可以转化为上一种类型的问题？<br>两边同时加常数k：</p><script type="math/tex; mode=display">a_{n+1}+k=\frac{(a+ck)\cdot a_n+(b+dk)}{c\cdot a_n+d}   （1）</script><p>想要取倒数之后，可以用另一个数列来换元，就需要右侧分子和左侧对应系数成比例：</p><script type="math/tex; mode=display">\frac{k}{1}=\frac{b+dk}{a+ck}</script><p>这是一个关于k的一元二次方程，分下面两种情况：</p><ol><li>若k有解，那么把k带入（1）式，再取倒数，对右侧进行分离常数，即可转化为$a_{n+1}=\frac{a\cdot a_n}{b\cdot a_n+c}$ 型；</li><li>若k无解，那么数列$\{a_n\}$是周期数列。</li></ol><p><strong>方法二：不动点法（了解）</strong><br>不动点的定义为：满足$f(x_0)=x_0$的值$x_0$称为函数$f(x)$的不动点。<br>对于数列递推式$a_{n+1}=\frac{a\cdot a_n+b}{c\cdot a_n+d}$，把数列项全部换成x，有：</p><script type="math/tex; mode=display">x=\frac{ax+b}{cx+d}</script><p>这是关于x的一元二次方程，会发现它和方法一中待定系数方程一样。这里详细地说一下它的解对数列的影响：</p><ol><li>若方程有两个解 $\lambda$、$\mu$,那么数列$\{\frac{a_n-\lambda}{a_n-\mu}\}$为等比数列；</li><li>若方程有唯一解 $\lambda$，那么数列$\{\frac{1}{a_n-\lambda}\}$为等差数列；</li><li>若方程无解，那么数列$\{a_n\}$是周期数列。</li></ol><p><strong>该方法可以当做一个技巧去记忆，但是切记不可以钻牛角尖；在平时做题你会看到很多形如$a_{n+1}=\frac{a\cdot a_n+b}{c\cdot a_n+d}$的递推式，但是多数情况并不需要求它的递推式，尤其在小题中，可以使用不动点法判断$\{a_n\}$是否为周期数列，否则不要把该方法当成第一考虑的方法。</strong></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 高中数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 高中数学 </tag>
            
            <tag> 数列 </tag>
            
            <tag> 通项公式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu安装mysql8.0流程记录</title>
      <link href="/2023/05/08/ubuntu-an-zhuang-mysql8-0-liu-cheng-ji-lu/"/>
      <url>/2023/05/08/ubuntu-an-zhuang-mysql8-0-liu-cheng-ji-lu/</url>
      
        <content type="html"><![CDATA[<h1 id="ubuntu安装mysql8-0流程记录"><a href="#ubuntu安装mysql8-0流程记录" class="headerlink" title="ubuntu安装mysql8.0流程记录"></a>ubuntu安装mysql8.0流程记录</h1><p>先切换到root用户下：<br><pre class="language-none"><code class="language-none">sudo su</code></pre></p><p>本文档中使用的操作系统是ubuntu20.04，默认使用apt下载mysql默认版本可能是mysql5，所以先去官网<a href="https://dev.mysql.com/downloads/mysql/">https://dev.mysql.com/downloads/mysql/</a>下载mysql8的源：<br><img src="./mysql8安装1.png" alt="img"><br><img src="./mysql8安装2.png" alt="img"><br>我们将下载到的<code>mysql-apt-config_0.8.24-1_all.deb</code>文件放到用户主目录下，执行下面的命令：<br><pre class="language-none"><code class="language-none">dpkg -i mysql-apt-config_0.8.24-1_all.deb</code></pre><br>会出现下面的界面，选择<code>mysql server -&gt; mysql-8.0 -&gt; ok</code><br><img src="./mysql8安装3.png" alt="img"><br>之后我们使用下面的命令安装mysql：s<br><pre class="language-ss" data-language="ss"><code class="language-ss">apt-get upgradeapt-get install mysql-server</code></pre><br>安装过程中会让你设置初始密码(如果没有这一步，看下面)：<br><img src="./mysql8安装4.png" alt="img"><br>若是没出错就已经安装好了，可以尝试登录一下：<br><pre class="language-none"><code class="language-none">mysql -u root -p</code></pre><br>输入刚才的初始密码即可。<br><img src="./mysql8安装5.png" alt="img"></p><h2 id="没有初始密码的情况"><a href="#没有初始密码的情况" class="headerlink" title="没有初始密码的情况"></a>没有初始密码的情况</h2><p>这种情况我遇见很多次了，不知道原因是什么<br>但是如果没有让你设置初始密码，那么理论上第一次登录你输入什么密码都会登录成功，这也是给你修改密码的机会。</p><h2 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h2><p>修改密码操作如下：<br><pre class="language-none"><code class="language-none">mysql&gt; use mysql;mysql&gt; alter user &#39;root&#39;@&#39;localhost&#39; identified by &#39;你的新密码&#39;;mysql&gt; flush privileges;</code></pre><br>然后退出数据库重新登录，输入你刚才设置的密码，即可登录成功。</p><p><strong>登录失败有如下可能性：</strong></p><blockquote><ol><li>你的密码输入错误，谁是小丑我不说</li><li>如果你登录时没有加sudo，试着使用sudo进行登录。如果使用sudo才可以登录成功，那么其他连接数据库的接口，比如jdbc，大概率是无法连接数据库的，这种情况看下一节：<strong>远程访问</strong></li></ol></blockquote><p>如果你比上面说的还要小丑：密码记不住了，可以用如下两种方法之一来登录mysql：<br><img src="./小丑.png" alt="小丑竟在我身边"></p><h3 id="1-默认账户登录"><a href="#1-默认账户登录" class="headerlink" title="1.默认账户登录"></a>1.默认账户登录</h3><p>mysql会创建一个默认账户，账户密码存放在 <strong>/etc/mysql/debian.cnf</strong>文件内：<br><pre class="language-none"><code class="language-none">sudo cat &#x2F;etc&#x2F;mysql&#x2F;debian.cnf# 输出如下：# Automatically generated for Debian scripts. DO NOT TOUCH![client]host     &#x3D; localhostuser     &#x3D; debian-sys-maint  #用户名password &#x3D; UXuglBQfbMeF4aEu  #密码，这个密码每次安装都不一样，不要直接复制我的socket   &#x3D; &#x2F;var&#x2F;run&#x2F;mysqld&#x2F;mysqld.sock[mysql_upgrade]host     &#x3D; localhostuser     &#x3D; debian-sys-maintpassword &#x3D; UXuglBQfbMeF4aEusocket   &#x3D; &#x2F;var&#x2F;run&#x2F;mysqld&#x2F;mysqld.sock</code></pre><br>按照这个用户名密码登录：<br><pre class="language-none"><code class="language-none">mysql -u debian-sys-maint -p UXuglBQfbMeF4aEu</code></pre></p><p>之后按照上面的方法改密码即可。</p><h3 id="2-免密登录"><a href="#2-免密登录" class="headerlink" title="2. 免密登录"></a>2. 免密登录</h3><p>在<code>/etc/mysql/mysql.conf.d/mysqld.cnf</code>文件的最后一行添加：<code>skip-grant-tables</code><br>重启数据库：<br><pre class="language-none"><code class="language-none">systemctl restart mysql</code></pre><br>再次登录数据库，随便输入一个密码就可。<br>修改完密码之后，把<code>/etc/mysql/mysql.conf.d/mysqld.cnf</code>还原，再次重启数据库即可。</p><h2 id="远程访问"><a href="#远程访问" class="headerlink" title="远程访问"></a>远程访问</h2><p>防火墙这里先不提，需要提前配置好防火墙，开放端口。<br>远程访问mysql至少需要满足两个条件：</p><h3 id="1-配置用户允许访问的ip地址"><a href="#1-配置用户允许访问的ip地址" class="headerlink" title="1.配置用户允许访问的ip地址"></a>1.配置用户允许访问的ip地址</h3><p>mysql8默认只有本机可以访问，如果需要从其他机器远程访问数据库，需要进行配置。<br>登录数据库，查看权限表：<br><pre class="language-none"><code class="language-none">mysql -u root -pmysql&gt; use mysql;mysql&gt; select user,host from user where user&#x3D;&#39;root&#39;;</code></pre><br>会查询到如下结果：<br><pre class="language-none"><code class="language-none">+------+-----------------+| user | host            |+------+-----------------+|root  | localhost       |+------+-----------------+1 row in set (0.00sec)</code></pre><br>这里可以看到root用户的host字段是localhost，代表root用户只有本机可以访问。把它改成%（代表所有ip地址）：<br><pre class="language-none"><code class="language-none">update user set host &#x3D; &#39;%&#39; where user &#x3D;&#39;root&#39;;flush privileges;</code></pre></p><h3 id="2-若只有sudo才可以登录成功"><a href="#2-若只有sudo才可以登录成功" class="headerlink" title="2.若只有sudo才可以登录成功"></a>2.若只有sudo才可以登录成功</h3><p>需要修改一下用户的认证方式为<code>mysql_native_password</code><br>运行如下命令：<br><pre class="language-none"><code class="language-none">mysql&gt; use mysql;mysql&gt; alter user &#39;root&#39;@&#39;%&#39; identified with mysql_native_passwordmysql&gt; flush privileges;</code></pre></p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>支持cuda的opencv编译流程</title>
      <link href="/2023/04/21/zhi-chi-cuda-de-opencv-bian-yi-liu-cheng/"/>
      <url>/2023/04/21/zhi-chi-cuda-de-opencv-bian-yi-liu-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="支持cuda的opencv编译流程"><a href="#支持cuda的opencv编译流程" class="headerlink" title="支持cuda的opencv编译流程"></a>支持cuda的opencv编译流程</h1><p>本文中所需文件已上传百度网盘，包括opencv压缩包和编译所需文件，链接如下：<br><a href="https://pan.baidu.com/s/1ldnmpgnLIU63MDLOajUp6w">https://pan.baidu.com/s/1ldnmpgnLIU63MDLOajUp6w</a><br>提取码：bjb6</p><h2 id="操作环境"><a href="#操作环境" class="headerlink" title="操作环境"></a>操作环境</h2><ol><li>显卡：<strong>NVIDIA GeForce RTX 3060</strong></li><li>CUDA版本：<strong>CUDA 11.1</strong></li><li>操作系统： <strong>centos7</strong></li></ol><h2 id="cuda和cudnn安装请看我的另一篇博客"><a href="#cuda和cudnn安装请看我的另一篇博客" class="headerlink" title="cuda和cudnn安装请看我的另一篇博客"></a>cuda和cudnn安装请看我的另一篇博客</h2><h3 id="温馨提示，在编译支持cuda的opencv之前，要先安装好cuda和cudnn，不然会报错的呢"><a href="#温馨提示，在编译支持cuda的opencv之前，要先安装好cuda和cudnn，不然会报错的呢" class="headerlink" title="温馨提示，在编译支持cuda的opencv之前，要先安装好cuda和cudnn，不然会报错的呢~"></a>温馨提示，在编译支持cuda的opencv之前，要先安装好cuda和cudnn，不然会报错的呢~</h3><h2 id="一、下载源文件"><a href="#一、下载源文件" class="headerlink" title="一、下载源文件"></a>一、下载源文件</h2><p>opencv源文件官网链接如下，选择Sources版本下载即可，网盘中附带4.4.0版本：<br><a href="https://opencv.org/releases/">Opencv官方下载地址</a><br>下载Contrib对应版本：<br><a href="https://github.com/opencv/opencv_contrib/releases">Opencv_Contrib下载地址</a></p><h2 id="二、解压"><a href="#二、解压" class="headerlink" title="二、解压"></a>二、解压</h2><p>下载到的是zip格式的压缩包，使用unzip命令解压即可，解压到你想的位置，本文中一用户主目录(/home/dfy)为例：<br><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">unzip</span> opencv-4.4.0.zip<span class="token function">unzip</span> opencv_contrib-4.4.0.zip</code></pre></p><h2 id="三、安装需要的依赖"><a href="#三、安装需要的依赖" class="headerlink" title="三、安装需要的依赖"></a>三、安装需要的依赖</h2><h3 id="centos系统"><a href="#centos系统" class="headerlink" title="centos系统"></a>centos系统</h3><p>组内的服务器使用的是centos7系统，需要安装的依赖如下：<br><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> yum <span class="token parameter variable">-y</span> <span class="token function">install</span> epel-release<span class="token function">sudo</span> yum <span class="token parameter variable">-y</span> <span class="token function">install</span> <span class="token function">git</span> gcc gcc-c++ cmake3 <span class="token comment"># 看到这里的gcc了吗，没错，这里隐藏着一个陨石坑，在后续安装记录章节细说</span><span class="token function">sudo</span> yum <span class="token parameter variable">-y</span> <span class="token function">install</span> qt5-qtbase-devel<span class="token function">sudo</span> yum <span class="token function">install</span> <span class="token parameter variable">-y</span> python34 python34-devel python34-pip<span class="token function">sudo</span> yum <span class="token function">install</span> <span class="token parameter variable">-y</span> python python-devel python-pip<span class="token function">sudo</span> yum <span class="token parameter variable">-y</span> <span class="token function">install</span> python-devel numpy python34-numpy<span class="token function">sudo</span> yum <span class="token parameter variable">-y</span> <span class="token function">install</span> gtk2-devel<span class="token function">sudo</span> yum <span class="token function">install</span> <span class="token parameter variable">-y</span> libpng-devel<span class="token function">sudo</span> yum <span class="token function">install</span> <span class="token parameter variable">-y</span> jasper-devel<span class="token function">sudo</span> yum <span class="token function">install</span> <span class="token parameter variable">-y</span> openexr-devel<span class="token function">sudo</span> yum <span class="token function">install</span> <span class="token parameter variable">-y</span> libwebp-devel<span class="token function">sudo</span> yum <span class="token parameter variable">-y</span> <span class="token function">install</span> libjpeg-turbo-devel <span class="token function">sudo</span> yum <span class="token function">install</span> <span class="token parameter variable">-y</span> freeglut-devel mesa-libGL mesa-libGL-devel<span class="token function">sudo</span> yum <span class="token parameter variable">-y</span> <span class="token function">install</span> libtiff-devel <span class="token function">sudo</span> yum <span class="token parameter variable">-y</span> <span class="token function">install</span> libdc1394-devel<span class="token function">sudo</span> yum <span class="token parameter variable">-y</span> <span class="token function">install</span> tbb-devel eigen3-devel<span class="token function">sudo</span> yum <span class="token parameter variable">-y</span> <span class="token function">install</span> boost boost-thread boost-devel<span class="token function">sudo</span> yum <span class="token parameter variable">-y</span> <span class="token function">install</span> libv4l-devel<span class="token function">sudo</span> yum <span class="token parameter variable">-y</span> <span class="token function">install</span> gstreamer-plugins-base-devel</code></pre><br>安装编译所需要的cmake3(centos7系统有点老了，默认的cmake版本不够，需要指定cmake3)<br><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> yum <span class="token function">install</span> epel-release<span class="token function">sudo</span> yum <span class="token function">install</span> cmake3</code></pre></p><p>安装tesseract<br><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 搜索「tesseract」</span>yum search tesseract<span class="token comment">#安装「tesseract.x86_64」</span>yum <span class="token function">install</span> tesseract.x86_64 tesseract-devel.x86_64 <span class="token comment">#安装「tesseract-langpack-chi_sim.noarch」中文字库</span>yum <span class="token function">install</span> tesseract-langpack-chi_sim.noarch<span class="token comment">#检查「tesseract」支持的语言</span>tesseract --list-langs</code></pre></p><h3 id="ubuntu系统"><a href="#ubuntu系统" class="headerlink" title="ubuntu系统"></a>ubuntu系统</h3><pre class="language-none"><code class="language-none">$ sudo apt-get update$ sudo apt-get upgrade$ sudo apt-get install build-essential cmake unzip pkg-config$ sudo apt-get install libjpeg-dev libpng-dev libtiff-dev$ sudo apt-get install libavcodec-dev libavformat-dev libswscale-dev$ sudo apt-get install libv4l-dev libxvidcore-dev libx264-dev$ sudo apt-get install libgtk-3-dev$ sudo apt-get install libatlas-base-dev gfortran$ sudo apt-get install python3-dev</code></pre><h3 id="安装numpy"><a href="#安装numpy" class="headerlink" title="安装numpy"></a>安装numpy</h3><pre class="language-none"><code class="language-none"># 执行这一步之前，激活你要使用的python虚拟环境pip install numpy</code></pre><h2 id="四、执行cmake"><a href="#四、执行cmake" class="headerlink" title="四、执行cmake"></a>四、执行cmake</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 进入opencv的解压目录</span><span class="token builtin class-name">cd</span> ~/opencv-4.4.0<span class="token comment"># 创建构建目录build（这里build目录名称随意）</span><span class="token function">mkdir</span> build<span class="token builtin class-name">cd</span> build<span class="token comment"># 执行cmake</span><span class="token comment"># 这里一些参数的配置一定要仔细再仔细</span><span class="token comment"># 我的参数配置如下</span><span class="token comment"># centos系统如果提示cmake版本不够，这里输入cmake3</span>cmake <span class="token parameter variable">-D</span> <span class="token assign-left variable">CMAKE_BUILD_TYPE</span><span class="token operator">=</span>RELEASE <span class="token punctuation">\</span>        <span class="token parameter variable">-D</span> <span class="token assign-left variable">CMAKE_INSTALL_PREFIX</span><span class="token operator">=</span>/usr/local <span class="token punctuation">\</span>        <span class="token parameter variable">-D</span> <span class="token assign-left variable">INSTALL_PYTHON_EXAMPLES</span><span class="token operator">=</span>ON <span class="token punctuation">\</span>        <span class="token parameter variable">-D</span> <span class="token assign-left variable">INSTALL_C_EXAMPLES</span><span class="token operator">=</span>OFF <span class="token punctuation">\</span>        <span class="token parameter variable">-D</span> <span class="token assign-left variable">OPENCV_ENABLE_NONFREE</span><span class="token operator">=</span>ON <span class="token punctuation">\</span>        <span class="token parameter variable">-D</span> <span class="token assign-left variable">WITH_CUDA</span><span class="token operator">=</span>ON <span class="token punctuation">\</span>        <span class="token parameter variable">-D</span> <span class="token assign-left variable">WITH_CUDNN</span><span class="token operator">=</span>ON <span class="token punctuation">\</span>        <span class="token parameter variable">-D</span> <span class="token assign-left variable">OPENCV_DNN_CUDA</span><span class="token operator">=</span>ON <span class="token punctuation">\</span>        <span class="token parameter variable">-D</span> <span class="token assign-left variable">ENABLE_FAST_MATH</span><span class="token operator">=</span><span class="token number">1</span> <span class="token punctuation">\</span>        <span class="token parameter variable">-D</span> <span class="token assign-left variable">CUDA_FAST_MATH</span><span class="token operator">=</span><span class="token number">1</span> <span class="token punctuation">\</span>        <span class="token parameter variable">-D</span> <span class="token assign-left variable">CUDA_ARCH_BIN</span><span class="token operator">=</span><span class="token number">8.6</span> <span class="token punctuation">\</span>        <span class="token parameter variable">-D</span> <span class="token assign-left variable">WITH_CUBLAS</span><span class="token operator">=</span><span class="token number">1</span> <span class="token punctuation">\</span>        <span class="token parameter variable">-D</span> <span class="token assign-left variable">OPENCV_EXTRA_MODULES_PATH</span><span class="token operator">=~</span>/opencv_contrib-4.4.0/modules <span class="token punctuation">\</span>        <span class="token parameter variable">-D</span> <span class="token assign-left variable">HAVE_opencv_python3</span><span class="token operator">=</span>ON <span class="token punctuation">\</span>        <span class="token parameter variable">-D</span> <span class="token assign-left variable">PYTHON_EXECUTABLE</span><span class="token operator">=</span>/usr/local/bin/python3 <span class="token punctuation">\</span>        <span class="token parameter variable">-D</span> <span class="token assign-left variable">BUILD_EXAMPLES</span><span class="token operator">=</span>ON <span class="token punctuation">..</span>       <span class="token punctuation">..</span></code></pre><p>详细解释一下命令中各个参数选取的注意事项：</p><blockquote><ol><li>OPENCV_EXTRA_MODULES_PATH，翻译过来就是opencv额外模块路径，这个模块就是我们下载的Contrib模块。所以这项参数填写你的opencv_contrib目录下modules文件夹的路径。如果你是按照上面的教程走的，那么它现在应该在你的用户主目录下：~/opencv_contrib-4.4.0/modules。</li><li>PYTHON_EXECUTABLE，python虚拟环境路径，它需要指向你的环境中python的可执行文件。若是anaconda的虚拟环境，它一般在虚拟环境目录下的bin目录下：~/anaconda3/envs/mouse/bin/python3.9,或者是系统的python3：/usr/local/bin/python3(不建议，我虽然是这么做的，但是我是在docker镜像内操作，系统本身的python关系到系统的运行，比较危险，如果实在要用，可以安装一下其他版本的python，用其他版本来操作)<br>python版本可能很多，指定你所需版本的python可执行文件。</li><li>CUDA_ARCH_BIN，这里指的是你的cuda版本对应的算力级别。去<a href="https://developer.nvidia.com/cuda-gpus#collapseOne">cuda官网</a>查看一下。组内服务器的显卡是3090，cuda版本我装的是11.1，官网上写着对应的算力级别为8.6，所以这里填8.6。</li><li>命令最后两个点不能落下，这两个点代表相对路径。</li></ol></blockquote><p>以上是实际应用中需要自己确定的问题，其他的按照我写的命令复制即可。<br>我在执行cmake的时候报了一些错误，很多个failed，但是实际使用并没什么问题。<br>如果你执行命令之后，发现你的cmake参数配置有错误，那么你需要删除build目录重新执行这一步骤。</p><p><strong>在执行下一步之前，你需要检查cmake的输出，有个至关重要的点：</strong><br>检查cmake输出中有没有这个模块：<br><pre class="language-none"><code class="language-none">--   Python 3:--     Interpreter:                 &#x2F;usr&#x2F;local&#x2F;bin&#x2F;python3 (ver 3.9.16)--     Libraries:                   &#x2F;usr&#x2F;local&#x2F;lib&#x2F;libpython3.9.so (ver 3.9.16)--     numpy:                       &#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.9&#x2F;site-packages&#x2F;numpy&#x2F;core&#x2F;include (ver 1.24.2)--     install path:                lib&#x2F;python3.9&#x2F;site-packages&#x2F;cv2&#x2F;python-3.9</code></pre><br>如果没有这一块，没必要往下走了，因为安装完也没有用。你需要检查你的python环境是否具有python3的条件。<br>这里输出的<code>install path</code>后面要用到，先记下来。</p><p>其他的信息你可以检查一下你配置是否正确，例如下面：<br><pre class="language-none"><code class="language-none">NVIDIA CUDA:                   YES (ver 11.1, CUFFT CUBLAS FAST_MATH)  NVIDIA GPU arch:             86  NVIDIA PTX archs:  cuDNN:                         YES (ver 8.7.0)</code></pre></p><h2 id="五、安装"><a href="#五、安装" class="headerlink" title="五、安装"></a>五、安装</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">make</span> -j<span class="token variable"><span class="token variable">$(</span>nproc<span class="token variable">)</span></span></code></pre><p>安装过程中也会踩很多很多很多很多很多的陨石坑，在这里记录一下（本人被折磨的不轻）</p><h3 id="1-Unsupported-gpu-architecture-‘compute-30’"><a href="#1-Unsupported-gpu-architecture-‘compute-30’" class="headerlink" title="1.Unsupported gpu architecture ‘compute_30’"></a>1.Unsupported gpu architecture ‘compute_30’</h3><p>翻译过来就是gpu算力不支持，说明你在cmake的CUDA_ARCH_BIN设置和你的显卡和cuda不匹配，去<a href="https://developer.nvidia.com/cuda-gpus#collapseOne">cuda官网</a>找你的显卡对应的算力。</p><h3 id="2-error-“OpenCV-4-x-requires-enabled-C-11-support”"><a href="#2-error-“OpenCV-4-x-requires-enabled-C-11-support”" class="headerlink" title="2.# error “OpenCV 4.x+ requires enabled C++11 support”"></a>2.# error “OpenCV 4.x+ requires enabled C++11 support”</h3><p>这句话意思是opencv4以上的版本需要c++11才可以编译。<br>所以这里我去看一下gcc的版本，看看支不支持c++11.<br>gcc的版本是4.8.5，按理说应该是支持c++11的，但是这里编译就是过不了。<br>网络上的解决办法是在编译的时候加上<code>-std=c++11</code>这个选项。<br>但是编译语句都是cmake自动生成的，那么多语句，要找到猴年马月。<br>一度怀疑人生。</p><p>后来我仔细看了下报错信息，发现在之前还有这样一句话：<br><code>nvcc warning : The -std=c++14 flag is not supported with the configured host compiler. Flag will be ignored.</code><br>这句话后面几行才打出<code># error &quot;OpenCV 4.x+ requires enabled C++11 support&quot;</code>这句话，那么说明根源在上面那句。</p><p>这句话的意思是，编译选项<code>-std=c++14</code>不支持，所以该选项被忽略。<br>说明编译语句中写的是<code>-std=c++14</code>，而不是<code>-std=c++11</code>，说明尽管gcc4.8.5支持c++11，它还是没有办法去调用，因为编译语句没有指定。<br>那么从根源解决问题，升高gcc版本，让它支持c++14，该问题才能得到解决。</p><p>所以我把gcc版本升级到了9.3.0，该错误消失了。</p><p>真好啊，ctmd，浪费老子半天。</p><p>gcc安装教程参考博客<a href="https://blog.csdn.net/zblock0/article/details/107032359">https://blog.csdn.net/zblock0/article/details/107032359</a></p><h3 id="3-fatal-error-boostdesc-bgm-i-no-such-file-or-directory"><a href="#3-fatal-error-boostdesc-bgm-i-no-such-file-or-directory" class="headerlink" title="3. fatal error: boostdesc_bgm.i:no such file or directory"></a>3. fatal error: boostdesc_bgm.i:no such file or directory</h3><p>说明缺少一些依赖文件。文件在文章开始的百度网盘提供了。把所有的.i文件复制到opencv_contrib/modules/xfeatures2d/src/目录下即可。</p><h3 id="4-fatal-error-features2d-test-test-detectors-regression-impl-hpp-no-such-file-or-directory"><a href="#4-fatal-error-features2d-test-test-detectors-regression-impl-hpp-no-such-file-or-directory" class="headerlink" title="4. fatal error: features2d/test/test_detectors_regression.impl.hpp:no such file or directory"></a>4. fatal error: features2d/test/test_detectors_regression.impl.hpp:no such file or directory</h3><p>依旧是缺少文件，这个文件在opencv的modules目录下其实已经提供了，是路径的问题。所以复制一下：<br><code>cp -r ../modules/features2d ./</code></p><p>所有这种缺少文件的报错，都可以去找一下这个文件的名字，如果在opencv或者contrib中提供了，复制过去就好。</p><h3 id="5-CMakeFiles-example-gpu-surf-keypoint-matcher-dir-surf-keypoint-matcher-cpp-o-In-function-main’"><a href="#5-CMakeFiles-example-gpu-surf-keypoint-matcher-dir-surf-keypoint-matcher-cpp-o-In-function-main’" class="headerlink" title="5.CMakeFiles/example_gpu_surf_keypoint_matcher.dir/surf_keypoint_matcher.cpp.o: In function `main’"></a>5.CMakeFiles/example_gpu_surf_keypoint_matcher.dir/surf_keypoint_matcher.cpp.o: In function `main’</h3><p>完整报错信息如下：<br><pre class="language-none"><code class="language-none">CMakeFiles&#x2F;example_gpu_surf_keypoint_matcher.dir&#x2F;surf_keypoint_matcher.cpp.o: In function &#96;main&#39;:surf_keypoint_matcher.cpp:(.text.startup.main+0x352): undefined reference to &#96;cv::cuda::SURF_CUDA::SURF_CUDA()&#39;surf_keypoint_matcher.cpp:(.text.startup.main+0x579): undefined reference to &#96;cv::cuda::SURF_CUDA::operator()(cv::cuda::GpuMat const&amp;, cv::cuda::GpuMat const&amp;, cv::cuda::GpuMat&amp;, cv::cuda::GpuMat&amp;, bool)&#39;surf_keypoint_matcher.cpp:(.text.startup.main+0x60d): undefined reference to &#96;cv::cuda::SURF_CUDA::operator()(cv::cuda::GpuMat const&amp;, cv::cuda::GpuMat const&amp;, cv::cuda::GpuMat&amp;, cv::cuda::GpuMat&amp;, bool)&#39;surf_keypoint_matcher.cpp:(.text.startup.main+0x6af): undefined reference to &#96;cv::cuda::SURF_CUDA::defaultNorm() const&#39;surf_keypoint_matcher.cpp:(.text.startup.main+0x7ca): undefined reference to &#96;cv::cuda::SURF_CUDA::downloadKeypoints(cv::cuda::GpuMat const&amp;, std::vector&lt;cv::KeyPoint, std::allocator&lt;cv::KeyPoint&gt; &gt;&amp;)&#39;surf_keypoint_matcher.cpp:(.text.startup.main+0x7ea): undefined reference to &#96;cv::cuda::SURF_CUDA::downloadKeypoints(cv::cuda::GpuMat const&amp;, std::vector&lt;cv::KeyPoint, std::allocator&lt;cv::KeyPoint&gt; &gt;&amp;)&#39;surf_keypoint_matcher.cpp:(.text.startup.main+0x800): undefined reference to &#96;cv::cuda::SURF_CUDA::downloadDescriptors(cv::cuda::GpuMat const&amp;, std::vector&lt;float, std::allocator&lt;float&gt; &gt;&amp;)&#39;surf_keypoint_matcher.cpp:(.text.startup.main+0x812): undefined reference to &#96;cv::cuda::SURF_CUDA::downloadDescriptors(cv::cuda::GpuMat const&amp;, std::vector&lt;float, std::allocator&lt;float&gt; &gt;&amp;)&#39;collect2: error: ld returned 1 exit statussamples&#x2F;gpu&#x2F;CMakeFiles&#x2F;example_gpu_surf_keypoint_matcher.dir&#x2F;build.make:132: recipe for target &#39;bin&#x2F;example_gpu_surf_keypoint_matcher&#39; failedmake[2]: *** [bin&#x2F;example_gpu_surf_keypoint_matcher] Error 1</code></pre><br>解决方法：<br>先去你的build目录下找到这个文件:</p><pre><code class="lang-&lt;build_dir&gt;/samples/gpu/CMakeFiles/example_gpu_surf_keypoint_matcher.dir/link.txt```">在这个文件里，搜索到```--as-needed CMakeFiles/example_gpu_surf_keypoint_matcher.dir/surf_keypoint_matcher.cpp.o```这一句之后加上```&lt;build_dir&gt;/modules/xfeatures2d/CMakeFiles/opencv_xfeatures2d.dir/src/surf.cuda.cpp.o &lt;build_dir&gt;/modules/xfeatures2d/CMakeFiles/cuda_compile_1.dir/src/cuda/cuda_compile_1_generated_surf.cu.o</code></pre><p>其中，<build_dir>是你的构建路径，也就是第四步中创建的build文件夹。</p><h3 id="6-libopencv-imgcodecs-so-4-2-0-undefined-reference-to-TIFFReadRGBAStrip-LIBTIFF-4-0"><a href="#6-libopencv-imgcodecs-so-4-2-0-undefined-reference-to-TIFFReadRGBAStrip-LIBTIFF-4-0" class="headerlink" title="6.libopencv_imgcodecs.so.4.2.0: undefined reference to `TIFFReadRGBAStrip@LIBTIFF_4.0"></a>6.libopencv_imgcodecs.so.4.2.0: undefined reference to `TIFFReadRGBAStrip@LIBTIFF_4.0</h3><p>完整报错信息：<br> <pre class="language-none"><code class="language-none">&#x2F;usr&#x2F;local&#x2F;lib&#x2F;libopencv_imgcodecs.so.4.2.0: undefined reference to &#96;TIFFReadRGBAStrip@LIBTIFF_4.0&#39;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;libopencv_imgcodecs.so.4.2.0: undefined reference to &#96;TIFFReadDirectory@LIBTIFF_4.0&#39;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;libopencv_imgcodecs.so.4.2.0: undefined reference to &#96;TIFFWriteEncodedStrip@LIBTIFF_4.0&#39;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;libopencv_imgcodecs.so.4.2.0: undefined reference to &#96;TIFFIsTiled@LIBTIFF_4.0&#39;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;libopencv_imgcodecs.so.4.2.0: undefined reference to &#96;TIFFWriteScanline@LIBTIFF_4.0&#39;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;libopencv_imgcodecs.so.4.2.0: undefined reference to &#96;TIFFGetField@LIBTIFF_4.0&#39;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;libopencv_imgcodecs.so.4.2.0: undefined reference to &#96;TIFFScanlineSize@LIBTIFF_4.0&#39;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;libopencv_imgcodecs.so.4.2.0: undefined reference to &#96;TIFFWriteDirectory@LIBTIFF_4.0&#39;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;libopencv_imgcodecs.so.4.2.0: undefined reference to &#96;TIFFReadEncodedTile@LIBTIFF_4.0&#39;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;libopencv_imgcodecs.so.4.2.0: undefined reference to &#96;TIFFReadRGBATile@LIBTIFF_4.0&#39;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;libopencv_imgcodecs.so.4.2.0: undefined reference to &#96;TIFFClose@LIBTIFF_4.0&#39;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;libopencv_imgcodecs.so.4.2.0: undefined reference to &#96;TIFFClientOpen@LIBTIFF_4.0&#39;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;libopencv_imgcodecs.so.4.2.0: undefined reference to &#96;TIFFRGBAImageOK@LIBTIFF_4.0&#39;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;libopencv_imgcodecs.so.4.2.0: undefined reference to &#96;TIFFOpen@LIBTIFF_4.0&#39;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;libopencv_imgcodecs.so.4.2.0: undefined reference to &#96;TIFFReadEncodedStrip@LIBTIFF_4.0&#39;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;libopencv_imgcodecs.so.4.2.0: undefined reference to &#96;TIFFSetField@LIBTIFF_4.0&#39;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;libopencv_imgcodecs.so.4.2.0: undefined reference to &#96;TIFFSetWarningHandler@LIBTIFF_4.0&#39;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;libopencv_imgcodecs.so.4.2.0: undefined reference to &#96;TIFFSetErrorHandler@LIBTIFF_4.0</code></pre></p><p> 库引用的问题，从报错信息中可以看到是<code>libopencv_imgcodecs.so.4.2.0</code>这个库引用不到一个名字含有<code>TIFF</code>的库。<br> 首先你要检查依赖：<code>libtiff-dev</code>是否正确安装。<br> 如果正确安装后还是出现这个问题，那么可能是你的python环境下没有这个库，你需要复制一份到你的python环境下。<br> 具体操作如下：<br><pre class="language-none"><code class="language-none"># 先查看报错信息，发现是&#96;&#96;&#96;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;libopencv_imgcodecs.so.4.2.0&#96;&#96;&#96;库引用不到其他库# 查看这个库的依赖ldd &#x2F;usr&#x2F;local&#x2F;lib&#x2F;libopencv_imgcodecs.so.4.2.0# 输出如下linux-vdso.so.1 &#x3D;&gt;  (0x00007ffdc29f5000)      libopencv_imgproc.so.4.2 &#x3D;&gt; &#x2F;usr&#x2F;local&#x2F;lib&#x2F;libopencv_imgproc.so.4.2 (0x00007fc9c680c000)      libjpeg.so.8 &#x3D;&gt; &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libjpeg.so.8 (0x00007fc9c65b3000)      libpng12.so.0 &#x3D;&gt; &#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libpng12.so.0 (0x00007fc9c638e000)      libtiff.so.5 &#x3D;&gt; &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libtiff.so.5 (0x00007fc9c6119000)      libjasper.so.1 &#x3D;&gt; &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libjasper.so.1 (0x00007fc9c5ec4000)      libIlmImf-2_2.so.22 &#x3D;&gt; &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libIlmImf-2_2.so.22 (0x00007fc9c59f5000)      libopencv_core.so.4.2 &#x3D;&gt; &#x2F;usr&#x2F;local&#x2F;lib&#x2F;libopencv_core.so.4.2 (0x00007fc9c5318000)      libstdc++.so.6 &#x3D;&gt; &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libstdc++.so.6 (0x00007fc9c4f96000)      libm.so.6 &#x3D;&gt; &#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libm.so.6 (0x00007fc9c4c8d000)      libgcc_s.so.1 &#x3D;&gt; &#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libgcc_s.so.1 (0x00007fc9c4a77000)      libpthread.so.0 &#x3D;&gt; &#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libpthread.so.0 (0x00007fc9c485a000)      libc.so.6 &#x3D;&gt; &#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libc.so.6 (0x00007fc9c4490000)      libz.so.1 &#x3D;&gt; &#x2F;usr&#x2F;local&#x2F;lib&#x2F;libz.so.1 (0x00007fc9c4272000)      liblzma.so.5 &#x3D;&gt; &#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;liblzma.so.5 (0x00007fc9c4050000)      libjbig.so.0 &#x3D;&gt; &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libjbig.so.0 (0x00007fc9c3e42000)      libHalf.so.12 &#x3D;&gt; &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libHalf.so.12 (0x00007fc9c3bff000)      libIex-2_2.so.12 &#x3D;&gt; &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libIex-2_2.so.12 (0x00007fc9c39e1000)      libIlmThread-2_2.so.12 &#x3D;&gt; &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libIlmThread-2_2.so.12 (0x00007fc9c37da000)      libdl.so.2 &#x3D;&gt; &#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libdl.so.2 (0x00007fc9c35d6000)      librt.so.1 &#x3D;&gt; &#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;librt.so.1 (0x00007fc9c33ce000)      libGL.so.1 &#x3D;&gt; &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;mesa&#x2F;libGL.so.1 (0x00007fc9c315a000)      &#x2F;lib64&#x2F;ld-linux-x86-64.so.2 (0x00007fc9c73b1000)      libexpat.so.1 &#x3D;&gt; &#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libexpat.so.1 (0x00007fc9c2f31000)      libxcb-dri3.so.0 &#x3D;&gt; &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libxcb-dri3.so.0 (0x00007fc9c2d2e000)      libxcb-present.so.0 &#x3D;&gt; &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libxcb-present.so.0 (0x00007fc9c2b2b000)      libxcb-sync.so.1 &#x3D;&gt; &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libxcb-sync.so.1 (0x00007fc9c2924000)      libxshmfence.so.1 &#x3D;&gt; &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libxshmfence.so.1 (0x00007fc9c2721000)      libglapi.so.0 &#x3D;&gt; &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libglapi.so.0 (0x00007fc9c24f0000)      libXext.so.6 &#x3D;&gt; &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libXext.so.6 (0x00007fc9c22de000)      libXdamage.so.1 &#x3D;&gt; &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libXdamage.so.1 (0x00007fc9c20db000)      libXfixes.so.3 &#x3D;&gt; &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libXfixes.so.3 (0x00007fc9c1ed5000)      libX11-xcb.so.1 &#x3D;&gt; &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libX11-xcb.so.1 (0x00007fc9c1cd3000)      libX11.so.6 &#x3D;&gt; &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libX11.so.6 (0x00007fc9c1999000)      libxcb-glx.so.0 &#x3D;&gt; &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libxcb-glx.so.0 (0x00007fc9c1780000)      libxcb-dri2.so.0 &#x3D;&gt; &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libxcb-dri2.so.0 (0x00007fc9c157b000)      libxcb.so.1 &#x3D;&gt; &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libxcb.so.1 (0x00007fc9c1359000)      libXxf86vm.so.1 &#x3D;&gt; &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libXxf86vm.so.1 (0x00007fc9c1153000)      libdrm.so.2 &#x3D;&gt; &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libdrm.so.2 (0x00007fc9c0f41000)      libXau.so.6 &#x3D;&gt; &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libXau.so.6 (0x00007fc9c0d3d000)      libXdmcp.so.6 &#x3D;&gt; &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libXdmcp.so.6 (0x00007fc9c0b37000)# 你需要在这些依赖中找到报错信息中找不到的那个库。# 这个库在这里：libtiff.so.5 &#x3D;&gt; &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libtiff.so.5 (0x00007fc9c6119000)# 把这个库复制到你的python环境下：sudo cp &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libtiff.so.5 &#x2F;usr&#x2F;local&#x2F;lib&#x2F;libtiff.so.5</code></pre></p><p>不出意外的话应该是没什么其他的问题了。</p><p>make完成后，执行：<br><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">make</span> <span class="token function">install</span></code></pre></p><h2 id="六、链接动态库"><a href="#六、链接动态库" class="headerlink" title="六、链接动态库"></a>六、链接动态库</h2><p>安装完成后，在之前cmake输出的python3 <code>install path</code>路径下，会出现一个库：<br>我之前这里输出的<code>install path = lib/python3.9/site-packages/cv2/python-3.9</code>，在这个路径前加上安装前缀<code>CMAKE_INSTALL_PREFIX=/usr/local</code><br><pre class="language-none"><code class="language-none">ls -l &#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.9&#x2F;site-packages&#x2F;cv2&#x2F;python-3.9总计 9540-rw-r--r-- 1 root root 9768648  5月  4 17:51 cv2.cpython-39-x86_64-linux-gnu.so</code></pre><br>把这个库连接到你的python环境下：<br><pre class="language-none"><code class="language-none">cd &#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.9&#x2F;site-packages #这里要看你自己的python环境路径，我是使用的系统的python，所以库直接生成在了我需要的python环境下，这一步对我其实可以省略ln -s &#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.9&#x2F;site-packages&#x2F;cv2&#x2F;python3.9&#x2F;cv2.cpython-39-x86_64-linux-gnu.so cv2.so</code></pre></p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#激活你安装了opencv的虚拟环境，如果你用的系统python，这一步不需要</span>conda activate mouse<span class="token comment">#打开python</span>python<span class="token comment">#测试</span><span class="token function">import</span> cv2cv2.__version__<span class="token comment"># 输出：'4.4.0'</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> opencv </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cuda </tag>
            
            <tag> opencv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>@Async注解失效记录</title>
      <link href="/2023/04/06/async-zhu-jie-shi-xiao-ji-lu/"/>
      <url>/2023/04/06/async-zhu-jie-shi-xiao-ji-lu/</url>
      
        <content type="html"><![CDATA[<h1 id="Async注解失效记录"><a href="#Async注解失效记录" class="headerlink" title="@Async注解失效记录"></a>@Async注解失效记录</h1><p>今天在做项目的时候，遇到了如下情景：</p><blockquote><p>业务场景：<br>系统接入多个监控摄像头，并调用人脸识别算法，若视频中有人经过，启动录像，若无人，十秒后停止录像。</p></blockquote><p>我的做法如下：</p><ul><li>使用一个类<code>VideoRecorderService</code>来记录一个录制任务，它的部分代码如下：</li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">String</span> inputFile<span class="token punctuation">;</span><span class="token comment">//文件输入路径</span><span class="token keyword">private</span> <span class="token class-name">String</span> outputFile<span class="token punctuation">;</span><span class="token comment">//视频保存路径</span><span class="token keyword">private</span> <span class="token keyword">boolean</span> status <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">//视频中是否有人</span><span class="token keyword">private</span> <span class="token keyword">boolean</span> recording <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">//是否正在录制</span><span class="token keyword">private</span> <span class="token keyword">long</span> noPersonTime<span class="token punctuation">;</span><span class="token comment">//记录视频中没有人的开始时刻</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> status<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">&amp;&amp;</span> status<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//上一时刻有人且这一时刻没人，记录noPersonTime</span>        noPersonTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"开始录制，noPersonTime="</span><span class="token operator">+</span>noPersonTime<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> status<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Async</span><span class="token punctuation">(</span><span class="token string">"threadPoolTaskExecutor"</span><span class="token punctuation">)</span><span class="token comment">//异步</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">startRecordVideo</span><span class="token punctuation">(</span><span class="token class-name">VideoEntity</span> video<span class="token punctuation">)</span>        <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//此处省略一系列流程</span>    <span class="token comment">//开始录制视频</span>    recording<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token class-name">Frame</span> frame <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>frame <span class="token operator">=</span> grabber<span class="token punctuation">.</span><span class="token function">grabFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//视频帧图像不为空</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>status<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>noPersonTime<span class="token punctuation">)</span><span class="token operator">>=</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span><span class="token number">10</span><span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//没人时间超过10s</span>                    recording<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>                    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"许久无人，停止录制"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            recorder<span class="token punctuation">.</span><span class="token function">record</span><span class="token punctuation">(</span>frame<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//录制该帧</span>        <span class="token punctuation">&#125;</span>    <span class="token comment">//停止录制视频</span><span class="token punctuation">&#125;</span>   </code></pre><blockquote><p>录制视频的方法使用@Async实现异步，但是它失效了。<br>一般@Async注解失效有如下三种原因：</p><ol><li>在需要用到的 @Async 注解的类上加上 @EnableAsync，或者直接加在springboot启动类上；</li><li>异步处理方法（也就是加了 @Async 注解的方法）只能返回的是 void 或者 Future 类型；</li><li>同一个类中调用异步方法需要先获取代理类，因为 @Async 注解是基于Spring AOP （面向切面编程）的，而AOP的实现是基于动态代理模式实现的。有可能因为调用方法的是对象本身而不是代理对象，因为没有经过Spring容器。</li></ol><p>我这里正是第三点出了问题，直接获取了<code>VideoRecorderService</code>对象而不是通过ioc容器获取它的动态代理。</p></blockquote><ul><li>我的错误代码如下：<pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InitFFmpeg</span> <span class="token keyword">implements</span> <span class="token class-name">ApplicationListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ApplicationReadyEvent</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">VideoMapping</span> videoMapping<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">VideoRecorderService</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span><span class="token comment">//该方法在spring容器启动完成后自动调用</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onApplicationEvent</span><span class="token punctuation">(</span><span class="token class-name">ApplicationReadyEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">VideoEntity</span><span class="token punctuation">></span></span> videos <span class="token operator">=</span> videoMapping<span class="token punctuation">.</span><span class="token function">selectAllVideos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//查询摄像头信息</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">VideoEntity</span> video <span class="token operator">:</span> videos<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//初始化map，把摄像头和VideoRecorderService对象关联起来</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>video<span class="token punctuation">.</span><span class="token function">getMonitorName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">VideoRecorderService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//这里是jar包启动就会自动推流</span>                        <span class="token comment">//这里是调用算法的部分</span>                    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>   </code></pre><blockquote><p>由于这里直接new的对象，没有把它注册在ioc容器中，所以@Async失效。</p></blockquote></li><li>解决方法：<br>在<code>VideoConfiguration</code>类中写一个通过spring容器获取和注册bean的方法：<pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VideoConfiguration</span> <span class="token keyword">implements</span> <span class="token class-name">ApplicationContextAware</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">ApplicationContext</span> applicationContext<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setApplicationContext</span><span class="token punctuation">(</span><span class="token class-name">ApplicationContext</span> applicationContext<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">VideoConfiguration</span><span class="token punctuation">.</span>applicationContext <span class="token operator">=</span> applicationContext<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">T</span> <span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> tClass<span class="token punctuation">,</span><span class="token class-name">String</span> beanName<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>applicationContext<span class="token punctuation">.</span><span class="token function">containsBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> tClass<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**    *  动态注入bean    * @param requiredType 注入类    * @param beanName bean名称    */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">registerBean</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> requiredType<span class="token punctuation">,</span><span class="token class-name">String</span> beanName<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//将applicationContext转换为ConfigurableApplicationContext</span>        <span class="token class-name">ConfigurableApplicationContext</span> configurableApplicationContext <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ConfigurableApplicationContext</span><span class="token punctuation">)</span> applicationContext<span class="token punctuation">;</span>        <span class="token comment">//获取BeanFactory</span>        <span class="token class-name">DefaultListableBeanFactory</span> defaultListableBeanFactory <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">DefaultListableBeanFactory</span><span class="token punctuation">)</span> configurableApplicationContext<span class="token punctuation">.</span><span class="token function">getAutowireCapableBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//创建bean信息.</span>        <span class="token class-name">BeanDefinitionBuilder</span> beanDefinitionBuilder <span class="token operator">=</span> <span class="token class-name">BeanDefinitionBuilder</span><span class="token punctuation">.</span><span class="token function">genericBeanDefinition</span><span class="token punctuation">(</span>requiredType<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//动态注册bean.</span>        defaultListableBeanFactory<span class="token punctuation">.</span><span class="token function">registerBeanDefinition</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> beanDefinitionBuilder<span class="token punctuation">.</span><span class="token function">getBeanDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li></ul><blockquote><p>把InitFFmpeg类中的map删掉，并改成动态注册bean对象：</p></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">VideoEntity</span> video <span class="token operator">:</span> videos<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//初始化map，把摄像头和VideoRecorderService对象关联起来</span>    <span class="token comment">//map.put(video.getMonitorName(),new VideoRecorderService());</span>    <span class="token comment">//在ioc容器中注册bean</span>    <span class="token comment">//使用摄像头名称来命名bean对象，在使用时根据名称获取bean</span>    <span class="token class-name">VideoConfiguration</span><span class="token punctuation">.</span><span class="token function">registerBean</span><span class="token punctuation">(</span><span class="token class-name">VideoRecorderService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> video<span class="token punctuation">.</span><span class="token function">getMonitorName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//这里是jar包启动就会自动推流</span>        <span class="token comment">//这里是调用算法的部分</span>    <span class="token punctuation">&#125;</span><span class="token comment">//使用下面的语句获取bean对象：</span><span class="token class-name">VideoRecorderService</span> videoRecorderService <span class="token operator">=</span> <span class="token class-name">VideoConfiguration</span><span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">VideoRecorderService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> video<span class="token punctuation">.</span><span class="token function">getMonitorName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>再次尝试，异步成功，搞定！</p>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> spring boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu20.04下，nginx+ffmpeg+nginx-http-flv-module实现播放视频，docker部署算法的环境配置</title>
      <link href="/2023/03/31/ubuntu20-04-xia-nginx-ffmpeg-nginx-http-flv-module-shi-xian-bo-fang-shi-pin-docker-bu-shu-suan-fa-de-huan-jing-pei-zhi/"/>
      <url>/2023/03/31/ubuntu20-04-xia-nginx-ffmpeg-nginx-http-flv-module-shi-xian-bo-fang-shi-pin-docker-bu-shu-suan-fa-de-huan-jing-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><h1 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h1><h2 id="若以前安装过，先卸载"><a href="#若以前安装过，先卸载" class="headerlink" title="若以前安装过，先卸载"></a>若以前安装过，先卸载</h2><pre class="language-none"><code class="language-none">sudo apt-get --purge remove nginx sudo apt-get --purge remove nginx-common dpkg --get-selections|grep nginx</code></pre><h2 id="1-前置环境"><a href="#1-前置环境" class="headerlink" title="1.前置环境"></a>1.前置环境</h2><pre class="language-none"><code class="language-none">sudo apt-get updatesudo apt-get install gccsudo apt-get install rubysudo apt-get install zlib1gsudo apt-get install zlib1g.devsudo apt-get install libpcre3 libpcre3-devsudo apt-get install openssl libssl-dev</code></pre><h2 id="2-下载nginx源码"><a href="#2-下载nginx源码" class="headerlink" title="2.下载nginx源码"></a>2.下载nginx源码</h2><p>下载地址在<a href="https://nginx.org">https://nginx.org</a><br>我这里1.22.1版本，nginx-1.22.1.tar.gz<br>解压到用户主目录 ~</p><p>注意：如果使用向日葵传输文件夹，文件夹的owner和gruop默认是root，对该文件夹的一切操作都需要root权限。或者也可以使用下面的方法：<br><pre class="language-none"><code class="language-none">sudo chown -R user &lt;文件夹路径&gt;sudo chgrp -R user &lt;文件夹路径&gt;</code></pre></p><h2 id="3-下载nginx-http-flv-module"><a href="#3-下载nginx-http-flv-module" class="headerlink" title="3.下载nginx-http-flv-module"></a>3.下载nginx-http-flv-module</h2><p>我这里下载1.2.10版本nginx-http-flv-module-1.2.10.zip<br>把nginx-http-flv-module解压，移动到/usr/local目录下，并将文件夹改名为：nginx-http-flv-module<br><pre class="language-none"><code class="language-none">sudo mv nginx-http-flv-module-1.2.10 &#x2F;usr&#x2F;local&#x2F;nginx-http-flv-module</code></pre><br>进入nginx目录<br><pre class="language-none"><code class="language-none">cd ~&#x2F;nginx-1.22.1</code></pre><br>将nginx-http-flv-module添加到nginx中<br><pre class="language-none"><code class="language-none">sudo .&#x2F;configure --prefix&#x3D;&#x2F;usr&#x2F;local  --with-http_ssl_module --add-module&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx-http-flv-module</code></pre><br>生成make文件<br><pre class="language-none"><code class="language-none">sudo make</code></pre><br>安装<br><pre class="language-none"><code class="language-none">sudo make install</code></pre><br>测试是否安装成功<br><pre class="language-none"><code class="language-none">nginx -v</code></pre></p><h2 id="4-配置nginx"><a href="#4-配置nginx" class="headerlink" title="4.配置nginx"></a>4.配置nginx</h2><p>需要修改nginx的配置文件，它的位置在nginx-1.22.1/conf/nginx.conf<br>nginx.conf文件内容如下：<br><pre class="language-none"><code class="language-none">worker_processes  10; #should be 1 for Windows, for it doesn&#39;t support Unix domain socket#worker_processes  auto; #from versions 1.3.8 and 1.2.5#worker_cpu_affinity  0001 0010 0100 1000; #only available on FreeBSD and Linux#worker_cpu_affinity  auto; #from version 1.9.10error_log logs&#x2F;error.log error;#if the module is compiled as a dynamic module and features relevant#to RTMP are needed, the command below MUST be specified and MUST be#located before events directive, otherwise the module won&#39;t be loaded#or will be loaded unsuccessfully when NGINX is started#load_module modules&#x2F;ngx_http_flv_live_module.so;events &#123;    worker_connections  10240;&#125;http &#123;    include       mime.types;    default_type  application&#x2F;octet-stream;    sendfile        on;   keepalive_timeout  65;    server &#123;        listen       9000; #http-flv的拉流端口        server_name  localhost【这个地方写你的ip、或者说是域名都是可以的--】; #http-flv的拉流ip        location &#x2F; &#123;            root   html;            index  index.html index.htm;       &#125;            #http-flv的相关配置        location &#x2F;live&#123;                flv_live on; #打开HTTP播放FLV直播流功能                chunked_transfer_encoding  on;                add_header &#39;Access-Control-Allow-Origin&#39; &#39;*&#39;;                add_header &#39;Access-Control-Allow-Credentials&#39; &#39;true&#39;;        &#125;        location &#x2F;hls&#123;                types &#123;                application&#x2F;vnd.apple.mpegurl m3u8;video&#x2F;mp2t ts;                 &#125;                 root ~&#x2F;nginx-1.22.1&#x2F;html&#x2F;hls;                 add_header &#39;Cache-Control&#39; &#39;no-cache&#39;;        &#125;         location &#x2F;dash &#123;            root ~&#x2F;nginx-1.22.1&#x2F;html&#x2F;dash;            add_header &#39;Cache-Control&#39; &#39;no-cache&#39;;        &#125;          location &#x2F;stat &#123;            #configuration of push &amp; pull status              rtmp_stat all;              rtmp_stat_stylesheet stat.xsl;         &#125;        location &#x2F;stat.xsl &#123;          root ~&#x2F;nginx-1.22.1&#x2F;html;        &#125;          location &#x2F;control &#123;            rtmp_control all; #configuration of control module of rtmp&#125;         error_page   500 502 503 504  &#x2F;50x.html;        location &#x3D; &#x2F;50x.html &#123;            root   html;        &#125;    &#125; &#125;rtmp_auto_push on;rtmp_auto_push_reconnect 1s;rtmp_socket_dir &#x2F;tmp;rtmp&#123;        out_queue 4096;        out_cork 8;        max_streams 128;        timeout 15s;        drop_idle_publisher 15s;        log_interval 5s;        log_size 1m;        server&#123;            #推流端口        listen 1935;            #推流应用名称         application myapp&#123;                 live on;  record off;                 gop_cache on;          &#125;         application hls&#123;          live on;          hls on;          hls_path ~&#x2F;nginx-1.22.1&#x2F;html&#x2F;hls;          hls_fragment 1s;                        hls_playlist_length 3s;        &#125;         application dash&#123;           live on;           dash on;           dash_path ~&#x2F;nginx-1.22.1&#x2F;html&#x2F;dash;         &#125;         &#125;&#125;</code></pre><br>文件中有五处路径为~/nginx-1.22.1，在实际使用时要换成具体的目录，例如用户为user，那么这里就要把~换成用户主目录/home/user<br>该文件要放到~/nginx-1.22.1/conf文件夹下</p><h2 id="5-启动nginx"><a href="#5-启动nginx" class="headerlink" title="5.启动nginx"></a>5.启动nginx</h2><pre class="language-none"><code class="language-none">cd ~&#x2F;nginx-1.22.1sudo nginx -c conf&#x2F;nginx.confsudo nginx -s reload</code></pre><h2 id="6-安装ffmpeg"><a href="#6-安装ffmpeg" class="headerlink" title="6.安装ffmpeg"></a>6.安装ffmpeg</h2><pre class="language-none"><code class="language-none">sudo apt-get install ffmpeg</code></pre><h2 id="7-测试推流"><a href="#7-测试推流" class="headerlink" title="7.测试推流"></a>7.测试推流</h2><pre class="language-none"><code class="language-none">ffmpeg -re -i rtsp:&#x2F;&#x2F;wowzaec2demo.streamlock.net&#x2F;vod&#x2F;mp4:BigBuckBunny_115k.mp4 -vcodec copy -acodec copy -f flv &quot;rtmp:&#x2F;&#x2F;127.0.0.1:1935&#x2F;myapp&#x2F;test&quot;</code></pre><h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><h2 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h2><pre class="language-none"><code class="language-none">sudo apt-get install curlcurl -sSL https:&#x2F;&#x2F;get.daocloud.io&#x2F;docker | sh</code></pre><h2 id="拉取镜像源"><a href="#拉取镜像源" class="headerlink" title="拉取镜像源"></a>拉取镜像源</h2><pre class="language-none"><code class="language-none">sudo docker pull iludfy&#x2F;predict_model</code></pre><h2 id="Docker创建容器并启动"><a href="#Docker创建容器并启动" class="headerlink" title="Docker创建容器并启动"></a>Docker创建容器并启动</h2><p>拉取完镜像需要挂载到容器中才能启动，命令是docker run，它的参数如下：<br><pre class="language-none"><code class="language-none">sudo docker run [Options] image#参数说明--name&#x3D;&quot;名字&quot;           指定容器名字-d                     后台方式运行-it                    使用交互方式运行,进入容器查看内容-p                     指定容器的端口-p ip:主机端口:容器端口  配置主机端口映射到容器端口-p 主机端口:容器端口（常用）-p 容器端口-P                     随机指定端口-e   环境设置-v   容器数据卷挂载</code></pre></p><p>规定端口为5000，输入下面的命令：<br><pre class="language-none"><code class="language-none">sudo docker run -p 5000:5000 iludfy&#x2F;predict_model</code></pre><br>一个容器就已经被创建好并启动了。</p><h3 id="端口被占用解决办法："><a href="#端口被占用解决办法：" class="headerlink" title="端口被占用解决办法："></a>端口被占用解决办法：</h3><p>以ubuntu系统为例：<br>先查到5000端口被哪个进程占用：<br><pre class="language-none"><code class="language-none">sudo netstat -ntlp</code></pre><br>查到进程id后，使用kill命令杀死进程：<br><pre class="language-none"><code class="language-none">sudo kill &#123;pid&#125;</code></pre><br>查看刚刚创建的容器的id：<br><pre class="language-none"><code class="language-none">sudo docker ps -a</code></pre><br>启动<br><pre class="language-none"><code class="language-none">sudo docker start &#123;id&#125;</code></pre></p><h1 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h1><h2 id="下载jdk"><a href="#下载jdk" class="headerlink" title="下载jdk"></a>下载jdk</h2><p>先检验是否安装java:<br><pre class="language-none"><code class="language-none">java -version</code></pre><br>若没有安装java，会得到如下输出：<br><pre class="language-none"><code class="language-none">user@user-NULL:~$ java -versionCommand &#39;java&#39; not found, but can be installed with:sudo apt install openjdk-11-jre-headless  # version 11.0.18+10-0ubuntu1~20.04.1, orsudo apt install default-jre              # version 2:1.11-72sudo apt install openjdk-16-jre-headless  # version 16.0.1+9-1~20.04sudo apt install openjdk-17-jre-headless  # version 17.0.6+10-0ubuntu1~20.04.1sudo apt install openjdk-8-jre-headless   # version 8u362-ga-0ubuntu1~20.04.1sudo apt install openjdk-13-jre-headless  # version 13.0.7+5-0ubuntu1~20.04</code></pre><br>上面已经自动列出可选的版本了，我们这里选择java8安装：<br><pre class="language-none"><code class="language-none">sudo apt install openjdk-8-jre-headlesssudo apt install openjdk-8-jdk-headless</code></pre><br>安装好后再检查java安装：<br><pre class="language-none"><code class="language-none">user@user-NULL:~$ java -versionopenjdk version &quot;1.8.0_362&quot;OpenJDK Runtime Environment (build 1.8.0_362-8u362-ga-0ubuntu1~20.04.1-b09)OpenJDK 64-Bit Server VM (build 25.362-b09, mixed mode)user@user-NULL:~$ javac -versionjavac 1.8.0_362</code></pre></p><h2 id="配置java环境变量"><a href="#配置java环境变量" class="headerlink" title="配置java环境变量"></a>配置java环境变量</h2><p>要配置环境变量，首先需要知道java的安装路径：<br><pre class="language-none"><code class="language-none">sudo update-alternatives --config java</code></pre><br>得到如下输出：<br><pre class="language-none"><code class="language-none">链接组 java (提供 &#x2F;usr&#x2F;bin&#x2F;java)中只有一个候选项：&#x2F;usr&#x2F;lib&#x2F;jvm&#x2F;java-8-openjdk-amd64&#x2F;jre&#x2F;bin&#x2F;java无需配置。</code></pre><br>拿到路径后打开环境变量配置文件：<br><pre class="language-none"><code class="language-none">sudo vim &#x2F;etc&#x2F;environment</code></pre><br>在此文件的末尾，添加java路径：<br><pre class="language-none"><code class="language-none">JAVA_HOME&#x3D;&quot;&#x2F;usr&#x2F;lib&#x2F;jvm&#x2F;java-8-openjdk-amd64&#x2F;jre&#x2F;bin&#x2F;java&quot;</code></pre><br>修改此文件将为系统上的所有用户设置JAVA_HOME路径。</p><p>保存文件并退出编辑器。</p><p>现在重新加载此文件：<br><pre class="language-none"><code class="language-none">source &#x2F;etc&#x2F;environment</code></pre><br>验证是否已设置环境变量：<br><pre class="language-none"><code class="language-none">echo $JAVA_HOME</code></pre><br>输出路径：<br><pre class="language-none"><code class="language-none">&#x2F;usr&#x2F;lib&#x2F;jvm&#x2F;java-8-openjdk-amd64&#x2F;jre&#x2F;bin&#x2F;java</code></pre><br>其他用户需要执行命令source /etc/environment或注销并重新登录才能应用此设置。</p>]]></content>
      
      
      <categories>
          
          <category> 环境配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
            <tag> ffmpeg </tag>
            
            <tag> docker </tag>
            
            <tag> java </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决failed to configure a datasource ‘url‘ attribute is not specified</title>
      <link href="/2023/03/31/jie-jue-failed-to-configure-a-datasource-url-attribute-is-not-specified/"/>
      <url>/2023/03/31/jie-jue-failed-to-configure-a-datasource-url-attribute-is-not-specified/</url>
      
        <content type="html"><![CDATA[<h1 id="解决failed-to-configure-a-datasource-‘url‘-attribute-is-not-specified"><a href="#解决failed-to-configure-a-datasource-‘url‘-attribute-is-not-specified" class="headerlink" title="解决failed to configure a datasource ‘url‘ attribute is not specified"></a>解决failed to configure a datasource ‘url‘ attribute is not specified</h1><p>今天做项目的时候，jar包启动报了数据源url找不到的错误：<br><pre class="language-none"><code class="language-none">***************************APPLICATION FAILED TO START*************************** Description: Failed to configure a DataSource: &#39;url&#39; attribute is not specified and no embedded datasource could be configured. Reason: Failed to determine a suitable driver class  Action: Consider the following:  If you want an embedded database (H2, HSQL or Derby), please put it on the classpath.  If you have database settings to be loaded from a particular profile you may need to activate it (no profiles are currently active).  Process finished with exit code 1</code></pre><br>报错信息提示找不到数据源url，但是迷惑的是，在application.properties文件下确实配置了，也没有问题：<br><pre class="language-none"><code class="language-none">spring.datasource.url&#x3D;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;AIOspring.datasource.username&#x3D;root#spring.datasource.password&#x3D;Shark666@njuspring.datasource.password&#x3D;123456spring.datasource.driver-class-name&#x3D;com.mysql.cj.jdbc.Driver</code></pre><br>所以考虑是不是application.properties在打包时没有加载到classes目录下的问题，一看果然：<br><img src="./application.png" alt="img"><br>那么原因在哪里，为什么加载不出来？<br>经过排查，找到之前引入外部jar包作为库的时候，在pom.xml文件中加了一段代码：<br><pre class="language-none"><code class="language-none">&lt;resources&gt;    &lt;resource&gt;        &lt;directory&gt;$&#123;project.basedir&#125;&#x2F;lib&lt;&#x2F;directory&gt;        &lt;targetPath&gt;&#x2F;BOOT-INF&#x2F;lib&#x2F;&lt;&#x2F;targetPath&gt;        &lt;includes&gt;            &lt;include&gt;**&#x2F;*.jar&lt;&#x2F;include&gt;        &lt;&#x2F;includes&gt;    &lt;&#x2F;resource&gt;&lt;&#x2F;resources&gt;</code></pre><br>虽然不清楚这个配置的具体原理，不过想到spring有一些其他的配置，和这个include类似，不写在include内的其他东西会被排除掉，所以加了一段代码：<br><pre class="language-none"><code class="language-none">&lt;resources&gt;    &lt;resource&gt;        &lt;directory&gt;$&#123;project.basedir&#125;&#x2F;lib&lt;&#x2F;directory&gt;        &lt;targetPath&gt;&#x2F;BOOT-INF&#x2F;lib&#x2F;&lt;&#x2F;targetPath&gt;        &lt;includes&gt;            &lt;include&gt;**&#x2F;*.jar&lt;&#x2F;include&gt;        &lt;&#x2F;includes&gt;    &lt;&#x2F;resource&gt;    &lt;resource&gt;        &lt;directory&gt;src&#x2F;main&#x2F;resources&lt;&#x2F;directory&gt;        &lt;targetPath&gt;BOOT-INF&#x2F;classes&#x2F;&lt;&#x2F;targetPath&gt;        &lt;includes&gt;            &lt;include&gt;**&#x2F;*&lt;&#x2F;include&gt;        &lt;&#x2F;includes&gt;    &lt;&#x2F;resource&gt;&lt;&#x2F;resources&gt;</code></pre><br>再次打包就正常了。</p>]]></content>
      
      
      <categories>
          
          <category> spring boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring boot </tag>
            
            <tag> spring boot错误记录 </tag>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>matlab编译dll文件</title>
      <link href="/2023/03/14/matlab-bian-yi-dll-wen-jian/"/>
      <url>/2023/03/14/matlab-bian-yi-dll-wen-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="matlab编译dll文件"><a href="#matlab编译dll文件" class="headerlink" title="matlab编译dll文件"></a>matlab编译dll文件</h1><p>1.命令行窗口输入：<code>deploytool</code>，会出现如下弹窗：<br><img src="./deploytool.png" alt="img"></p><p>选择第三个，出现下面的窗口，按图示操作：</p><p><img src="./deploytool2.png" alt="img"></p><p>打包好后会出现三个文件夹：</p><p><img src="./deploytool3.png" alt="img"></p><ol><li>for_redistribution文件夹下存放一个exe文件，它用来安装使用dll库所需要的matlab环境，一般在没有matlab的机器上，可以使用该文件快捷安装所需环境；</li><li>for_redistribution_files_only文件夹下就是编译生成的库文件、头文件和dll文件了</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> matlab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos7下配置ssd和yolov5的环境</title>
      <link href="/2023/03/08/centos7-xia-pei-zhi-ssd-he-yolov5-de-huan-jing/"/>
      <url>/2023/03/08/centos7-xia-pei-zhi-ssd-he-yolov5-de-huan-jing/</url>
      
        <content type="html"><![CDATA[<h1 id="centos下配置ssd和yolov5的环境"><a href="#centos下配置ssd和yolov5的环境" class="headerlink" title="centos下配置ssd和yolov5的环境"></a>centos下配置ssd和yolov5的环境</h1><h2 id="1-安装anaconda"><a href="#1-安装anaconda" class="headerlink" title="1.安装anaconda"></a>1.安装anaconda</h2><p>首先确定anaconda的版本，我这里用得是python3.9，查到对应的anaconda版本为Anaconda3-2021.11<br><br><strong>在用户主目录下：</strong><br><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> https://repo.anaconda.com/archive/Anaconda3-2021.11-Linux-x86_64.sh</code></pre><br>之后用户主目录下回多出一个Anaconda3-2021.11-Linux-x86_64.sh文件，直接运行即可：<br><pre class="language-bash" data-language="bash"><code class="language-bash">./Anaconda3-2021.11-Linux-x86_64.sh</code></pre><br>会强制看完用户协议，一直按回车即可。<br>最后会问：<br><pre class="language-none"><code class="language-none">Do you accept the license terms? [yes|no][no] &gt;&gt;&gt; yes</code></pre><br>输入yes即可。<br>之后会让你确定安装路径：<br><pre class="language-none"><code class="language-none"># 使用默认路径，直接键入回车，使用自定义路径，直接输入安装路径# 此处使用默认路径作为安装路径Anaconda3 will now be installed into this location:&#x2F;home&#x2F;dfy&#x2F;anaconda3  - Press ENTER to confirm the location  - Press CTRL-C to abort the installation  - Or specify a different location below [&#x2F;home&#x2F;dfy&#x2F;anaconda3] &gt;&gt;&gt; </code></pre><br>最后会询问是否进行初始化，yes即可：<br><pre class="language-none"><code class="language-none"># 此处询问是否初始化conda的环境，直接输入yes Do you wish the installer to initialize Anaconda3by running conda init?  [yes|no][no] &gt;&gt;&gt; yes</code></pre><br>初始化时将配置写入了./.bashrc文件中，输入下面命令就可以开始使用了：<br><pre class="language-none"><code class="language-none">source .&#x2F;.bashrc</code></pre><br>会看到命令行开头会出现(bash)，说明已经进入conda环境了。<br>要解除conda环境，只需<code>conda deactivate</code>即可。</p><h2 id="2-如果机器上没有pip，安装pip3："><a href="#2-如果机器上没有pip，安装pip3：" class="headerlink" title="2.如果机器上没有pip，安装pip3："></a>2.如果机器上没有pip，安装pip3：</h2><pre class="language-none"><code class="language-none">1.  yum -y install epel-release               2.  yum -y install python3-pip                3.  pip3 --version  查看pip版本</code></pre><h2 id="3-生成requirements-txt文件"><a href="#3-生成requirements-txt文件" class="headerlink" title="3.生成requirements.txt文件"></a>3.生成requirements.txt文件</h2><p>这个文件用来记录所需要的环境和对应的版本号，最后使用pip读取该文件可以统一安装。</p><blockquote><ol><li>到你的算法根目录下</li><li>使用<code>pip freeze &gt; requirements.txt</code>命令</li></ol><p>两步即可生成requirements.txt文件。</p></blockquote><p>但是这样做的一个巨大问题是，它会将环境中所有的库名称和版本进行输出，有些库是在项目中没有用到的，但依然会进行输出。</p><p>为了避免这种情况，有人就开发了一个pipreqs库，它可以进行一些过滤，仅将工程中用到的库和版本进行输出。</p><p>pipreqs安装：<br> <pre class="language-none"><code class="language-none">pip install pipreqs</code></pre><br> 安装好之后，在当前目录下运行：<br><pre class="language-none"><code class="language-none">pipreqs . --encoding&#x3D;utf8 --force</code></pre></p><p>稍等一会就生成好了。<br>我生成的requirements.txt内容如下：<br><pre class="language-none"><code class="language-none">alfred&#x3D;&#x3D;0.3config&#x3D;&#x3D;0.5.1coremltools&#x3D;&#x3D;6.2Flask&#x3D;&#x3D;2.2.2globals&#x3D;&#x3D;0.3.35helpers&#x3D;&#x3D;0.2.0Jinja2&#x3D;&#x3D;3.0.3matplotlib&#x3D;&#x3D;3.5.2nb&#x3D;&#x3D;0.1.2numpy&#x3D;&#x3D;1.21.5onnx&#x3D;&#x3D;1.13.1opencv_python&#x3D;&#x3D;4.7.0.68pandas&#x3D;&#x3D;1.4.4Pillow&#x3D;&#x3D;9.4.0PyYAML&#x3D;&#x3D;6.0requests&#x3D;&#x3D;2.28.1scikit_image&#x3D;&#x3D;0.19.2scipy&#x3D;&#x3D;1.9.1seaborn&#x3D;&#x3D;0.11.2signals&#x3D;&#x3D;0.0.2skimage&#x3D;&#x3D;0.0templating&#x3D;&#x3D;0.5.0thop&#x3D;&#x3D;0.1.1.post2209072238torch&#x3D;&#x3D;1.9.1torchvision&#x3D;&#x3D;0.10.1tqdm&#x3D;&#x3D;4.64.1Werkzeug&#x3D;&#x3D;2.2.3WTForms&#x3D;&#x3D;3.0.1</code></pre></p><h2 id="4-安装依赖文件（执行此步之前建议先看后续踩坑部分，节省时间）"><a href="#4-安装依赖文件（执行此步之前建议先看后续踩坑部分，节省时间）" class="headerlink" title="4.安装依赖文件（执行此步之前建议先看后续踩坑部分，节省时间）"></a>4.安装依赖文件（执行此步之前建议先看后续踩坑部分，节省时间）</h2><p>执行：<br><pre class="language-none"><code class="language-none">pip install -r .&#x2F;requirements.txt</code></pre><br>漫长的下载过程</p><h2 id="5-踩的坑"><a href="#5-踩的坑" class="headerlink" title="5.踩的坑"></a>5.踩的坑</h2><h3 id="skimage报错"><a href="#skimage报错" class="headerlink" title="skimage报错"></a>skimage报错</h3><p>报错内容如下：</p><blockquote><p> error: subprocess-exited-with-error</p><p>  × python setup.py egg_info did not run successfully.<br>  │ exit code: 1<br>  ╰─&gt; [3 lines of output]</p><pre><code>  *** Please install the `scikit-image` package (instead of `skimage`) ***  [end of output]</code></pre><p>  note: This error originates from a subprocess, and is likely not a problem with pip.<br>error: metadata-generation-failed</p><p>× Encountered error while generating package metadata.<br>╰─&gt; See above for output.</p><p>note: This is an issue with the package mentioned above, not pip.<br>hint: See above for details.</p></blockquote><p>看字面意思是说，不要安装skimage，而是安装scikit-image。<br>考虑到生成的requirements.txt文件中有这两行:<br><pre class="language-none"><code class="language-none">scikit_image&#x3D;&#x3D;0.19.2skimage&#x3D;&#x3D;0.0</code></pre><br>scikit-image已经安装好了，那直接把<code>skimage==0.0</code>删除即可。</p><h3 id="安装成功后报dependency-confilct错误"><a href="#安装成功后报dependency-confilct错误" class="headerlink" title="安装成功后报dependency confilct错误"></a>安装成功后报dependency confilct错误</h3><p>报错内容如下：<br><pre class="language-none"><code class="language-none">ERROR: pip&#39;s dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.daal4py 2021.6.0 requires daal&#x3D;&#x3D;2021.4.0, which is not installed.anaconda-project 0.11.1 requires ruamel-yaml, which is not installed.</code></pre></p><p>是有两个依赖<code>daal==2021.4.0</code>和<code>ruamel-yaml</code>没有安装，按照提示逐个安装：<br><pre class="language-none"><code class="language-none">pip install daal&#x3D;&#x3D;2021.4.0pip install ruamel-yaml</code></pre></p><p>然而，在安装<code>daal==2021.4.0</code>这个库的时候，又给老子报了个错：<br><pre class="language-none"><code class="language-none">ERROR: Cannot uninstall &#39;TBB&#39;. It is a distutils installed project and thus we cannot accurately determine which files belong to it which would lead to only a partial uninstall.</code></pre><br>意思是安装过程中无法卸载老版本的TBB库。<br>那让我们友好地手动去卸载吧。<br>通过命令<code>pip install tbb</code>确定已安装的tbb库的位置。<br>我的输出如下：<br><pre class="language-none"><code class="language-none">Looking in indexes: https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;pypi&#x2F;simpleRequirement already satisfied: tbb in .&#x2F;anaconda3&#x2F;lib&#x2F;python3.9&#x2F;site-packages (0.2)</code></pre><br>意思是包位置在./anaconda3/lib/python3.9/site-packages (0.2)，进入这个目录，执行<code>ls</code>，找到和tbb有关的结果：<br><pre class="language-none"><code class="language-none">tbbTBB-0.2-py3.9.egg-infoTBB.py</code></pre><br>把这三个删掉<br><pre class="language-none"><code class="language-none">rm -rf tbb TBB.py TBB-0.2-py3.9.egg-info</code></pre><br>再去安装dall应该没问题了。</p>]]></content>
      
      
      <categories>
          
          <category> pytorch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pytorch </tag>
            
            <tag> ssd </tag>
            
            <tag> yolov5 </tag>
            
            <tag> centos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot常用注解</title>
      <link href="/2023/02/04/spring-boot-chang-yong-zhu-jie/"/>
      <url>/2023/02/04/spring-boot-chang-yong-zhu-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="配置类相关"><a href="#配置类相关" class="headerlink" title="配置类相关"></a>配置类相关</h1><h2 id="Configuration"><a href="#Configuration" class="headerlink" title="@Configuration"></a>@Configuration</h2><blockquote><p>声明一个类为配置类，用于取代bean.xml配置文件注册bean对象。<br/><br>@Configuration注解中含有@Component注解，所以被@Configuration标记的配置类会作为一个bean对象被加载到ioc容器中。<br><br>它通常搭配@Bean注解和@Scope注解使用。</p><p>@Configuration有一个属性proxyBeanMethods，用于指定是否为懒加载，默认值为true。<br>proxyBeanMethods = true的情况下，保持单实例对象，在spring容器启动时就会创建bean对象。这种情况主要用在bean对象的依赖情况下，如果存在一个bean依赖另一个bean时，一般会采用Full模式。<br>proxyBeanMethods = false的情况下，不检查IOC容器中是否存在，而是简单的调用方法进行创建对象，无法保持单实例。当不存在bean对象的依赖问题时，会才有轻量级的配置。</p></blockquote><p>测试代码如下：<br><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestSpringBootApp</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//获取ioc容器</span>        <span class="token class-name">ConfigurableApplicationContext</span> run <span class="token operator">=</span> <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">TestSpringBootApp</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span> dogBean <span class="token operator">=</span> run<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">Dog</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dogBean<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">User</span> userBean <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">)</span>run<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userBean<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userBean<span class="token punctuation">.</span><span class="token function">getDog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span>dogBean<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><br>User类：<br><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@ToString</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> email<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Dog</span> dog<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><br>Dog类：<br><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@ToString</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><br>testConfiguration类：<br><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token comment">//多例模式</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestConfiguration</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">userBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"User对象创建"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"dfy"</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token function">dogBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">Dog</span> <span class="token function">dogBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Dog对象第"</span><span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">++</span>count<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"次创建"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"六六"</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><br>输出结果如下：<br><img src="@Configuration1.png" alt="输出结果"></p><p>如果改成单例模式，即<code>proxyBeanMethods = true</code>，那么输出结果将变成：<br><img src="@Configuration2.png" alt="输出结果"></p><h2 id="Bean"><a href="#Bean" class="headerlink" title="@Bean"></a>@Bean</h2><p>@Bean注解通常标记一个Supplier方法，用于声明一个bean对象的注册，默认的加载模式为饿汉单例。<br/></p><blockquote><p>使用@Bean声明一个bean：</p></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestConfiguration</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">userBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"User对象正在创建"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"dfy"</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestSpringBootApp</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//获取ioc容器</span>        <span class="token class-name">ConfigurableApplicationContext</span> run <span class="token operator">=</span> <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span>runTestSpringBootApp<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span> user <span class="token operator">=</span> run<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>输出结果为：<br> <img src="@Bean1.png" alt="输出结果"></p><p>@Bean注解含有如下属性：<br><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Bean</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@AliasFor</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span>    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@AliasFor</span><span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">)</span>    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">/** @deprecated */</span>    <span class="token annotation punctuation">@Deprecated</span>    <span class="token class-name">Autowire</span> <span class="token function">autowire</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token class-name">Autowire</span><span class="token punctuation">.</span><span class="token constant">NO</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">autowireCandidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> <span class="token function">initMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> <span class="token function">destroyMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">"(inferred)"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></p><ul><li>value和name<blockquote><p>可以看到value和name两个属性是一个别名对，它们的作用是指定该bean的名称。<br>  如果在使用时未指定bean的名称，默认使用带注解方法的名称；如果指定了，方法本身的名称就会被忽略。</p></blockquote></li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestConfiguration</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">userBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"未指定名称的User对象正在创建"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"dfy"</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"User01"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">userBean01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"指定名称的User对象正在创建"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"dfy"</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestSpringBootApp</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//获取ioc容器</span>        <span class="token class-name">ConfigurableApplicationContext</span> run <span class="token operator">=</span> <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">TestSpringBootApp</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获取所有bean对象的名称</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> beanDefinitionNames <span class="token operator">=</span> run<span class="token punctuation">.</span><span class="token function">getBeanDefinitionNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">String</span> s <span class="token operator">:</span> beanDefinitionNames<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>输出结果如下：<br><img src="@Bean2.png" alt="输出结果"></p><ul><li><p>autowire</p><blockquote><p>已弃用。<br>autowire确定自动装配状态，即该bean创建时是否使用它的setter方法对它的成员变量进行自动装配。<br>  Autowire是一个枚举类，有三个值：</p><ul><li>NO：不自动装配</li><li>BY_NAME：根据名称自动装配</li><li>BY_TYPE：根据类型自动装配<br>默认值是NO，即不自动装配。</li></ul></blockquote></li><li><p>autowireCandidate</p><blockquote><p>autowireCandidate和配置文件bean标签的autowireCandidate属性一样，就是让其他的bean在自动注入时，是否会装配当前的bean。 默认值true。</p></blockquote></li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestConfiguration</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">userBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"dfy"</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">Dog</span> <span class="token function">dog1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"狗宝"</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>autowireCandidate <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token comment">//不作为自动注入的候选者</span>    <span class="token keyword">public</span> <span class="token class-name">Dog</span> <span class="token function">dog2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"六六"</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@ToString</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> email<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">Dog</span> dog<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestSpringBootApp</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//获取ioc容器</span>        <span class="token class-name">ConfigurableApplicationContext</span> run <span class="token operator">=</span> <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">TestSpringBootApp</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span> userBean <span class="token operator">=</span> run<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"userBean"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userBean<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>输出结果为：<br><code>User(id=1, name=dfy, age=15, email=null, dog=Dog(id=1, name=狗宝, age=5))</code><br>如果取消dog2的<code>autowireCandidate = false</code>，spring容器会报<code>NoUniqueBeanDefinitionException</code>异常。<br>有趣的是，虽然spring容器启动时可以正常装配第二个Dog对象，但是idea会编译报错：<br><img src="@Bean3.png" alt="自动装配报错"></p><ul><li>initMethod和destroyMethod<blockquote><p>用于指定bean的初始化和销毁方法。</p></blockquote></li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestConfiguration</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>initMethod <span class="token operator">=</span> <span class="token string">"userInit"</span><span class="token punctuation">,</span> destroyMethod <span class="token operator">=</span> <span class="token string">"userDestroy"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">userBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"dfy"</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@ToString</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> email<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">userInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"User init..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">userDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"User destroy..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>输出结果：<br><img src="@Bean4.png" alt="输出结果"></p><h2 id="Value"><a href="#Value" class="headerlink" title="@Value"></a>@Value</h2><blockquote><p>常用于标记成员变量，注入外部化属性<br>@Value的三种用法：</p><ul><li>注入普通属性<br>  语法为@Value(…)，直接使用字面量即可</li><li>注入配置文件<br>  语法为@Value(“${…}”)，注入配置文件中写好的属性值</li><li>注入表达式并运算<br>  语法为@Value(“#{…}”)，写入spring框架的SpEl表达式即可<br>  每个框架有自己的一套SpEl表达式，详情可以参考<a href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#expressions">官方文档</a></li></ul></blockquote><p>代码示例如下：<br><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@ToString</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"10"</span><span class="token punctuation">)</span><span class="token comment">//注入普通属性</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&#123;user_name&#125;"</span><span class="token punctuation">)</span><span class="token comment">//注入外部配置文件</span>    <span class="token comment">//application.yml中写入属性： user_name: user01</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"#&#123;2+1+3&#125;"</span><span class="token punctuation">)</span><span class="token comment">//注入表达式</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> email<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">userInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"User init..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">userDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"User destroy..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><br><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestConfiguration</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">userBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"dfy"</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><br>该bean的输出结果为：<br><code>User(id=10, name=user01, age=6, email=null)</code><br>可以看到属性值已经成功注入，并且在new User对象时指定的默认值没有起到作用，被@Value的值覆盖掉了。</p><h2 id="Scope"><a href="#Scope" class="headerlink" title="@Scope"></a>@Scope</h2><blockquote><p>@Scope通常和@Bean配合使用，用于指定该bean的作用域。它具有以下几种作用域：</p><ul><li>singleton 单例模式（默认值）</li><li>prototype 多例模式</li><li>request 每次http请求产生一个bean，该bean在本次HTTP request内有效</li><li>session 每次http请求产生一个bean，该bean在本次HTTP session内有效</li></ul></blockquote><h1 id="生命周期相关"><a href="#生命周期相关" class="headerlink" title="生命周期相关"></a>生命周期相关</h1><h2 id="Lazy-true"><a href="#Lazy-true" class="headerlink" title="@Lazy(true)"></a>@Lazy(true)</h2><blockquote><p>@Lazy表明一个bean是否被延迟加载，当@Lazy的值设定为true（默认值即为true）时，表明该bean被延迟加载。</p><ul><li>标记在方法上，表示该方法被延迟加载</li><li>标记在@Component的类上或是@Component作为元注解的类上（其实就是标记在一个bean上），表示该bean被延迟加载</li></ul></blockquote><p>测试代码：<br><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@ToString</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Lazy</span><span class="token comment">//延迟加载</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> email<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Dog</span> dog<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"User 对象被创建"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><br>在spring启动时未看到User对象的创建：<br><img src="@Lazy1.png" alt="输出结果"></p><h2 id="PostConstruct-和-PreDestory"><a href="#PostConstruct-和-PreDestory" class="headerlink" title="@PostConstruct 和 @PreDestory"></a>@PostConstruct 和 @PreDestory</h2><blockquote><p>实现初始化和销毁bean之前进行的操作，只能有一个方法可以用此注释进行注释，方法不能有参数，返回值必需是void,方法需要是非静态的,不能抛出异常。</p><ul><li>@PostConstruct：在构造方法和init方法（如果有的话）之间得到调用，且只会执行一次。</li><li>@PreDestory：注解的方法在destory()方法调用后得到执行。</li></ul></blockquote><p>代码示例：<br><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestConfiguration</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>initMethod <span class="token operator">=</span> <span class="token string">"init"</span><span class="token punctuation">,</span>destroyMethod <span class="token operator">=</span> <span class="token string">"destroy"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Dog</span> <span class="token function">dogBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Dog对象配置类中创建..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"六六"</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><br><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@ToString</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Dog对象初始化..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Dog对象销毁..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@PostConstruct</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postConstruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Dog对象初始化之前..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@PreDestroy</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">preDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Dog对象销毁之后..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><br>spring启动后结果为：<br><img src="@PreDestroy1.png" alt="输出结果"></p><h1 id="bean对象相关"><a href="#bean对象相关" class="headerlink" title="bean对象相关"></a>bean对象相关</h1><h2 id="Controller-Service-Repository-Compnent"><a href="#Controller-Service-Repository-Compnent" class="headerlink" title="@Controller, @Service, @Repository, @Compnent"></a>@Controller, @Service, @Repository, @Compnent</h2><p>这四个注解的作用没有区别，都是声明一个bean对象注册到ioc容器中。但是为了程序可读性和开发规范，在使用时依然要按照java类的实际作用去使用。</p><p>在使用时只需要把它们标注在一个类上，spring容器启动时就会把对象创建好注入ioc：<br><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@ToString</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><br><img src="@Component1.png" alt="输出结果"></p><p>也可以给这些注解一个值，作为bean对象的名称：<br><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@ToString</span><span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span><span class="token string">"firstDog"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><br><img src="@Component2.png" alt="输出结果"></p><h2 id="Named和-Inject"><a href="#Named和-Inject" class="headerlink" title="@Named和@Inject"></a>@Named和@Inject</h2><blockquote><p>这两个注解是JSR-330的一部分。在Spring 3中，开始支持JSR-330的注解。这些注解在使用上和Spring的注解一样，所不同的只是需要额外的相关jar包。你可以使用下面的注解在spring 3应用中。<br>@Inject替代@Autowired来执行注入<br>@Named替代@Component来声明一个Bean</p><p>在springboot项目中，使用这两个注解需要先引入依赖：<br><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.inject<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>javax.inject<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></p><ul><li>@Named功能和@Component注解相同，它的值用于指定bean的名称，如果没有值默认使用类名作为bean名称。</li><li>@Inject注解在spring环境下，和@Autowired是相同的。</li></ul></blockquote><h2 id="Autowired和-Resource"><a href="#Autowired和-Resource" class="headerlink" title="@Autowired和@Resource"></a>@Autowired和@Resource</h2><blockquote><p>这两个注解的作用相同，用于bean对象的自动装配。</p></blockquote><p>使用示例：<br><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//@Autowired</span><span class="token annotation punctuation">@Resource</span><span class="token keyword">private</span> <span class="token class-name">Dog</span> dog<span class="token punctuation">;</span></code></pre><br>下面详细说一下@Autowired的装配原理：</p><blockquote><ul><li>@Autowired默认按照ByType类型进行装配。</li><li>若ByType类型匹配到多个bean，那么按照ByName类型装配：<ul><li>若没有和@Qualifier搭配使用，默认按照变量名作为bean名称去匹配（例如上面Dog的例子，默认使用变量名dog作为bean名称），这种情况下若没有匹配到bean，会报NoUniqueBeanDefinationException异常。</li><li>若搭配@Qualifier使用，会按照@Qualifier注解指定的bean名称进行匹配，如果没有匹配到，会报NoSuchBeanDefinitionException异常。</li></ul></li><li>@Autowired有一个required属性，默认值为true，表示不接受空值，若没有匹配到bean报错。如果设置为false，表示允许null。</li></ul></blockquote><p>@Resource和@Autowired的区别：</p><blockquote><p>@Resource默认按照Byname方式匹配bean，匹配失败会回滚到@Autowired。<br>可以手动指定bean,它有2个属性分别是name和type，使用name属性，则使用byName的自动注入，而使用type属性时则使用byType自动注入。<br>@Resource(name=”bean名字”)或@Resource(type=”bean的class”)</p></blockquote><h2 id="Primary"><a href="#Primary" class="headerlink" title="@Primary"></a>@Primary</h2><blockquote><p>自动装配时当出现多个Bean候选者时，被注解为@Primary的Bean将作为首选者，否则将抛出异常。</p></blockquote><h1 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h1><h2 id="Async"><a href="#Async" class="headerlink" title="@Async"></a>@Async</h2><ol><li>在方法上使用该@Async注解，申明该方法是一个异步任务；</li><li>在类上面使用该@Async注解，申明该类中的所有方法都是异步任务；</li><li>使用此注解的方法的类对象，必须是spring管理下的bean对象； </li><li>要想使用异步任务，需要在主类上开启异步配置，即，配置上@EnableAsync注解<br><a href="https://blog.csdn.net/qq_44750696/article/details/123960134">https://blog.csdn.net/qq_44750696/article/details/123960134</a><h1 id="参数校验"><a href="#参数校验" class="headerlink" title="参数校验"></a>参数校验</h1><h2 id="Valid-Valided"><a href="#Valid-Valided" class="headerlink" title="@Valid,@Valided"></a>@Valid,@Valided</h2><a href="https://blog.csdn.net/weixin_51439775/article/details/128386125">https://blog.csdn.net/weixin_51439775/article/details/128386125</a></li></ol><h1 id="WEB相关"><a href="#WEB相关" class="headerlink" title="WEB相关"></a>WEB相关</h1><h2 id="RequestBody"><a href="#RequestBody" class="headerlink" title="@RequestBody"></a>@RequestBody</h2><blockquote><p>获取request请求体中的内容，常用来处理content-type不是默认的application/x-www-form-urlcoded编码（form表单格式）的内容，比如说：application/json或者是application/xml等。一般情况下来说常用其来处理application/json类型。</p><p>@RequestBody注解可以解析请求体中json格式的数据，并将其封装到javaBean中。</p></blockquote><p>测试：</p><p>使用postman发送请求，请求体中使用json格式字符串。<br><img src="@RequestBody1.png" alt="发送请求"><br>在后端代码可以用String来接收，接收结果是原json字符串：<br><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">welcome</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span><span class="token punctuation">(</span>required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token class-name">String</span> dog<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dog<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"index"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><br>控制台输出：<code>&#123;&quot;id&quot;:&quot;1&quot;,&quot;name&quot;:&quot;六六&quot;,&quot;age&quot;:&quot;3&quot;&#125;</code></p><p>也可以用对象来接收，接收结果是json字符串封装后的对象：<br><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">welcome</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span><span class="token punctuation">(</span>required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token class-name">Dog</span> dog<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dog<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"index"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><br>控制台输出：<code>Dog(id=1, name=六六, age=3)</code></p><p>如果使用@RequestBody注解来接收form表单的请求（即application/x-www-form-urlcoded编码）会报415，并在控制台报出编码格式不支持的错误：<br><code>Resolved [org.springframework.web.HttpMediaTypeNotSupportedException: Content type &#39;application/x-www-form-urlencoded;charset=UTF-8&#39; not supported]</code></p><h2 id="RequestParam"><a href="#RequestParam" class="headerlink" title="@RequestParam"></a>@RequestParam</h2><p>用于将请求参数映射到控制层方法的参数上。<br>@RequestParam含有以下三个属性：</p><ul><li>value：设置传入的参数的名称，若不设置默认使用变量值。</li><li>required：设置该参数是否必填。表示请求中一定要传入对应的参数，否则会报404错误，如果设置为false时，当请求中没有此参数，将会默认为null,而对于基本数据类型的变量，则必须有值，这时会抛出空指针异常。</li><li>defaultValue：参数的默认值，如果请求中没有同名的参数时，该变量默认为此值。注意默认值可以使用SpEL表达式。<h2 id="PathVariable"><a href="#PathVariable" class="headerlink" title="@PathVariable"></a>@PathVariable</h2>处理请求的URL，把占位符绑定到controller的方法参数上。<br>该注解有两个属性：</li><li>value：设置匹配的占位符的名称，若不设置，默认使用参数名称匹配占位符。</li><li>required：设置该参数是否必填，默认值为true，表示URL中必须含有匹配的占位符，否则将抛出异常。</li></ul><p>使用方法例如：<br><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"/&#123;page&#125;/&#123;pageSize&#125;"</span><span class="token punctuation">,</span><span class="token string">"/delete/&#123;page&#125;/&#123;pageSize&#125;"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toEmpPage</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span>                        <span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"page"</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> page<span class="token punctuation">,</span>                        <span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"pageSize"</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> pageSize<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//业务部分</span><span class="token punctuation">&#125;</span></code></pre><br>上述代码即是把URL中的{page}和{pageSize}分别绑定到方法参数中的page和pageSize上。</p><h2 id="RequestHeader"><a href="#RequestHeader" class="headerlink" title="@RequestHeader"></a>@RequestHeader</h2><p>用于把请求头中的参数绑定到方法参数上。<br>它有三个属性，和@RequestParam注解完全相同。</p><h2 id="CookieValue"><a href="#CookieValue" class="headerlink" title="@CookieValue"></a>@CookieValue</h2><p>用于把请求中的cookie绑定到方法参数上。<br>它的属性同上。</p><h2 id="ModelAttribute"><a href="#ModelAttribute" class="headerlink" title="@ModelAttribute"></a>@ModelAttribute</h2><p>@ModelAttribute的作用是把数据添加进模型对象中，供前端页面渲染使用。它的用法有很多：</p><ol><li>入参处使用<blockquote><p>将@ModelAttribute注解标记在入参上，在渲染页面之前就会自动把标记的入参添加到模型对象中。</p></blockquote></li></ol><p>示例代码：<br><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">welcome</span><span class="token punctuation">(</span><span class="token annotation punctuation">@ModelAttribute</span><span class="token punctuation">(</span><span class="token string">"msg2"</span><span class="token punctuation">)</span><span class="token class-name">String</span> msg2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"index"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></p><p>前端代码：<br><pre class="language-HTML" data-language="HTML"><code class="language-HTML">&lt;form th:action&#x3D;&quot;@&#123;&#x2F;&#125;&quot; method&#x3D;&quot;post&quot;&gt;    &lt;label&gt;        msg2:        &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;msg2&quot;&#x2F;&gt;    &lt;&#x2F;label&gt;    &lt;input type&#x3D;&quot;submit&quot;&gt;    &lt;p th:text&#x3D;&quot;$&#123;msg2&#125;&quot;&gt;&lt;&#x2F;p&gt;&lt;!--  前端提交表单后，后端再次返回该页面，并将上次输入的信息显示在此处   --&gt;&lt;&#x2F;form&gt;</code></pre><br>结果：<br>发送之前：<img src="@ModelAttribute1.png" alt="页面效果"><br>发送之后：<img src="@ModelAttribute2.png" alt="页面效果"></p><ol><li>方法上使用<br>被@ModelAttribute注释的方法会在此controller的每个方法执行前被执行 ，如果有返回值，则自动将该返回值加入到ModelMap中。<ul><li>若注解没有返回值的方法，一般在方法体内部用model对象手动加入：</li></ul></li></ol><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@ModelAttribute</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">String</span> msg2<span class="token punctuation">,</span> <span class="token class-name">Model</span> model<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"msg2"</span><span class="token punctuation">,</span>msg2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">welcome</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"index"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><ul><li>若注解有返回值的方法，建议通过@ModelAttribute(value = “”)指定名称，若不指定，默认使用返回类型小写作为名称。</li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@ModelAttribute</span><span class="token comment">//不指定名称，属性名为返回类型小写，即string</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">String</span> msg2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>msg2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> msg2<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">welcome</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"index"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="SessionAttributes"><a href="#SessionAttributes" class="headerlink" title="@SessionAttributes"></a>@SessionAttributes</h2><p>将ModelMap等方式传到前端的属性值共享到session中。</p><blockquote><p>@SessionAttributes注解只能使用在类上，用于在多个请求之间传递参数，类似于Session的Attribute，但不完全一样，一般来说@SessionAttributes设置的参数只用于暂时的传递（存入sessionAttributeStore），而不是长期的保存，长期保存的数据还是要放到Session中。</p><p>有两种方式将ModelMap中的属性值共享到session中：</p><ul><li>使用注解的value属性：可以通过属性名指定需要放到会话中的属性；</li><li>使用注解的types属性：还可以通过模型属性的对象类型指定哪些模型属性需要放到会话中。</li></ul></blockquote><h2 id="CrossOrigin"><a href="#CrossOrigin" class="headerlink" title="@CrossOrigin"></a>@CrossOrigin</h2><h2 id="RestController"><a href="#RestController" class="headerlink" title="@RestController"></a>@RestController</h2><h2 id="ControllerAdvice"><a href="#ControllerAdvice" class="headerlink" title="@ControllerAdvice"></a>@ControllerAdvice</h2><p>@ControllerAdvice的作用也是声明一个控制层组件，通常用于全局异常处理、添加全局数据以及请求参数预处理。</p><ul><li><p>全局异常处理</p><blockquote><p>搭配@ExceptionHandler注解使用。@ExceptionHandler注解只有一个属性value，是一个Throwable类型的数组，它的作用是设置匹配异常的种类，当Controller层出现value数组内的异常时，将调用被@ExceptionHandler标记的方法。</p><p>方法的参数可以包括异常实例、HttpServletRequest、HttpServletResponse、Model等；返回值可以是void、Json（需要用@ResponseBody标记）、ModelAndView（可以添加数据、设置视图名称）、甚至是逻辑视图名。</p></blockquote></li></ul><p>示例代码：<br><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@ControllerAdvice</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestControllerAdvice</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">ArithmeticException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">ModelAndView</span> <span class="token function">exceptionHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"出现异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ModelAndView</span> model <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModelAndView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        model<span class="token punctuation">.</span><span class="token function">addObject</span><span class="token punctuation">(</span><span class="token string">"msg2"</span><span class="token punctuation">,</span><span class="token string">"出现异常！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        model<span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"index"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> model<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><br><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">welcome</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"index"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><br>浏览器访问该方法时触发ArithmeticException异常，返回页面如下：<br><img src="Spring-Boot常用注解/@ControllerAdvice1.png" alt="页面"></p><ul><li><p>添加全局数据</p><blockquote><p>搭配@ModelAttribute注解使用。@ModelAttribute标记一个方法，该方法的返回值将作为全局数据，所有Controller层方法和页面都可以访问到。</p></blockquote><p>  示例代码如下：<br>  controllerAdvice：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@ControllerAdvice</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestControllerAdvice</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@ModelAttribute</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"user"</span><span class="token punctuation">)</span><span class="token comment">//model中的key</span>    <span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token class-name">GlobalConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span> <span class="token string">"dfy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token string">"18"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> map<span class="token punctuation">;</span><span class="token comment">//model中的value</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>controller:</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">welcome</span><span class="token punctuation">(</span><span class="token class-name">Model</span> model<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> model<span class="token punctuation">.</span><span class="token function">asMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> keySet <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> iterator <span class="token operator">=</span> keySet<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">String</span> key <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Object</span> value <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">"="</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token string">"index"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>页面：</p><pre class="language-HTML" data-language="HTML"><code class="language-HTML">&lt;p th:text&#x3D;&quot;$&#123;user.username&#125;&quot;&gt;&lt;&#x2F;p&gt;&lt;p th:text&#x3D;&quot;$&#123;user.age&#125;&quot;&gt;&lt;&#x2F;p&gt;</code></pre><p>控制台输出为：<br><code>user=&#123;age=18, username=dfy&#125;</code><br>页面输出为：<br><img src="@ControllerAdvice2.png" alt="页面"></p></li><li><p>请求参数预处理<br>搭配@InitBinder注解使用。被@InitBinder标记的方法，参数中必须要含有WebDataBinder，具体用法如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@InitBinder</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initBinder</span><span class="token punctuation">(</span><span class="token class-name">WebDataBinder</span> binder<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    binder<span class="token punctuation">.</span><span class="token function">registerCustomEditor</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">StringTrimmerEditor</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>通过WebDataBinder类的registerCustomEditor方法来注册请求参数的预处理器，它的方法参数为：<br><code>registerCustomEditor(Class&lt;?&gt; requiredType, PropertyEditor propertyEditor)</code><br>requiredType代表该预处理器处理的数据类型；propertyEditor代表预处理器，它的实现类有很多，这里不一一列举。<br>自定义属性编辑器可以通过继承<code>java.beans.PropertyEditorSupport</code>类并重写其<code>setAsText</code>方法实现，最后调用setValue(Object Value)方法完成转换后的值的设置。</p><p>还有其他花式用法，具体可参见博客<a href="https://blog.csdn.net/wang0907/article/details/108357696">https://blog.csdn.net/wang0907/article/details/108357696</a></p></li></ul><h2 id="元注解包括-Retention-Target-Document-Inherited四种"><a href="#元注解包括-Retention-Target-Document-Inherited四种" class="headerlink" title="元注解包括  @Retention @Target @Document @Inherited四种"></a>元注解包括  @Retention @Target @Document @Inherited四种</h2><h2 id="RequestMapping"><a href="#RequestMapping" class="headerlink" title="@RequestMapping"></a>@RequestMapping</h2><h2 id="GetMapping和-PostMapping"><a href="#GetMapping和-PostMapping" class="headerlink" title="@GetMapping和@PostMapping"></a>@GetMapping和@PostMapping</h2>]]></content>
      
      
      <categories>
          
          <category> spring boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> spring boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>thymeleaf使用</title>
      <link href="/2023/01/20/thymeleaf-ji-ben-shi-yong/"/>
      <url>/2023/01/20/thymeleaf-ji-ben-shi-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="thymeleaf基本使用"><a href="#thymeleaf基本使用" class="headerlink" title="thymeleaf基本使用"></a>thymeleaf基本使用</h1><h2 id="一、引入依赖"><a href="#一、引入依赖" class="headerlink" title="一、引入依赖"></a>一、引入依赖</h2><p>Spring Boot项目中引入依赖：</p><pre class="language-XML" data-language="XML"><code class="language-XML">&lt;dependency&gt;      &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;      &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;&#x2F;artifactId&gt;&lt;&#x2F;dependency&gt;</code></pre><h2 id="二、配置文件"><a href="#二、配置文件" class="headerlink" title="二、配置文件"></a>二、配置文件</h2><p>在aplication.yml文件中写入如下配置：</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>   <span class="token key atrule">thymeleaf</span><span class="token punctuation">:</span>     <span class="token key atrule">mode</span><span class="token punctuation">:</span> LEGACYHTML5     <span class="token key atrule">encoding</span><span class="token punctuation">:</span> UTF<span class="token punctuation">-</span><span class="token number">8</span>    <span class="token comment"># 编码格式</span>     <span class="token key atrule">prefix</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>/template/  <span class="token comment"># 静态页面所在的路径，一般在resources文件加下创建</span>     <span class="token key atrule">suffix</span><span class="token punctuation">:</span> .html   <span class="token comment"># 页面后缀</span>     <span class="token key atrule">cache</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>   <span class="token comment"># 关闭缓存，开发时可以看到实时页面</span></code></pre><h2 id="三、编写控制层"><a href="#三、编写控制层" class="headerlink" title="三、编写控制层"></a>三、编写控制层</h2><p>控制层在返回页面的同时将键值对传给前端，给前端传值有四种方法：</p><p>通过Model对象：<br><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ViewTestController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token class-name">Model</span> model<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span><span class="token string">"这世上没有纯粹的自由，风也会有吹到头的时候"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"link"</span><span class="token punctuation">,</span><span class="token string">"http://www.baidu.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></p><p>通过ModelAndView对象：<br><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ViewTestController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token class-name">ModelAndView</span> model<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span><span class="token string">"这世上没有纯粹的自由，风也会有吹到头的时候"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"link"</span><span class="token punctuation">,</span><span class="token string">"http://www.baidu.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></p><p>通过HttpServletRequest对象：<br><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ViewTestController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span><span class="token string">"这世上没有纯粹的自由，风也会有吹到头的时候"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"link"</span><span class="token punctuation">,</span><span class="token string">"http://www.baidu.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></p><p>通过Map对象：<br><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ViewTestController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> map<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span><span class="token string">"这世上没有纯粹的自由，风也会有吹到头的时候"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"link"</span><span class="token punctuation">,</span><span class="token string">"http://www.baidu.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></p><h2 id="四、基础语法"><a href="#四、基础语法" class="headerlink" title="四、基础语法"></a>四、基础语法</h2><h3 id="编写html"><a href="#编写html" class="headerlink" title="编写html"></a>编写html</h3><p>建议在html标签上写入：<br><pre class="language-HTML" data-language="HTML"><code class="language-HTML">&lt;html xmlns:th&#x3D;&quot;http:&#x2F;&#x2F;www.thymeleaf.org&quot;&gt;</code></pre></p><p>不加不影响thymeleaf正常使用，但是加入以后开发过程中th:会自动弹出提示</p><p><code>/templates/success.html</code>：<br><pre class="language-HTML" data-language="HTML"><code class="language-HTML">&lt;!DOCTYPE html&gt;&lt;html lang&#x3D;&quot;en&quot; xmlns:th&#x3D;&quot;http:&#x2F;&#x2F;www.thymeleaf.org&quot;&gt;&lt;head&gt;    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;&#x2F;title&gt;&lt;&#x2F;head&gt;&lt;body&gt;&lt;h1 th:text&#x3D;&quot;$&#123;msg&#125;&quot;&gt;nice&lt;&#x2F;h1&gt;&lt;h2&gt;    &lt;a href&#x3D;&quot;www.baidu.com&quot; th:href&#x3D;&quot;$&#123;link&#125;&quot;&gt;去百度&lt;&#x2F;a&gt;  &lt;br&#x2F;&gt;    &lt;a href&#x3D;&quot;www.google.com&quot; th:href&#x3D;&quot;@&#123;&#x2F;link&#125;&quot;&gt;去百度&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;</code></pre></p><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><h4 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h4><div class="table-container"><table><thead><tr><th>表达式名字</th><th>语法</th><th style="text-align:center">用途</th></tr></thead><tbody><tr><td>变量取值</td><td>${…}</td><td style="text-align:center">获取请求域、session域、对象等值</td></tr><tr><td>选择变量</td><td>*{…}</td><td style="text-align:center">获取上下文对象值</td></tr><tr><td>消息</td><td>#{…}</td><td style="text-align:center">获取国际化等值</td></tr><tr><td>链接</td><td>@{…}</td><td style="text-align:center">生成链接</td></tr><tr><td>片段表达式</td><td>~{…}</td><td style="text-align:center">jsp:include 作用，引入公共页面片段</td></tr></tbody></table></div><h5 id="获取变量值-…"><a href="#获取变量值-…" class="headerlink" title="获取变量值${…}"></a>获取变量值${…}</h5><pre class="language-HTML" data-language="HTML"><code class="language-HTML">&lt;h1 th:text&#x3D;&quot;$&#123;msg&#125;&quot;&gt;nice&lt;&#x2F;h1&gt;</code></pre><p>上面代码默认从request作用域取值，若未取到则为null<br>若从session域和application域取值，分别加上前缀即可：<br><pre class="language-HTML" data-language="HTML"><code class="language-HTML">&lt;h1 th:text&#x3D;&quot;$&#123;session.msg&#125;&quot;&gt;nice&lt;&#x2F;h1&gt; &lt;!--从session域取值  --&gt;</code></pre><br><pre class="language-HTML" data-language="HTML"><code class="language-HTML">&lt;h1 th:text&#x3D;&quot;$&#123;application.msg&#125;&quot;&gt;nice&lt;&#x2F;h1&gt; &lt;!-- 从application域取值 --&gt;</code></pre></p><h5 id="选择变量表达式-…"><a href="#选择变量表达式-…" class="headerlink" title="选择变量表达式*{…}"></a>选择变量表达式*{…}</h5><p>通常结合th:object使用。某一标签使用th:object标签声明一个变量后，在其子标签内都可以通过选择变量表达式<em>{…}来取值，示例如下：<br><pre class="language-HTML" data-language="HTML"><code class="language-HTML">&lt;div th:object&#x3D;&quot;$&#123;session.user&#125;&quot;&gt;    &lt;p&gt;Name: &lt;span th:text&#x3D;&quot;*&#123;firstName&#125;&quot;&gt;Sebastian&lt;&#x2F;span&gt;.&lt;&#x2F;p&gt;    &lt;p&gt;Surname: &lt;span th:text&#x3D;&quot;*&#123;lastName&#125;&quot;&gt;Pepper&lt;&#x2F;span&gt;.&lt;&#x2F;p&gt;     &lt;p&gt;Nationality: &lt;span th:text&#x3D;&#123;nationality&#125;&quot;&gt;Saturn&lt;&#x2F;span&gt;.&lt;&#x2F;p&gt;&lt;&#x2F;div&gt; </code></pre><br>上述代码等价于：<br><pre class="language-HTML" data-language="HTML"><code class="language-HTML">&lt;div&gt;    &lt;p&gt;Name: &lt;span th:text&#x3D;&quot;$&#123;session.user.firstName&#125;&quot;&gt;Sebastian&lt;&#x2F;span&gt;.&lt;&#x2F;p&gt;     &lt;p&gt;Surname: &lt;span th:text&#x3D;&quot;$&#123;session.user.lastName&#125;&quot;&gt;Pepper&lt;&#x2F;span&gt;.&lt;&#x2F;p&gt;     &lt;p&gt;Nationality: &lt;span th:text&#x3D;&quot;$&#123;session.user.nationality&#125;&quot;&gt;Saturn&lt;&#x2F;span&gt;.&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;</code></pre><br>若父标签未使用th:object声明任何变量，那么</em>{…}和${…}完全等价。</p><h5 id="链接表达式-…"><a href="#链接表达式-…" class="headerlink" title="链接表达式@{…}"></a>链接表达式@{…}</h5><p>一般用于页面跳转和静态资源的引用，可搭配th:src,th:href,th:action等标签使用。<br><pre class="language-HTML" data-language="HTML"><code class="language-HTML">&lt;!-- 静态资源引用 --&gt;&lt;link rel&#x3D;&quot;icon&quot; th:href&#x3D;&quot;@&#123;&#x2F;images&#x2F;favicon.ico&#125;&quot; type&#x3D;&quot;image&#x2F;ico&quot; &#x2F;&gt;&lt;script th:src&#x3D;&quot;@&#123;&#x2F;vendors&#x2F;jquery&#x2F;dist&#x2F;jquery.min.js&#125;&quot;&gt;&lt;&#x2F;script&gt;&lt;!-- 页面跳转 --&gt;&lt;a th:href&#x3D;&quot;@&#123;&#x2F;index&#125;&quot;&gt;首页&lt;&#x2F;a&gt;</code></pre><br>若希望页面跳转时携带参数，可使用@{/URL(K1=V1,K2=V2…)}的格式<br><pre class="language-HTML" data-language="HTML"><code class="language-HTML">&lt;!-- 通过链接跳转为GET请求 --&gt;&lt;a th:href&#x3D;&quot;@&#123;&#x2F;index(id&#x3D;$&#123;id&#125;,pageNum&#x3D;1)&#125;&quot;&gt;首页&lt;&#x2F;a&gt; </code></pre></p><p>链接表达式中写的是在项目中的相对路径，thymeleaf会自动把项目根路径补全在表达式的前面。例如，你的项目路径是<a href="http://localhost:8080/myapp,那么th:href=&quot;@{/index}&quot;会被解析成href=&quot;http://localhost:8080/myapp/index&quot;。">http://localhost:8080/myapp,那么th:href=&quot;@{/index}&quot;会被解析成href=&quot;http://localhost:8080/myapp/index&quot;。</a></p><p>推荐使用链接表达式@{…}来进行静态资源的引用、页面跳转和表单提交，这样就不需要关心项目的根路径，只需要写入相对路径即可，尤其在rest风格中，必须使用。</p><h5 id="片段表达式-…"><a href="#片段表达式-…" class="headerlink" title="片段表达式~{…}"></a>片段表达式~{…}</h5><p>通常用于模板布局，搭配th:fragement,th:include,th:insert,th:remove等标签使用。<br>详细教程可以参考博客<a href="https://blog.csdn.net/wangmx1993328/article/details/84747497">https://blog.csdn.net/wangmx1993328/article/details/84747497</a></p><h4 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h4><ul><li>文本值: <strong>‘one text’</strong> <strong>,</strong> <strong>‘Another one!’</strong> <strong>,…</strong></li><li>数字: <strong>0</strong> <strong>,</strong> <strong>34</strong> <strong>,</strong> <strong>3.0</strong> <strong>,</strong> <strong>12.3</strong> <strong>,…</strong></li><li>布尔值: <strong>true</strong> <strong>,</strong> <strong>false</strong></li><li>空值: <strong>null</strong></li><li>变量： one，two，…. 变量不能有空格</li></ul><h4 id="文本操作"><a href="#文本操作" class="headerlink" title="文本操作"></a>文本操作</h4><ul><li>字符串拼接: <strong>+</strong><pre class="language-HTML" data-language="HTML"><code class="language-HTML">&lt;a th:href&#x3D;&quot;@&#123;$&#123;baseURL&#125;+&#39;&#x2F;add&#39;&#125;&quot;&gt;新增&lt;&#x2F;a&gt;</code></pre></li><li>变量替换: <strong>|The name is ${name}|</strong> <pre class="language-HTML" data-language="HTML"><code class="language-HTML">&lt;!-- 二者等价（只能包含表达式变量，而不能有条件判断等！) --&gt;&lt;h1 th:text&#x3D;&quot;&#39;后端发来的消息：&#39;+$&#123;msg&#125;&quot;&gt;nice&lt;&#x2F;h1&gt;&lt;h1 th:text&#x3D;&quot;|后端发来的消息：$&#123;msg&#125;|&quot;&gt;nice&lt;&#x2F;h1&gt;</code></pre></li></ul><h4 id="数学运算"><a href="#数学运算" class="headerlink" title="数学运算"></a>数学运算</h4><ul><li>运算符: + , - , * , / , %<pre class="language-HTML" data-language="HTML"><code class="language-HTML">&lt;th scope&#x3D;&quot;row&quot; th:text&#x3D;&quot;$&#123;objStat.index&#125;+*&#123;startRow&#125;&quot;&gt;1&lt;&#x2F;th&gt;</code></pre></li></ul><h4 id="布尔运算"><a href="#布尔运算" class="headerlink" title="布尔运算"></a>布尔运算</h4><ul><li>运算符:  <strong>and</strong> <strong>,</strong> <strong>or</strong></li><li>一元运算: <strong>!</strong> <strong>,</strong> <strong>not</strong> </li></ul><h4 id="比较运算"><a href="#比较运算" class="headerlink" title="比较运算"></a>比较运算</h4><ul><li>比较: <strong>&gt;</strong> <strong>,</strong> <strong>&lt;</strong> <strong>,</strong> <strong>&gt;=</strong> <strong>,</strong> <strong>&lt;=</strong> <strong>(</strong> <strong>gt</strong> <strong>,</strong> <strong>lt</strong> <strong>,</strong> <strong>ge</strong> <strong>,</strong> <strong>le</strong> <strong>)</strong></li><li>等式: <strong>==</strong> <strong>,</strong> <strong>!=</strong> <strong>(</strong> <strong>eq</strong> <strong>,</strong> <strong>ne</strong> <strong>)</strong> <pre class="language-HTML" data-language="HTML"><code class="language-HTML">&lt;option value&#x3D;&quot;10&quot; th:selected&#x3D;&quot;*&#123;pageSize&#125; eq &#39;10&#39;&quot;&gt;10&lt;&#x2F;option&gt;</code></pre></li></ul><h4 id="条件运算"><a href="#条件运算" class="headerlink" title="条件运算"></a>条件运算</h4><ul><li>If-then: <strong>(if) ? (then)</strong></li><li>If-then-else: <strong>(if) ? (then) : (else)</strong></li><li>Default: (value) <strong>?: (defaultvalue)</strong> <pre class="language-HTML" data-language="HTML"><code class="language-HTML">&lt;div class&#x3D;&quot;row&quot; th:with&#x3D;&quot;feature&#x3D;$&#123;feature&#125; &#x3D;&#x3D; null or $&#123;feature&#125; &#x3D;&#x3D; &#39;&#39; ? &#39;&#39;:&#39;&#x2F;&#39;+$&#123;feature&#125;&quot;&gt;</code></pre></li></ul><h4 id="特殊操作"><a href="#特殊操作" class="headerlink" title="特殊操作"></a>特殊操作</h4><ul><li>无操作： _</li></ul><h3 id="设置属性值-th-attr"><a href="#设置属性值-th-attr" class="headerlink" title="设置属性值-th:attr"></a>设置属性值-th:attr</h3><ul><li>设置单个值</li></ul><pre class="language-HTML" data-language="HTML"><code class="language-HTML">&lt;form action&#x3D;&quot;subscribe.html&quot; th:attr&#x3D;&quot;action&#x3D;@&#123;&#x2F;subscribe&#125;&quot;&gt;  &lt;fieldset&gt;    &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;email&quot; &#x2F;&gt;    &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;Subscribe!&quot; th:attr&#x3D;&quot;value&#x3D;#&#123;subscribe.submit&#125;&quot;&#x2F;&gt;  &lt;&#x2F;fieldset&gt;&lt;&#x2F;form&gt;</code></pre><ul><li>设置多个值</li></ul><pre class="language-HTML" data-language="HTML"><code class="language-HTML">&lt;img src&#x3D;&quot;..&#x2F;..&#x2F;images&#x2F;gtvglogo.png&quot;       th:attr&#x3D;&quot;src&#x3D;@&#123;&#x2F;images&#x2F;gtvglogo.png&#125;,title&#x3D;#&#123;logo&#125;,alt&#x3D;#&#123;logo&#125;&quot; &#x2F;&gt;</code></pre><p><a href="https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#setting-attribute-values">官方文档 - 5 Setting Attribute Values</a></p><h3 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h3><ul><li>基本语法：<pre class="language-HTML" data-language="HTML"><code class="language-HTML">&lt;div th:each&#x3D;&quot;变量名 : 集合&quot;&gt; &lt;p th:text&#x3D;&quot;$&#123;变量名&#125;&quot;&gt;&lt;&#x2F;p&gt; &lt;&#x2F;div&gt;</code></pre></li></ul><pre class="language-HTML" data-language="HTML"><code class="language-HTML">&lt;tr th:each&#x3D;&quot;prod : $&#123;prods&#125;&quot;&gt;    &lt;td th:text&#x3D;&quot;$&#123;prod.name&#125;&quot;&gt;Onions&lt;&#x2F;td&gt;    &lt;td th:text&#x3D;&quot;$&#123;prod.price&#125;&quot;&gt;2.41&lt;&#x2F;td&gt;    &lt;td th:text&#x3D;&quot;$&#123;prod.inStock&#125;? #&#123;true&#125; : #&#123;false&#125;&quot;&gt;yes&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;</code></pre><ul><li>迭代状态变量的使用：<pre class="language-HTML" data-language="HTML"><code class="language-HTML">&lt;div th:each &#x3D; &quot;变量名，状态变量名 : 集合&quot; &gt; &lt;p th:text &#x3D; &quot;$&#123;状态变量.属性&#125;&quot; &gt;&lt;&#x2F;p&gt; &lt;&#x2F;div&gt;</code></pre></li></ul><pre class="language-HTML" data-language="HTML"><code class="language-HTML">&lt;tr th:each&#x3D;&quot;prod,iterStat : $&#123;prods&#125;&quot; th:class&#x3D;&quot;$&#123;iterStat.odd&#125;? &#39;odd&#39;&quot;&gt;    &lt;td th:text&#x3D;&quot;$&#123;prod.name&#125;&quot;&gt;Onions&lt;&#x2F;td&gt;    &lt;td th:text&#x3D;&quot;$&#123;prod.price&#125;&quot;&gt;2.41&lt;&#x2F;td&gt;    &lt;td th:text&#x3D;&quot;$&#123;prod.inStock&#125;? #&#123;true&#125; : #&#123;false&#125;&quot;&gt;yes&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;</code></pre><blockquote><p>注：如果缺省状态变量名，则迭代器会 默认以变量名开头的状态变量 xxxStat</p><p>状态变量的属性<br>index：当前迭代对象的序号，从0开始，这是索引属性<br>count：当前迭代对象的序号，从1开始，这个是统计属性<br>size：迭代变量元素的总量，这是被迭代对象的大小属性<br>even/odd：布尔值，当前循环是否是偶数/奇数（从0开始计算）<br>first：布尔值，当前循环是否是第一个<br>last：布尔值，当前循环是否是最后一个<br>current：当前迭代变量</p></blockquote><h3 id="条件运算-1"><a href="#条件运算-1" class="headerlink" title="条件运算"></a>条件运算</h3><pre class="language-HTML" data-language="HTML"><code class="language-HTML">&lt;a href&#x3D;&quot;comments.html&quot;th:href&#x3D;&quot;@&#123;&#x2F;product&#x2F;comments(prodId&#x3D;$&#123;prod.id&#125;)&#125;&quot;th:if&#x3D;&quot;$&#123;not #lists.isEmpty(prod.comments)&#125;&quot;&gt;view&lt;&#x2F;a&gt;</code></pre><p>th:if标签：当条件成立时，该标签及其子标签才会存在<br>th:unless标签：与th:if标签相反，条件不成立时存在</p><pre class="language-HTML" data-language="HTML"><code class="language-HTML">&lt;div th:switch&#x3D;&quot;$&#123;user.role&#125;&quot;&gt;      &lt;p th:case&#x3D;&quot;&#39;admin&#39;&quot;&gt;User is an administrator&lt;&#x2F;p&gt;      &lt;p th:case&#x3D;&quot;#&#123;roles.manager&#125;&quot;&gt;User is a manager&lt;&#x2F;p&gt;      &lt;p th:case&#x3D;&quot;*&quot;&gt;User is some other thing&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;</code></pre><h3 id="属性优先级"><a href="#属性优先级" class="headerlink" title="属性优先级"></a>属性优先级</h3><div class="table-container"><table><thead><tr><th style="text-align:left">Order</th><th style="text-align:left">Feature</th><th style="text-align:left">Attributes</th></tr></thead><tbody><tr><td style="text-align:left">1</td><td style="text-align:left">Fragment inclusion</td><td style="text-align:left"><code>th:insert</code> <code>th:replace</code></td></tr><tr><td style="text-align:left">2</td><td style="text-align:left">Fragment iteration</td><td style="text-align:left"><code>th:each</code></td></tr><tr><td style="text-align:left">3</td><td style="text-align:left">Conditional evaluation</td><td style="text-align:left"><code>th:if</code> <code>th:unless</code> <code>th:switch</code> <code>th:case</code></td></tr><tr><td style="text-align:left">4</td><td style="text-align:left">Local variable definition</td><td style="text-align:left"><code>th:object</code> <code>th:with</code></td></tr><tr><td style="text-align:left">5</td><td style="text-align:left">General attribute modification</td><td style="text-align:left"><code>th:attr</code> <code>th:attrprepend</code> <code>th:attrappend</code></td></tr><tr><td style="text-align:left">6</td><td style="text-align:left">Specific attribute modification</td><td style="text-align:left"><code>th:value</code> <code>th:href</code> <code>th:src</code> <code>...</code></td></tr><tr><td style="text-align:left">7</td><td style="text-align:left">Text (tag body modification)</td><td style="text-align:left"><code>th:text</code> <code>th:utext</code></td></tr><tr><td style="text-align:left">8</td><td style="text-align:left">Fragment specification</td><td style="text-align:left"><code>th:fragment</code></td></tr><tr><td style="text-align:left">9</td><td style="text-align:left">Fragment removal</td><td style="text-align:left"><code>th:remove</code></td></tr></tbody></table></div><p><a href="https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#attribute-precedence">官方文档 - 10 Attribute Precedence</a></p><h3 id="thymeleaf常用标签"><a href="#thymeleaf常用标签" class="headerlink" title="thymeleaf常用标签"></a>thymeleaf常用标签</h3><p><img src="thymeleaf1.png" alt="thymeleaf常用标签"></p><h3 id="在js中使用thymeleaf"><a href="#在js中使用thymeleaf" class="headerlink" title="在js中使用thymeleaf"></a>在js中使用thymeleaf</h3><p>模板引擎除了直接渲染页面之外还可以在js中进行预处理，其中的thymeleaf代码可以先注释起来，静态时默认使用注释后面的默认值：<br><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script th<span class="token operator">:</span>inline<span class="token operator">=</span><span class="token string">"javascript"</span><span class="token operator">></span>    <span class="token keyword">var</span> msg <span class="token operator">=</span> <span class="token comment">/*[[thymeleaf]]*/</span>静态默认值<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre></p>]]></content>
      
      
      <categories>
          
          <category> thymeleaf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> thymeleaf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>启用博客第一天</title>
      <link href="/2023/01/11/qi-yong-bo-ke-di-yi-tian/"/>
      <url>/2023/01/11/qi-yong-bo-ke-di-yi-tian/</url>
      
        <content type="html"><![CDATA[<h1 id="启用博客的第一天"><a href="#启用博客的第一天" class="headerlink" title="启用博客的第一天"></a>启用博客的第一天</h1><p>当前时间：2023年1月11日 17:10<br>我不去想是否能够成功，既然选择了远方，便只顾风雨兼程。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 启用博客第一天 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
